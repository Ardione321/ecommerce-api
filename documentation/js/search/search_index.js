var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.926,1,2.926]],["body/guards/AccessTokenGuard.html",[0,4.051,1,2.972,2,2.242,3,0.068,4,0.06,5,0.06,6,5.156,7,4.332,8,2.468,9,1.901,10,5.872,11,5.872,12,5.156,13,5.329,14,7.539,15,5.201,16,6.953,17,3.783,18,3.864,19,4.599,20,6.953,21,4.179,22,4.308,23,1.432,24,3.069,25,5.156,26,4.179,27,4.308,28,4.368,29,0.173,30,0.799,31,1.057,32,5.156,33,1.427,34,4.308,35,0.919,36,2.242,37,5.547,38,4.684,39,4.684,40,0.46,41,2.811,42,4.308,43,4.308,44,3.178,45,0.945,46,0.011,47,0.793,48,0.322,49,0.793,50,5.872,51,4.308,52,4.308,53,3.783,54,4.332,55,2.811,56,4.051,57,3.437,58,1.059,59,0.894,60,2.972,61,3.783,62,4.308,63,4.308,64,4.684,65,2.811,66,4.308,67,3.864,68,1.211,69,1.882,70,4.308,71,4.599,72,0.197,73,1.647,74,0.127,75,0.298,76,1.827,77,1.939,78,2.811,79,2.074,80,2.242,81,2.468,82,1.573,83,0.068,84,0.034,85,2.074,86,3.616,87,0.846,88,2.242,89,2.308,90,2.811,91,2.811,92,1.65,93,1.026,94,2.811,95,1.939,96,0.812,97,2.811,98,0.6,99,2.811,100,2.811,101,1.939,102,2.468,103,0.812,104,0.79,105,2.811,106,0.918,107,1.056,108,2.811,109,2.811,110,2.811,111,2.811,112,2.468,113,2.811,114,2.811,115,2.811,116,0.005,117,0.005]],["title/interfaces/ActiveUserData.html",[118,2.271,119,2.757]],["body/interfaces/ActiveUserData.html",[3,0.145,4,0.129,5,0.129,23,2.138,29,0.369,46,0.01,48,0.447,68,2.198,83,0.145,116,0.009,117,0.009,118,3.215,119,4.726,120,4.142,121,5.272,122,5.272,123,1.987,124,4.658,125,6.485,126,1.763,127,1.353]],["title/entities/Address.html",[128,1.814,129,2.757]],["body/entities/Address.html",[3,0.122,4,0.108,5,0.108,23,2.309,29,0.311,40,0.672,46,0.011,48,0.514,68,2.149,72,0.193,83,0.122,84,0.062,116,0.008,117,0.008,123,1.786,126,1.473,127,1.631,128,2.794,129,5.146,130,2.965,131,4.443,132,2.273,133,3.116,134,4.247,135,4.247,136,4.024,137,5.06,138,4.456,139,5.06,140,4.709,141,5.06,142,3.491,143,6.533,144,5.06,145,3.491,146,4.507,147,1.273]],["title/controllers/AddressesController.html",[148,1.754,149,3.129]],["body/controllers/AddressesController.html",[3,0.156,4,0.139,5,0.139,46,0.01,72,0.191,75,0.687,83,0.156,84,0.079,116,0.009,117,0.009,148,2.68,149,5.614,150,2.594,151,5.689,152,3.99,153,6.479,154,6.479]],["title/modules/AddressesModule.html",[155,1.645,156,2.926]],["body/modules/AddressesModule.html",[3,0.137,4,0.122,5,0.122,46,0.011,72,0.225,75,0.604,83,0.137,84,0.07,116,0.009,117,0.009,149,5.64,150,2.82,155,2.965,156,5.766,157,2.815,158,2.815,159,3.053,160,3.053,161,2.815,162,4.094,163,3.053,164,5.005,165,5.005,166,5.766,167,3.772,168,3.053,169,2.929,170,5.7,171,5.7,172,5.7]],["title/injectables/AddressesService.html",[74,0.125,166,2.926]],["body/injectables/AddressesService.html",[3,0.157,4,0.14,5,0.14,46,0.01,72,0.192,74,0.225,75,0.692,83,0.157,84,0.08,116,0.009,117,0.009,166,5.272,173,1.281,174,5.73]],["title/interfaces/AppConfig.html",[118,2.271,175,3.129]],["body/interfaces/AppConfig.html",[3,0.133,4,0.118,5,0.118,29,0.34,46,0.011,48,0.464,68,2.411,72,0.163,82,3.091,83,0.133,116,0.008,117,0.008,118,2.959,120,3.812,123,1.888,175,5.562,176,4.852,177,7.139,178,7.139,179,7.139,180,6.067,181,3.238,182,4.408,183,4.408,184,5.525,185,5.525,186,5.525,187,5.525,188,5.525]],["title/controllers/AppController.html",[148,1.754,189,3.129]],["body/controllers/AppController.html",[3,0.146,4,0.13,5,0.13,46,0.011,68,1.704,72,0.216,75,0.643,83,0.146,84,0.074,87,1.19,106,1.063,116,0.009,117,0.009,148,3.026,150,2.428,189,5.397,190,5.325,191,5.106,192,5.325,193,4.474,194,5.325,195,6.064]],["title/modules/AppModule.html",[155,1.645,196,3.129]],["body/modules/AppModule.html",[1,3.362,3,0.08,4,0.071,5,0.071,7,2.443,46,0.011,48,0.204,72,0.251,73,1.941,75,0.351,76,2.153,77,2.285,82,1.853,83,0.08,84,0.041,89,1.207,107,1.832,116,0.006,117,0.006,150,1.951,155,2.242,156,4.902,157,1.636,158,1.636,159,1.774,160,1.774,161,1.636,162,3.096,163,1.774,167,2.61,168,1.774,169,1.702,175,3.595,182,2.642,189,4.265,191,4.619,192,2.908,196,6.29,197,2.908,198,2.908,199,2.908,200,4.619,201,4.619,202,4.902,203,4.902,204,4.619,205,4.902,206,4.619,207,2.642,208,3.758,209,3.312,210,3.312,211,3.312,212,3.312,213,3.312,214,3.312,215,3.312,216,3.312,217,4.279,218,5.598,219,3.312,220,3.595,221,3.312,222,4.873,223,3.312,224,2.285,225,0.984,226,3.312,227,2.908,228,4.873,229,4.873,230,2.443,231,3.595,232,3.312,233,3.312,234,3.312,235,3.595,236,3.312,237,3.312,238,2.908,239,4.612,240,3.312,241,3.312,242,3.312,243,3.312,244,3.312,245,3.312,246,3.312,247,3.312,248,3.312,249,2.908,250,3.312,251,2.908,252,3.312,253,2.642,254,3.312,255,2.908,256,3.312,257,2.908,258,3.312,259,1.702,260,3.312,261,2.443,262,3.312,263,2.908,264,2.908,265,2.908,266,4.279,267,4.279]],["title/injectables/AppService.html",[74,0.125,191,2.757]],["body/injectables/AppService.html",[3,0.151,4,0.134,5,0.134,46,0.011,68,1.764,72,0.185,74,0.22,75,0.665,83,0.151,84,0.077,106,1.1,116,0.009,117,0.009,173,1.232,191,4.854,194,5.51,268,5.51,269,6.276,270,6.276]],["title/injectables/Argon2Provider.html",[74,0.125,271,3.129]],["body/injectables/Argon2Provider.html",[3,0.118,4,0.105,5,0.105,29,0.301,30,1.186,31,1.622,40,0.562,45,1.153,46,0.011,47,0.968,48,0.393,49,0.968,58,1.153,59,1.567,68,2.359,72,0.21,74,0.188,75,0.519,83,0.118,84,0.06,106,1.121,116,0.008,117,0.008,173,0.961,259,3.659,271,4.718,272,4.298,273,4.156,274,4.195,275,1.714,276,5.615,277,5.615,278,5.615,279,5.681,280,6.394,281,4.895,282,5.615,283,6.253,284,4.895,285,5.615,286,4.298,287,4.895,288,4.895]],["title/controllers/AuthController.html",[148,1.754,289,3.129]],["body/controllers/AuthController.html",[3,0.084,4,0.075,5,0.075,9,2.625,14,4.447,15,3.292,23,1.897,26,5.215,29,0.215,30,0.94,31,1.461,33,0.787,35,0.745,40,0.445,44,3.737,45,0.913,46,0.011,47,0.767,48,0.445,49,0.767,58,0.913,69,1.943,72,0.22,75,0.37,83,0.084,84,0.043,87,0.685,98,1.08,106,0.888,116,0.006,117,0.006,132,1.505,148,2.095,150,1.398,152,2.15,275,1.544,289,3.737,290,3.066,291,3.67,292,4.04,293,4.04,294,2.785,295,4.854,296,5.065,297,3.492,298,6.537,299,3.492,300,3.492,301,6.537,302,5.065,303,4.04,304,3.492,305,3.737,306,2.785,307,4.854,308,3.492,309,4.447,310,3.492,311,3.492,312,5.065,313,5.065,314,3.492,315,4.111,316,3.492,317,3.492,318,2.409,319,3.874,320,3.066,321,2.785,322,1.398,323,2.15,324,3.492,325,2.409,326,3.492,327,2.785,328,2.785,329,2.576,330,4.397,331,5.96,332,5.121,333,1.444,334,3.492,335,3.492,336,3.066,337,2.576,338,3.492,339,3.492,340,5.065,341,2.576,342,3.737,343,5.065,344,5.065,345,3.657,346,5.065,347,3.737,348,5.215,349,3.492,350,3.492,351,3.492,352,3.492,353,3.492,354,3.492,355,3.492,356,3.492,357,3.492]],["title/modules/AuthModule.html",[155,1.645,200,2.757]],["body/modules/AuthModule.html",[3,0.102,4,0.091,5,0.091,46,0.011,72,0.248,75,0.45,76,2.762,77,2.931,82,2.377,83,0.102,84,0.052,116,0.007,117,0.007,150,2.329,155,2.572,157,2.099,158,2.099,159,2.275,160,2.275,161,2.099,162,3.552,163,3.552,167,3.115,168,2.275,169,2.183,200,5.529,206,3.781,208,2.762,217,3.731,227,3.731,264,3.731,265,3.731,266,3.731,267,3.731,271,4.291,274,4.307,289,4.893,319,5.459,320,3.731,358,3.731,359,3.731,360,3.731,361,4.751,362,5.014,363,5.014,364,4.249,365,3.781,366,4.249,367,4.249,368,4.249,369,4.249,370,4.291,371,3.731,372,3.731,373,3.731,374,4.249,375,3.39]],["title/injectables/AuthService.html",[74,0.125,319,2.757]],["body/injectables/AuthService.html",[3,0.108,4,0.096,5,0.096,28,3.107,29,0.277,30,1.123,31,1.584,33,1.364,35,1.291,40,0.601,45,1.232,46,0.011,47,1.035,48,0.421,49,1.035,58,1.091,72,0.225,74,0.178,75,0.477,83,0.108,84,0.055,87,1.188,92,1.266,93,1.073,96,1.301,98,1.291,103,1.301,104,1.266,106,1.061,116,0.007,117,0.007,173,0.884,275,1.674,292,4.827,293,4.827,294,4.827,295,4.954,305,4.464,306,4.827,307,4.954,319,3.933,321,3.593,322,1.803,327,3.593,328,3.593,362,5.212,363,5.101,370,3.323,371,3.955,372,3.955,373,3.955,376,3.955,377,4.504,378,4.504,379,4.504,380,4.504,381,4.504,382,3.955,383,4.504]],["title/guards/AuthenticationGuard.html",[0,2.926,235,3.129]],["body/guards/AuthenticationGuard.html",[0,5.024,1,5.27,2,5.019,3,0.078,4,0.069,5,0.069,7,2.378,9,1.546,13,3.81,15,4.574,19,5.525,28,2.224,29,0.198,30,0.886,31,1.148,32,5.899,33,1.586,35,1.019,40,0.42,44,2.378,45,0.861,46,0.011,47,0.723,48,0.46,49,0.723,53,4.194,54,4.642,56,4.341,57,3.81,58,0.861,59,1.306,60,3.295,61,4.194,72,0.198,73,1.889,74,0.141,75,0.342,81,2.83,83,0.078,84,0.039,85,2.378,86,1.985,87,1.381,89,2.074,92,1.342,93,1.137,96,0.931,98,0.688,103,0.931,104,1.342,106,0.565,107,1.795,116,0.006,117,0.006,123,0.881,150,1.912,230,2.378,235,3.524,238,2.83,291,4.966,323,1.985,325,2.224,384,2.83,385,4.776,386,4.776,387,5.019,388,5.373,389,4.194,390,4.776,391,5.019,392,4.194,393,4.194,394,4.194,395,4.776,396,4.194,397,4.776,398,4.776,399,4.776,400,4.776,401,4.776,402,4.776,403,4.776,404,3.223,405,7.036,406,3.223,407,3.223,408,4.776,409,6.292,410,4.776,411,2.571,412,2.224,413,3.223,414,2.83,415,4.776,416,3.223,417,3.223,418,3.223,419,3.223,420,3.223,421,2.83,422,3.223,423,3.223,424,3.223,425,3.223,426,3.223,427,3.223,428,3.223,429,3.223,430,3.223,431,2.095,432,3.223]],["title/injectables/BulkCreateProvider.html",[74,0.125,433,3.383]],["body/injectables/BulkCreateProvider.html",[3,0.086,4,0.076,5,0.076,29,0.219,30,0.952,31,1.58,35,1.094,40,0.579,45,1.189,46,0.011,47,0.998,48,0.448,49,0.998,58,1.086,59,1.558,72,0.151,74,0.151,75,0.377,83,0.086,84,0.044,87,0.697,89,2.402,92,1.692,93,1.434,96,1.739,98,1.64,103,1.739,104,2.047,106,0.623,116,0.006,117,0.006,128,2.574,147,0.894,173,0.697,275,1.284,431,3.913,433,4.092,434,6.137,435,2.891,436,3.12,437,5.129,438,7.508,439,3.784,440,3.784,441,2.31,442,4.734,443,3.554,444,5.129,445,4.504,446,6.591,447,6.019,448,3.913,449,3.554,450,3.12,451,3.554,452,3.554,453,2.835,454,3.784,455,3.554,456,4.543,457,3.784,458,3.554,459,1.22,460,1.15,461,3.12,462,2.835,463,4.092,464,5.129,465,2.622,466,2.452,467,2.452,468,2.452,469,3.554,470,3.554,471,3.554,472,3.554,473,2.452,474,2.622,475,2.452,476,2.622,477,2.452,478,2.622,479,2.622,480,2.622,481,2.835,482,3.12,483,3.554,484,3.12,485,3.554,486,2.622,487,2.622,488,2.622,489,2.622,490,2.622,491,2.188,492,2.622]],["title/entities/Categories.html",[128,1.814,493,1.645]],["body/entities/Categories.html",[3,0.105,4,0.093,5,0.093,9,2.174,29,0.268,40,0.699,46,0.011,47,1.017,48,0.505,68,2.024,72,0.174,83,0.105,84,0.053,107,2.222,116,0.007,117,0.007,123,1.616,126,1.333,127,1.514,128,2.528,130,2.55,132,2.362,133,3.641,134,3.843,135,4.682,136,4.436,138,4.135,140,4.135,147,1.095,493,2.293,494,3.821,495,5.357,496,4.954,497,3.756,498,5.896,499,5.36,500,4.632,501,4.351,502,4.954,503,4.351,504,4.351,505,4.351,506,4.716,507,4.078,508,4.362,509,4.078,510,4.351,511,2.59,512,3.21,513,5.912,514,4.351,515,4.954,516,4.351,517,3.002,518,4.362]],["title/controllers/CategoriesController.html",[148,1.754,519,3.129]],["body/controllers/CategoriesController.html",[3,0.053,4,0.047,5,0.047,9,2.622,29,0.136,30,0.661,31,1.616,33,0.498,35,0.471,40,0.557,45,1.087,46,0.011,47,0.913,48,0.482,49,0.913,58,1.144,59,1.452,69,0.656,72,0.201,75,0.234,83,0.053,84,0.027,86,1.36,87,0.433,93,0.849,98,1.286,106,1.112,116,0.004,117,0.004,126,1.536,127,1.577,132,1.885,148,0.913,150,0.884,152,1.36,275,1.708,291,1.36,305,2.629,315,1.523,318,1.523,323,1.36,325,1.523,329,1.629,330,4.869,332,5.378,333,0.913,337,1.629,341,2.629,342,4.679,345,4.002,347,5.162,412,1.523,435,2.126,493,2.914,519,2.629,520,1.939,521,2.629,522,3.128,523,2.842,524,4.513,525,3.128,526,3.128,527,3.128,528,1.762,529,3.532,530,1.939,531,2.208,532,4.1,533,3.198,534,3.341,535,2.208,536,2.208,537,1.939,538,3.918,539,3.573,540,1.762,541,2.842,542,3.563,543,2.208,544,2.208,545,1.762,546,3.563,547,2.208,548,4.1,549,3.573,550,4.1,551,5.582,552,2.208,553,5.264,554,2.55,555,2.208,556,1.939,557,3.792,558,2.842,559,2.208,560,1.939,561,2.208,562,4.479,563,2.208,564,1.939,565,1.762,566,2.842,567,2.911,568,2.842,569,2.208,570,1.939,571,3.918,572,2.208,573,2.629,574,2.194,575,2.208,576,1.524,577,1.299,578,2.758,579,1.762,580,1.762,581,2.911,582,1.939,583,1.762,584,1.183,585,1.435,586,2.208,587,2.208,588,2.208,589,2.208,590,2.208,591,1.762,592,2.208,593,2.208,594,2.208,595,2.208,596,2.208,597,2.208,598,2.208,599,1.939,600,2.208,601,2.208,602,2.208,603,2.208,604,2.208,605,1.762,606,2.208,607,2.208,608,2.208,609,2.208,610,2.208]],["title/modules/CategoriesModule.html",[155,1.645,201,2.757]],["body/modules/CategoriesModule.html",[3,0.094,4,0.084,5,0.084,46,0.011,72,0.248,75,0.414,83,0.094,84,0.048,116,0.007,117,0.007,150,2.197,155,2.46,157,1.93,158,1.93,159,2.093,160,2.093,161,1.93,162,3.398,163,3.398,167,2.939,168,2.093,169,2.008,201,5.627,204,3.568,208,2.54,224,2.696,225,1.161,365,3.568,493,1.515,511,1.829,517,2.696,519,4.681,533,2.668,577,1.424,581,5.382,582,3.431,584,2.093,611,3.431,612,3.431,613,3.431,614,4.885,615,4.885,616,4.885,617,4.885,618,4.885,619,4.885,620,4.885,621,3.908,622,3.908,623,3.216,624,3.431,625,4.82,626,3.568,627,4.237,628,2.407,629,2.407,630,2.54,631,3.908,632,3.908]],["title/injectables/CategoriesService.html",[74,0.125,581,2.757]],["body/injectables/CategoriesService.html",[3,0.069,4,0.062,5,0.062,29,0.177,30,0.815,31,1.684,33,1.581,35,0.937,40,0.636,45,1.265,46,0.011,47,1.062,48,0.432,49,1.062,58,1.265,59,1.653,72,0.23,74,0.129,75,0.306,83,0.069,84,0.035,87,1.377,98,1.497,106,1.23,116,0.005,117,0.005,126,1.67,127,1.199,173,0.566,275,1.78,493,1.118,521,3.24,522,3.857,523,3.504,524,5.224,525,3.857,526,3.857,527,3.857,528,3.504,529,3.752,533,2.307,537,3.857,538,4.162,545,3.504,560,3.857,564,3.857,570,3.857,571,4.162,576,1.878,577,1.601,578,3.277,581,2.855,584,1.544,585,1.874,614,4.385,615,3.867,616,4.56,617,4.56,618,4.56,619,4.56,620,4.56,623,2.574,624,2.531,625,3.857,626,2.855,627,3.664,628,1.775,629,1.775,630,1.874,633,2.531,634,2.883,635,5.32,636,2.883,637,2.883,638,2.883,639,2.883,640,2.883,641,2.883,642,2.883,643,2.883,644,2.883,645,2.883,646,2.883,647,2.883,648,2.883,649,2.883,650,2.883]],["title/classes/CreateCategoryDto.html",[84,0.052,529,2.485]],["body/classes/CreateCategoryDto.html",[3,0.118,4,0.105,5,0.105,9,2.648,29,0.3,40,0.561,46,0.011,47,1.185,48,0.393,68,2.12,72,0.188,83,0.118,84,0.078,101,3.368,116,0.008,117,0.008,123,1.745,132,1.897,333,2.019,507,3.368,508,4.709,529,3.74,533,3.114,651,1.954,652,5.674,653,3.602,654,3.931,655,6.244,656,4.709,657,4.903,658,5.092,659,6.383,660,6.383,661,4.882,662,4.882,663,5.674,664,6.383,665,4.882,666,4.882,667,3.006,668,3.382,669,4.38,670,2.019,671,3.654,672,3.894,673,4.287,674,4.882,675,3.894,676,4.882,677,3.894]],["title/injectables/CreateCategoryProvider.html",[74,0.125,614,2.757]],["body/injectables/CreateCategoryProvider.html",[3,0.112,4,0.099,5,0.099,29,0.286,30,1.146,31,1.4,33,1.047,35,1.317,40,0.543,45,1.114,46,0.011,47,1.05,48,0.38,49,0.935,58,0.837,59,1.281,69,1.38,72,0.227,74,0.182,75,0.492,83,0.112,84,0.057,87,0.911,92,1.735,93,1.471,96,1.342,98,1.317,103,1.342,104,1.305,106,0.814,116,0.007,117,0.007,147,1.168,173,0.911,225,1.38,275,1.48,459,1.594,460,1.503,493,2.395,521,4.556,528,4.926,529,4.512,533,2.691,576,1.986,578,2.859,584,2.486,614,4.014,678,5.535,679,4.077,680,4.643,681,2.394,682,4.643,683,6.175,684,4.643,685,1.642,686,2.597,687,4.643,688,4.643,689,4.643,690,2.721,691,3.704,692,3.704,693,4.643,694,4.643,695,1.8]],["title/classes/CreateManyCategoriesDto.html",[84,0.052,538,2.757]],["body/classes/CreateManyCategoriesDto.html",[3,0.125,4,0.112,5,0.112,9,2.154,29,0.32,40,0.458,46,0.011,48,0.476,69,1.547,72,0.228,83,0.125,84,0.09,107,2.756,116,0.008,117,0.008,123,1.819,132,1.547,333,2.153,435,2.153,493,3.097,529,4.786,534,3.384,538,4.325,574,3.206,577,2.425,578,3.206,651,2.084,652,5.308,653,3.841,667,4.098,668,3.164,670,2.153,671,3.419,696,3.841,697,4.098,698,4.59,699,4.571,700,3.841,701,5.206,702,4.909,703,3.051,704,4.153,705,3.592]],["title/injectables/CreateManyCategoriesProvider.html",[74,0.125,615,2.757]],["body/injectables/CreateManyCategoriesProvider.html",[3,0.077,4,0.069,5,0.069,29,0.197,30,0.882,31,1.608,33,1.749,35,1.014,40,0.589,45,1.208,46,0.011,47,1.063,48,0.412,49,1.014,58,1.131,59,1.549,72,0.185,74,0.14,75,0.339,83,0.077,84,0.039,87,0.628,89,2.558,92,1.882,93,1.493,96,1.812,98,1.679,103,1.812,104,2.042,106,0.833,116,0.006,117,0.006,147,0.805,173,0.628,275,1.209,431,3.088,435,1.324,439,3.505,440,3.505,441,2.08,442,4.562,454,3.505,456,4.076,457,3.505,459,1.098,460,1.036,463,4.52,466,2.208,467,2.208,468,2.208,473,2.208,474,2.361,475,2.208,476,2.361,477,2.208,478,2.361,479,2.361,480,2.361,482,2.81,486,2.361,487,2.361,488,2.361,489,2.361,490,2.361,491,1.971,492,2.361,493,1.842,521,3.505,533,2.431,538,4.354,576,1.369,577,2.648,578,1.971,584,1.714,615,4.076,678,5.599,690,1.875,691,3.79,692,3.79,706,2.553,707,2.81,708,4.751,709,7.018,710,3.2,711,4.751,712,3.2,713,3.2,714,3.2,715,4.751,716,3.2,717,3.2,718,3.2,719,4.172,720,3.2,721,4.751,722,3.2,723,3.2,724,3.2,725,3.2,726,2.08]],["title/injectables/CreateManyOrderProvider.html",[74,0.125,727,2.757]],["body/injectables/CreateManyOrderProvider.html",[3,0.061,4,0.055,5,0.055,23,1.524,24,1.496,29,0.157,30,0.742,31,1.222,33,1.77,35,0.853,40,0.59,45,1.092,46,0.011,47,0.917,48,0.413,49,0.917,58,1.006,59,1.157,60,1.761,72,0.211,74,0.118,75,0.271,83,0.061,84,0.031,87,1.402,89,2.798,92,1.385,93,1.328,98,1.482,103,0.738,104,1.702,106,0.701,116,0.005,117,0.005,123,1.093,126,1.365,127,1.257,147,0.642,173,0.501,181,2.342,225,0.759,275,1.051,322,1.6,345,2.236,441,1.659,442,4.174,448,2.598,456,4.174,460,0.826,473,1.761,477,1.761,497,1.428,511,1.859,534,1.659,554,1.457,576,1.71,577,2.604,672,2.036,681,2.173,685,0.903,697,1.572,727,2.598,728,5.544,729,2.036,730,4.928,731,4.928,732,3.998,733,3.51,734,4.928,735,3.998,736,4.327,737,2.888,738,3.998,739,3.998,740,3.625,741,2.552,742,3.189,743,2.241,744,3.203,745,3.126,746,5.576,747,3.51,748,2.552,749,2.241,750,2.552,751,2.552,752,3.998,753,2.552,754,2.552,755,2.598,756,3.189,757,2.552,758,3.51,759,2.036,760,2.241,761,2.241,762,1.428,763,1.761,764,2.241,765,2.241,766,2.552,767,6.055,768,2.552,769,2.552,770,2.552,771,1.428,772,1.496,773,4.467,774,2.552,775,4.114,776,2.552,777,2.552,778,1.659,779,2.552,780,2.552,781,2.552,782,2.552,783,2.552,784,2.552,785,2.552,786,2.552,787,2.552,788,2.552,789,2.342,790,3.636,791,2.949,792,1.659,793,2.552,794,2.241,795,2.241,796,2.241,797,3.636,798,3.51,799,3.51,800,2.241,801,2.552,802,2.036,803,2.241,804,2.241,805,2.241,806,2.552,807,2.552,808,2.552,809,2.552,810,2.552,811,2.552,812,2.036,813,2.552,814,2.552,815,2.552,816,2.241,817,2.552,818,2.241,819,2.241,820,2.241,821,2.552]],["title/classes/CreateManyOrdersDto.html",[84,0.052,740,2.757]],["body/classes/CreateManyOrdersDto.html",[3,0.122,4,0.109,5,0.109,29,0.312,40,0.446,46,0.011,48,0.471,69,1.508,72,0.234,83,0.122,84,0.089,107,2.46,116,0.008,117,0.008,123,1.789,132,1.508,273,4.254,322,2.031,333,2.099,388,3.744,435,2.099,497,2.839,574,3.125,577,2.386,651,2.031,667,4.031,668,3.113,670,2.099,671,3.363,696,3.744,697,4.031,700,3.744,702,4.829,703,2.973,704,4.048,705,3.501,740,4.254,745,3.099,773,5.647,789,4.754,822,4.829,823,2.973,824,6.545,825,4.455,826,5.074,827,3.501,828,4.048,829,5.074]],["title/classes/CreateManyProductsDto.html",[84,0.052,830,2.757]],["body/classes/CreateManyProductsDto.html",[3,0.125,4,0.112,5,0.112,29,0.32,40,0.458,46,0.011,48,0.476,69,1.547,72,0.228,83,0.125,84,0.09,107,2.501,116,0.008,117,0.008,123,1.819,132,1.547,273,4.325,322,2.084,333,2.153,435,2.153,497,4.468,511,1.735,574,3.206,577,2.425,651,2.084,667,4.098,668,3.164,670,2.153,671,3.419,696,3.841,697,4.098,700,3.841,702,4.909,703,3.051,704,4.153,705,3.592,823,3.051,825,4.571,827,3.592,830,4.325,831,5.308,832,5.843,833,4.57,834,4.571]],["title/injectables/CreateManyProductsProvider.html",[74,0.125,835,2.757]],["body/injectables/CreateManyProductsProvider.html",[3,0.073,4,0.065,5,0.065,29,0.187,30,0.849,31,1.591,33,1.754,35,0.976,40,0.576,45,1.183,46,0.011,47,0.993,48,0.404,49,0.993,58,1.103,59,1.526,72,0.217,74,0.135,75,0.323,83,0.073,84,0.037,87,0.898,89,2.605,92,1.843,93,1.457,96,1.767,98,1.635,103,1.767,104,2.008,106,0.802,116,0.006,117,0.006,127,0.686,147,0.766,173,0.597,225,0.905,275,1.173,322,1.832,431,2.974,435,1.259,439,3.376,440,3.376,441,1.978,442,4.478,454,3.376,456,3.975,457,3.376,459,1.045,460,0.985,466,2.1,467,2.1,468,2.1,473,2.1,474,2.245,475,2.1,476,2.245,477,2.1,478,2.245,479,2.245,480,2.245,486,2.245,487,2.245,488,2.245,489,2.245,490,2.245,491,1.874,492,2.245,493,1.18,497,3.076,511,2.186,533,2.132,554,1.109,576,1.957,577,2.605,681,1.98,685,1.076,686,1.703,690,1.783,726,1.978,830,4.478,833,3.668,835,3.975,836,5.495,837,2.672,838,4.576,839,3.222,840,3.043,841,4.576,842,3.043,843,4.576,844,5.082,845,3.043,846,3.043,847,3.043,848,1.63,849,2.1,850,4.576,851,3.043,852,3.043,853,2.428,854,2.672,855,3.043,856,3.043,857,3.043]],["title/classes/CreateManyUsersDto.html",[84,0.052,858,2.757]],["body/classes/CreateManyUsersDto.html",[3,0.124,4,0.111,5,0.111,9,2.142,29,0.318,40,0.454,46,0.011,48,0.49,69,1.534,72,0.227,83,0.124,84,0.089,107,2.745,116,0.008,117,0.008,123,1.809,132,1.534,333,2.135,435,2.135,462,4.118,534,3.355,577,2.412,651,2.066,667,4.075,668,3.147,670,2.135,671,3.4,696,3.808,697,4.075,698,5.039,699,4.532,700,3.808,702,4.882,703,3.024,705,3.561,778,5.178,858,4.301,859,5.279,860,4.532,861,4.776,862,5.161,863,3.355,864,4.532,865,5.161]],["title/injectables/CreateManyUsersProvider.html",[74,0.125,866,2.757]],["body/injectables/CreateManyUsersProvider.html",[3,0.077,4,0.069,5,0.069,23,2.085,29,0.197,30,0.883,31,1.609,33,1.775,35,1.015,40,0.589,45,1.209,46,0.011,47,1.015,48,0.413,49,1.015,58,1.132,59,1.55,69,0.953,72,0.198,74,0.14,75,0.34,83,0.077,84,0.039,87,0.934,89,2.65,92,1.594,93,1.351,96,1.813,98,1.656,103,1.813,104,1.337,106,0.834,116,0.006,117,0.006,147,0.807,173,0.629,259,1.647,274,3.893,275,1.21,431,3.092,435,1.326,439,3.51,440,3.51,441,2.084,442,4.565,454,3.51,456,4.079,457,3.51,459,1.1,460,1.038,463,4.525,466,2.212,467,2.212,468,2.212,473,2.212,474,2.365,475,2.212,476,2.365,477,2.212,478,2.365,479,2.365,480,2.365,486,2.365,487,2.365,488,2.365,489,2.365,490,2.365,491,1.974,492,2.365,576,1.371,577,2.65,681,1.038,726,2.084,858,4.079,866,3.092,867,5.602,868,2.365,869,3.795,870,3.51,871,3.206,872,4.757,873,3.206,874,3.206,875,4.757,876,3.206,877,3.206,878,3.206,879,1.647,880,2.558,881,2.558,882,4.757,883,3.206,884,4.757,885,3.795,886,2.815,887,3.206,888,4.177,889,3.206,890,3.206,891,3.206,892,3.206]],["title/classes/CreateOrderDto.html",[84,0.052,789,2.485]],["body/classes/CreateOrderDto.html",[3,0.112,4,0.1,5,0.1,23,1.272,29,0.286,40,0.677,46,0.011,48,0.474,68,1.738,72,0.205,83,0.112,84,0.076,116,0.007,117,0.007,123,1.691,126,1.669,127,1.049,132,2.29,322,1.864,345,4.142,435,1.925,448,3.026,651,1.864,667,4.279,668,3.768,669,3.81,670,1.925,698,3.211,744,4.516,745,3.458,762,2.604,789,3.625,790,5.126,791,5.126,792,4.516,797,5.126,822,5.845,823,2.728,834,4.087,893,4.655,894,4.087,895,4.655,896,5.542,897,4.655,898,4.087,899,4.087,900,4.655,901,4.655,902,4.935,903,4.087,904,4.087,905,3.713,906,4.655,907,4.655]],["title/classes/CreateOrderItemDto.html",[84,0.052,744,2.757]],["body/classes/CreateOrderItemDto.html",[3,0.127,4,0.113,5,0.113,9,2.387,29,0.324,40,0.648,46,0.011,48,0.454,49,1.116,68,1.884,72,0.155,83,0.127,84,0.082,116,0.008,117,0.008,123,1.832,126,1.75,127,1.187,132,2.192,448,5.045,511,1.756,651,2.109,668,3.691,669,4.541,670,2.178,744,4.357,745,3.319,822,5.727,823,3.086,898,4.625,902,5.348,905,4.202,908,7.374,909,6.475,910,4.625,911,5.267,912,5.267]],["title/injectables/CreateOrderProvider.html",[74,0.125,913,2.757]],["body/injectables/CreateOrderProvider.html",[3,0.076,4,0.068,5,0.068,23,1.706,24,1.859,29,0.195,30,0.876,31,1.347,33,1.504,35,1.007,40,0.495,45,1.017,46,0.011,47,0.853,48,0.347,49,0.853,58,0.851,59,1.17,72,0.224,74,0.139,75,0.336,83,0.076,84,0.039,87,1.106,89,2.772,92,1.754,93,1.487,96,0.917,98,1.623,106,0.827,116,0.006,117,0.006,127,1.577,147,0.798,173,0.623,225,0.943,275,1.203,322,1.89,345,2.64,441,2.062,442,4.547,448,3.068,456,4.709,459,1.089,460,1.027,466,2.188,467,2.188,468,2.188,511,2.332,554,2.054,576,2.018,681,2.346,685,1.122,697,1.954,728,4.98,729,2.531,733,4.144,736,4.949,737,3.303,743,2.785,744,3.664,745,3.36,749,2.785,761,2.785,762,2.64,763,2.188,764,2.785,765,2.785,771,1.775,772,1.859,775,3.482,789,4.245,790,4.159,791,3.482,792,2.062,795,2.785,796,2.785,797,2.34,798,4.144,799,4.144,800,2.785,802,2.531,803,2.785,804,2.785,805,2.785,816,4.144,818,4.144,819,4.144,820,2.785,913,3.068,914,3.765,915,3.172,916,3.765,917,3.172,918,3.172,919,2.188,920,3.172,921,2.785,922,3.172,923,3.172,924,3.172,925,4.72,926,3.172,927,3.765,928,4.72,929,3.172,930,3.172,931,3.172]],["title/classes/CreateProductDto.html",[84,0.052,833,2.373]],["body/classes/CreateProductDto.html",[3,0.085,4,0.076,5,0.076,9,2.603,29,0.217,40,0.639,46,0.011,47,1.056,48,0.509,49,0.773,68,2.106,69,1.05,72,0.151,83,0.085,84,0.063,95,2.437,101,2.437,107,2.255,116,0.006,117,0.006,123,1.396,126,1.763,127,1.151,132,2.16,333,1.461,507,2.437,508,2.606,511,2.832,533,1.981,651,1.414,654,4.294,655,5.563,656,2.606,663,4.786,667,3.146,669,4.048,670,1.461,671,3.735,672,4.075,673,3.102,675,2.818,677,4.075,698,4.139,705,4.535,756,4.075,823,2.07,831,5.979,833,2.857,902,5.244,932,5.268,933,5.268,934,6.123,935,6.123,936,5.108,937,5.999,938,3.533,939,3.533,940,3.533,941,2.818,942,5.999,943,5.108,944,5.108,945,3.768,946,5.108,947,3.533,948,3.533,949,3.533,950,3.533,951,3.533,952,3.533,953,5.108,954,3.533,955,4.075,956,3.533,957,3.533,958,3.524,959,3.533,960,3.533,961,3.533,962,2.818,963,2.07,964,3.533,965,3.533,966,3.533,967,3.533]],["title/injectables/CreateProductProvider.html",[74,0.125,968,2.757]],["body/injectables/CreateProductProvider.html",[3,0.104,4,0.093,5,0.093,29,0.266,30,1.092,31,1.35,33,1.326,35,1.255,40,0.517,45,1.061,46,0.011,47,0.891,48,0.362,49,0.891,58,0.779,59,1.221,72,0.228,74,0.173,75,0.458,83,0.104,84,0.053,87,1.155,89,2.144,92,1.653,93,1.401,96,1.248,98,1.255,103,1.248,104,1.214,106,0.757,116,0.007,117,0.007,127,0.974,147,1.087,173,0.848,225,1.284,275,1.427,322,1.73,435,2.433,459,1.483,493,2.281,511,2.584,533,2.785,554,1.575,576,1.848,681,2.568,685,1.528,686,2.417,690,2.531,737,3.447,772,2.531,812,3.446,833,4.018,836,5.337,839,3.92,844,4.34,848,2.314,849,2.98,853,3.446,854,3.793,968,3.824,969,3.446,970,5.883,971,2.808,972,4.32,973,5.883,974,4.32,975,4.32,976,4.32,977,4.32,978,4.32,979,3.793,980,4.32]],["title/classes/CreateUserDto.html",[84,0.052,861,2.485]],["body/classes/CreateUserDto.html",[3,0.088,4,0.078,5,0.078,9,2.288,29,0.225,40,0.621,46,0.01,47,1.011,48,0.435,49,0.792,68,2.248,72,0.154,83,0.088,84,0.064,116,0.006,117,0.006,123,1.431,124,3.953,126,1.18,129,4.921,132,2.1,259,3.631,333,1.512,651,1.463,654,4.112,655,6.459,656,2.696,657,3.402,663,6.289,668,3.36,669,4.352,670,1.512,671,3.631,675,4.878,677,2.915,756,5.865,859,5.865,861,3.067,941,2.915,955,4.175,958,3.611,963,4.308,981,2.915,982,5.369,983,5.369,984,6.204,985,3.654,986,3.654,987,3.654,988,3.654,989,4.175,990,3.654,991,3.654,992,4.175,993,3.654,994,3.654,995,5.234,996,5.234,997,4.596,998,6.204,999,3.654,1000,5.234,1001,5.234,1002,3.861,1003,5.234,1004,5.234,1005,5.234,1006,5.234,1007,5.234,1008,5.234,1009,3.654,1010,4.596,1011,3.654,1012,6.204,1013,6.676,1014,3.654,1015,3.654,1016,3.654]],["title/injectables/CreateUsersProvider.html",[74,0.125,1017,2.757]],["body/injectables/CreateUsersProvider.html",[3,0.106,4,0.094,5,0.094,23,1.627,29,0.27,30,1.104,31,1.362,33,1.341,35,1.27,40,0.523,45,1.073,46,0.011,47,0.901,48,0.366,49,0.901,58,0.792,59,1.235,72,0.23,74,0.175,75,0.466,83,0.106,84,0.054,87,1.168,89,2.46,92,1.672,93,1.417,96,1.27,98,1.44,103,1.27,104,1.235,106,0.77,116,0.007,117,0.007,124,2.458,147,1.106,173,0.862,225,1.306,259,2.258,274,4.267,275,1.44,460,1.423,576,1.879,681,2.342,685,1.554,691,3.505,692,3.505,695,1.704,760,3.858,771,2.458,861,4.566,863,2.856,867,5.383,868,3.242,870,4.39,879,2.258,881,3.505,885,4.747,888,3.858,1017,3.868,1018,2.706,1019,4.394,1020,3.665,1021,4.747,1022,4.394,1023,5.951,1024,3.505,1025,4.394,1026,4.394,1027,4.394,1028,4.394,1029,4.394]],["title/injectables/DataResponseInterceptor.html",[74,0.125,231,3.129]],["body/injectables/DataResponseInterceptor.html",[3,0.105,4,0.093,5,0.093,9,1.405,24,2.544,29,0.267,30,1.095,35,0.926,40,0.519,45,1.065,46,0.011,47,1.09,48,0.363,49,0.894,54,5.309,56,4.965,57,4.709,58,1.065,72,0.198,74,0.174,75,0.46,82,2.428,83,0.105,84,0.053,85,3.203,86,3.635,87,0.852,89,1.582,106,0.761,116,0.007,117,0.007,173,0.852,177,5.183,178,5.183,179,6.319,193,3.203,218,6.817,231,4.354,263,5.183,348,5.741,747,3.812,1030,5.888,1031,3.812,1032,5.902,1033,4.341,1034,4.341,1035,5.902,1036,5.741,1037,7.196,1038,4.341,1039,5.902,1040,5.902,1041,5.902,1042,5.183,1043,5.902,1044,5.902,1045,5.902,1046,5.902,1047,5.183,1048,7.526,1049,5.902,1050,5.902,1051,5.902,1052,4.341,1053,3.812,1054,4.341,1055,4.341,1056,4.341]],["title/interfaces/DatabaseConfig.html",[118,2.271,220,3.129]],["body/interfaces/DatabaseConfig.html",[3,0.115,4,0.102,5,0.102,29,0.293,46,0.011,48,0.5,60,5.61,68,2.417,69,1.416,72,0.14,82,2.666,83,0.115,89,1.737,106,0.835,107,1.791,116,0.008,117,0.008,118,2.552,120,3.288,123,1.717,126,1.584,180,5.517,181,2.793,220,5.186,249,6.819,251,6.819,253,6.196,255,6.819,257,6.819,259,3.991,755,4.084,1057,3.802,1058,6.819,1059,3.802,1060,4.766,1061,4.766,1062,4.766,1063,4.766,1064,4.766,1065,4.766,1066,4.766]],["title/injectables/DeleteCategoryByIdProvider.html",[74,0.125,616,2.757]],["body/injectables/DeleteCategoryByIdProvider.html",[3,0.114,4,0.102,5,0.102,29,0.292,30,1.164,31,1.417,33,1.071,35,1.338,40,0.551,45,1.131,46,0.011,47,0.95,48,0.386,49,0.95,58,0.857,59,1.302,69,1.413,72,0.22,74,0.185,75,0.504,83,0.114,84,0.058,87,0.933,92,1.763,93,1.494,96,1.374,98,1.014,103,1.374,104,1.336,106,0.833,107,1.786,116,0.008,117,0.008,126,1.582,127,1.414,147,1.196,173,0.933,225,1.413,275,1.498,459,1.631,460,1.539,493,1.843,523,5.003,533,3.091,545,5.003,554,1.732,567,3.09,584,2.545,616,4.077,681,2.417,685,1.681,686,2.659,690,2.785,695,1.843,839,3.675,1067,6.164,1068,2.104,1069,3.279,1070,2.659,1071,2.659,1072,4.753]],["title/injectables/DeleteOrderByIdProvider.html",[74,0.125,1073,2.926]],["body/injectables/DeleteOrderByIdProvider.html",[3,0.156,4,0.139,5,0.139,46,0.01,72,0.191,74,0.224,75,0.687,83,0.156,84,0.079,116,0.009,117,0.009,173,1.272,745,2.771,1068,2.867,1073,5.249,1074,5.689]],["title/injectables/DeleteProductByIdProvider.html",[74,0.125,1075,2.757]],["body/injectables/DeleteProductByIdProvider.html",[3,0.113,4,0.101,5,0.101,29,0.289,30,1.156,31,1.409,33,1.06,35,1.329,40,0.548,45,1.123,46,0.011,47,0.943,48,0.383,49,0.943,58,0.848,59,1.293,69,1.398,72,0.219,74,0.184,75,0.499,83,0.113,84,0.058,87,0.923,92,1.75,93,1.483,96,1.359,98,1.329,103,1.359,104,1.322,106,0.824,107,1.768,116,0.008,117,0.008,126,1.574,127,1.574,147,1.183,173,0.923,225,1.398,275,1.49,459,1.614,460,1.523,511,2.743,567,3.057,681,2.407,685,1.663,695,1.824,726,3.057,737,3.65,772,2.756,848,2.519,927,3.752,971,3.057,1068,2.082,1070,2.631,1071,2.631,1075,4.832,1076,6.132,1077,6.229,1078,3.245,1079,4.703]],["title/injectables/DeleteUserByIdProvider.html",[74,0.125,1080,2.757]],["body/injectables/DeleteUserByIdProvider.html",[3,0.115,4,0.102,5,0.102,23,2.18,29,0.293,30,1.166,31,1.419,33,1.074,35,1.34,40,0.552,45,1.133,46,0.011,47,0.951,48,0.387,49,0.951,58,0.86,59,1.304,69,1.416,72,0.22,74,0.185,75,0.505,83,0.115,84,0.058,87,0.935,92,1.766,93,1.496,96,1.377,98,1.017,103,1.377,104,1.339,106,0.835,107,1.791,116,0.008,117,0.008,126,1.584,127,1.416,147,1.199,173,0.935,225,1.416,275,1.499,459,1.636,460,1.543,554,1.737,567,3.098,681,2.419,685,1.685,695,1.848,771,2.666,879,2.449,1018,2.935,1020,3.869,1068,2.109,1070,2.666,1071,2.666,1080,4.084,1081,6.172,1082,5.012,1083,5.012,1084,4.766,1085,3.098,1086,3.288]],["title/injectables/FindAllCategoriesProvider.html",[74,0.125,617,2.757]],["body/injectables/FindAllCategoriesProvider.html",[3,0.119,4,0.105,5,0.105,29,0.303,30,1.191,31,1.441,33,1.109,35,1.369,40,0.564,45,0.888,46,0.011,47,0.745,48,0.303,49,0.745,58,0.888,59,1.332,72,0.223,74,0.189,75,0.522,83,0.119,84,0.06,87,0.966,92,1.803,93,1.528,96,1.422,98,1.05,103,1.422,104,1.383,106,0.863,116,0.008,117,0.008,147,1.238,173,0.966,225,1.463,261,3.631,275,1.523,459,1.689,460,1.593,493,3.12,554,1.794,584,2.636,617,5.23,681,2.45,685,1.74,686,2.753,695,1.909,706,3.926,707,4.322,839,3.76,1069,3.395,1087,5.696,1088,4.922,1089,4.922,1090,4.922,1091,3.926]],["title/injectables/FindAllProductProvider.html",[74,0.125,1092,2.757]],["body/injectables/FindAllProductProvider.html",[3,0.103,4,0.092,5,0.092,29,0.264,30,1.086,31,1.345,33,1.32,35,1.249,40,0.515,45,1.056,46,0.011,47,0.886,48,0.36,49,0.886,58,0.774,59,1.215,72,0.221,74,0.173,75,0.455,83,0.103,84,0.053,87,1.149,89,1.563,92,1.645,93,1.394,95,2.959,96,1.24,98,0.915,101,2.959,103,1.24,104,1.205,106,0.752,116,0.007,117,0.007,126,1.502,127,1.32,147,1.079,173,0.842,225,1.275,261,3.165,275,1.422,459,1.472,460,1.389,493,1.663,497,4.328,511,1.951,533,2.777,554,1.563,681,2.563,685,1.517,686,2.4,695,1.663,737,3.43,772,2.513,839,3.905,848,2.297,849,2.959,905,3.422,932,5.852,969,3.422,971,2.788,1091,3.422,1092,4.654,1093,5.317,1094,4.289,1095,5.854,1096,4.289,1097,3.165,1098,4.289,1099,4.289,1100,4.289,1101,3.766,1102,4.289,1103,4.289,1104,4.289]],["title/injectables/FindAllUsersProvider.html",[74,0.125,1105,2.757]],["body/injectables/FindAllUsersProvider.html",[3,0.118,4,0.105,5,0.105,23,2.143,29,0.302,30,1.189,31,1.439,33,1.106,35,1.367,40,0.563,45,0.885,46,0.011,47,0.743,48,0.302,49,0.743,58,0.885,59,1.329,69,1.459,72,0.223,74,0.189,75,0.52,83,0.118,84,0.06,87,0.963,92,1.8,93,1.526,96,1.418,98,1.047,103,1.418,104,1.379,106,0.86,116,0.008,117,0.008,147,1.235,173,0.963,225,1.459,261,3.621,275,1.521,459,1.685,460,1.589,554,1.789,681,2.447,685,1.736,695,1.903,771,2.746,778,3.19,868,3.621,879,2.522,1018,3.023,1020,3.945,1085,3.19,1091,3.916,1105,4.164,1106,5.261,1107,7.558,1108,4.908,1109,4.908,1110,4.908]],["title/injectables/FindCategoryByIdProvider.html",[74,0.125,618,2.757]],["body/injectables/FindCategoryByIdProvider.html",[3,0.115,4,0.102,5,0.102,29,0.294,30,1.168,31,1.42,33,1.077,35,1.343,40,0.553,45,1.135,46,0.011,47,0.953,48,0.387,49,0.953,58,0.862,59,1.306,69,1.42,72,0.22,74,0.185,75,0.506,83,0.115,84,0.058,87,0.938,92,1.769,93,1.499,96,1.381,98,1.019,103,1.381,104,1.343,106,0.838,116,0.008,117,0.008,126,1.587,127,1.419,147,1.202,173,0.938,225,1.42,275,1.501,459,1.64,460,1.547,493,2.441,533,3.095,554,1.742,584,2.559,618,4.862,681,2.422,685,1.69,686,2.673,690,2.8,695,1.853,839,3.688,853,3.812,1068,2.115,1069,3.296,1070,2.673,1071,2.673,1087,5.615,1111,6.294,1112,4.196]],["title/injectables/FindOneByEmailProvider.html",[74,0.125,1113,2.757]],["body/injectables/FindOneByEmailProvider.html",[3,0.114,4,0.102,5,0.102,23,2.121,29,0.292,30,1.164,31,1.417,33,1.071,35,1.338,40,0.551,45,1.131,46,0.011,47,0.95,48,0.386,49,0.95,58,0.857,59,1.302,68,1.973,69,1.413,72,0.22,73,2.785,74,0.185,75,0.504,83,0.114,84,0.058,87,0.933,92,1.763,93,1.494,96,1.374,98,1.014,106,0.833,116,0.008,117,0.008,124,3.509,147,1.196,173,0.933,225,1.413,275,1.498,459,1.631,460,1.539,554,1.732,681,2.417,685,1.681,695,1.843,771,2.659,879,2.442,963,4.113,1018,2.927,1020,3.863,1024,3.792,1085,3.09,1086,3.279,1106,5.179,1113,4.852,1114,4.173,1115,4.753,1116,6.272,1117,4.753,1118,4.173]],["title/injectables/FindOneByIdProvider.html",[74,0.125,1119,2.757]],["body/injectables/FindOneByIdProvider.html",[3,0.114,4,0.102,5,0.102,23,2.121,29,0.292,30,1.164,31,1.417,33,1.071,35,1.338,40,0.551,45,1.131,46,0.011,47,0.95,48,0.386,49,0.95,58,0.857,59,1.302,69,1.413,72,0.22,74,0.185,75,0.504,83,0.114,84,0.058,87,0.933,92,1.763,93,1.494,96,1.374,98,1.014,103,1.374,104,1.336,106,0.833,116,0.008,117,0.008,126,1.582,127,1.414,147,1.196,173,0.933,225,1.413,275,1.498,459,1.631,460,1.539,554,1.732,681,2.417,685,1.681,695,1.843,771,2.659,879,2.442,963,4.113,1018,2.927,1020,3.863,1024,3.792,1068,2.104,1070,2.659,1071,2.659,1085,3.09,1086,3.279,1106,5.179,1119,4.077,1120,6.272,1121,6.272]],["title/injectables/FindProductByIdProvider.html",[74,0.125,1122,2.757]],["body/injectables/FindProductByIdProvider.html",[3,0.115,4,0.102,5,0.102,29,0.293,30,1.166,31,1.419,33,1.074,35,1.34,40,0.552,45,1.133,46,0.011,47,0.951,48,0.387,49,0.951,58,0.86,59,1.304,69,1.416,72,0.22,74,0.185,75,0.505,83,0.115,84,0.058,87,0.935,92,1.766,93,1.496,96,1.377,98,1.017,103,1.377,104,1.339,106,0.835,116,0.008,117,0.008,126,1.584,127,1.416,147,1.199,173,0.935,225,1.416,275,1.499,459,1.636,460,1.543,511,2.751,681,2.419,685,1.685,695,1.848,726,3.098,737,3.682,772,2.793,848,2.552,927,3.802,971,3.098,1068,2.109,1070,2.666,1071,2.666,1078,3.288,1093,5.607,1122,4.857,1123,6.283,1124,4.185]],["title/injectables/GenerateTokentProvider.html",[74,0.125,361,2.612]],["body/injectables/GenerateTokentProvider.html",[3,0.096,4,0.086,5,0.086,21,3.187,23,2.069,25,6.1,29,0.246,30,1.034,31,1.528,33,1.256,35,1.189,36,3.187,37,6.038,38,5.121,39,5.542,40,0.564,45,1.253,46,0.011,47,0.972,48,0.427,49,0.972,58,1.005,59,1.442,72,0.223,73,2.341,74,0.164,75,0.423,76,2.597,77,2.756,82,2.235,83,0.096,84,0.049,87,1.094,88,3.187,89,2.032,98,1.37,106,0.977,116,0.007,117,0.007,119,2.597,124,2.235,125,3.187,126,1.706,145,2.756,173,0.784,275,1.615,361,3.433,375,3.187,465,5.125,790,4.112,794,3.508,1097,2.947,1125,6.1,1126,3.187,1127,5.574,1128,5.574,1129,3.995,1130,5.574,1131,3.995,1132,5.574,1133,6.947,1134,3.995,1135,3.508,1136,3.508,1137,3.995,1138,3.508,1139,3.508,1140,3.508,1141,3.508,1142,3.508,1143,5.574,1144,3.995,1145,3.995,1146,3.995,1147,4.894,1148,3.995,1149,3.995]],["title/classes/GetUsersParamDto.html",[84,0.052,1150,3.383]],["body/classes/GetUsersParamDto.html",[3,0.123,4,0.109,5,0.109,9,1.652,17,4.481,23,2.097,29,0.314,40,0.449,46,0.011,48,0.472,49,1.161,71,4.481,72,0.214,83,0.123,84,0.089,116,0.008,117,0.008,123,1.795,126,1.729,127,1.888,132,1.517,333,2.111,651,2.043,657,4.722,670,2.111,703,2.99,755,3.317,778,4.27,941,4.071,955,5.241,958,4.532,1150,5.241,1151,5.768,1152,4.481,1153,6.379,1154,5.103,1155,5.103,1156,4.846,1157,5.103,1158,4.481,1159,5.103,1160,4.481,1161,4.481,1162,5.103,1163,5.103]],["title/injectables/HashingProvider.html",[74,0.125,274,2.271]],["body/injectables/HashingProvider.html",[3,0.128,4,0.114,5,0.114,29,0.327,30,1.251,40,0.593,45,1.216,46,0.011,47,1.021,48,0.415,49,1.021,58,1.216,59,1.616,68,2.395,72,0.157,74,0.199,75,0.563,83,0.128,84,0.065,116,0.008,117,0.008,173,1.043,259,3.464,274,3.61,276,5.919,277,5.919,278,5.919,279,5.907,282,5.919,283,6.501,1164,4.666,1165,8.342,1166,5.313,1167,5.313]],["title/classes/HttpExceptionFilter.html",[84,0.052,1168,3.383]],["body/classes/HttpExceptionFilter.html",[3,0.118,4,0.105,5,0.105,15,4.149,29,0.3,30,1.184,40,0.429,45,0.88,46,0.011,47,0.739,48,0.3,49,0.739,56,3.368,58,0.88,64,3.894,68,1.372,72,0.188,75,0.517,79,5.247,83,0.118,84,0.06,85,4.709,89,2.853,93,1.163,103,2.055,104,1.794,116,0.008,117,0.008,253,5.674,348,5.092,450,4.287,651,1.954,1002,3.602,1168,5.092,1169,5.605,1170,6.245,1171,4.287,1172,7.112,1173,6.383,1174,7.543,1175,7.543,1176,4.882,1177,4.882,1178,4.882,1179,4.882,1180,4.882,1181,4.882,1182,7.543,1183,4.882,1184,4.882,1185,4.882,1186,4.882,1187,4.882,1188,4.882,1189,4.882,1190,4.882,1191,4.882]],["title/entities/Order.html",[128,1.814,745,1.814]],["body/entities/Order.html",[3,0.093,4,0.082,5,0.082,23,2.181,29,0.237,40,0.702,46,0.011,48,0.503,68,1.526,69,1.144,72,0.201,83,0.093,84,0.047,116,0.007,117,0.007,123,1.484,126,1.541,127,1.419,128,2.323,130,2.256,132,2.372,133,3.345,134,3.53,135,3.53,136,3.345,138,3.875,140,3.875,142,2.656,145,2.656,146,3.747,147,0.969,181,3.182,345,3.824,496,4.642,499,5.16,500,4.341,502,4.642,512,2.84,515,4.642,518,4.007,745,2.691,762,4.184,763,2.656,791,4.642,792,4.09,797,4.642,896,5.75,903,3.38,904,3.38,1192,3.38,1193,6.293,1194,5.525,1195,3.85,1196,3.85,1197,3.85,1198,5.431,1199,3.85,1200,3.85,1201,6.835,1202,3.85,1203,5.431,1204,5.431,1205,4.769,1206,5.431,1207,4.769,1208,3.85,1209,3.85,1210,5.431,1211,3.85,1212,3.85]],["title/entities/OrderItem.html",[128,1.814,762,2.373]],["body/entities/OrderItem.html",[3,0.106,4,0.094,5,0.094,9,2.187,29,0.271,40,0.685,46,0.011,48,0.491,68,1.675,69,1.309,72,0.199,83,0.106,84,0.054,107,2.24,116,0.007,117,0.007,123,1.629,126,1.632,127,1.523,128,2.549,130,2.581,132,2.248,133,3.671,134,3.875,135,4.706,136,3.671,138,4.161,140,4.161,142,4.112,146,4.661,147,1.108,181,3.493,511,2.816,517,3.039,745,3.515,762,3.335,792,2.863,909,5.933,919,3.039,962,3.514,1213,6.22,1214,3.868,1215,4.405,1216,4.405,1217,5.961,1218,4.405,1219,5.961,1220,4.405,1221,4.755,1222,4.405,1223,3.25,1224,4.405]],["title/controllers/OrdersController.html",[148,1.754,1225,3.129]],["body/controllers/OrdersController.html",[3,0.112,4,0.099,5,0.099,29,0.286,30,1.146,31,1.598,33,1.047,35,0.99,40,0.543,45,1.114,46,0.011,47,0.935,48,0.38,49,0.935,58,1.114,59,1.535,72,0.227,75,0.492,83,0.112,84,0.057,87,0.911,98,1.317,106,1.082,116,0.007,117,0.007,132,1.835,148,1.92,150,1.859,152,2.859,275,1.689,315,3.203,318,3.203,322,2.472,539,5.9,576,2.641,577,2.529,740,4.807,742,4.926,745,2.967,773,3.425,789,4.639,914,4.926,916,3.704,919,3.203,1225,4.556,1226,4.077,1227,6.175,1228,4.643,1229,4.643,1230,4.643,1231,4.51,1232,4.077,1233,4.643,1234,4.643,1235,4.643,1236,4.643,1237,4.643]],["title/modules/OrdersModule.html",[155,1.645,202,2.926]],["body/modules/OrdersModule.html",[3,0.107,4,0.095,5,0.095,23,1.637,46,0.011,72,0.249,75,0.47,83,0.107,84,0.054,116,0.007,117,0.007,145,3.061,150,2.398,155,2.63,157,2.192,158,2.192,159,2.376,160,2.376,161,2.192,162,3.632,163,2.376,167,3.208,168,2.376,169,2.28,202,5.904,208,2.884,224,3.061,225,1.319,511,1.997,517,3.061,577,1.617,623,3.51,627,3.689,628,2.733,629,2.733,727,5.079,745,3.105,762,3.351,763,3.061,913,5.079,919,3.061,1073,5.391,1225,5.004,1231,5.079,1232,3.896,1238,3.896,1239,3.896,1240,5.391,1241,4.437,1242,4.437,1243,5.26,1244,4.437]],["title/injectables/OrdersService.html",[74,0.125,1231,2.757]],["body/injectables/OrdersService.html",[3,0.108,4,0.096,5,0.096,29,0.277,30,1.123,31,1.584,33,1.364,35,1.291,40,0.601,45,1.232,46,0.011,47,1.035,48,0.421,49,1.035,58,1.091,59,1.516,72,0.231,74,0.178,75,0.477,83,0.108,84,0.055,87,1.188,98,1.291,106,1.061,116,0.007,117,0.007,173,0.884,275,1.674,322,2.422,576,2.588,577,2.205,623,3.546,727,5.212,740,4.749,742,3.593,745,2.922,789,4.466,913,5.101,914,4.827,916,4.827,919,3.107,1231,3.933,1243,5.313,1245,3.955,1246,6.051,1247,4.504,1248,4.504,1249,6.051,1250,4.504,1251,4.504,1252,4.504,1253,4.504]],["title/interfaces/Paginated.html",[118,2.271,1254,3.129]],["body/interfaces/Paginated.html",[3,0.133,4,0.119,5,0.119,24,4.633,29,0.341,46,0.011,48,0.518,68,2.287,83,0.133,116,0.008,117,0.008,118,2.968,120,3.823,123,1.892,126,1.782,445,6.943,465,5.569,989,4.421,992,4.421,1036,4.421,1254,5.107,1255,4.867,1256,6.943,1257,6.943,1258,4.867,1259,4.867,1260,4.867,1261,4.867,1262,4.867,1263,4.867]],["title/modules/PaginationModule.html",[155,1.645,203,2.926]],["body/modules/PaginationModule.html",[3,0.141,4,0.126,5,0.126,46,0.01,72,0.211,75,0.622,83,0.141,84,0.072,116,0.009,117,0.009,155,3.003,157,2.898,158,2.898,159,3.142,160,3.142,161,2.898,162,4.147,163,3.142,167,3.84,168,3.142,169,3.015,203,5.806,1264,5.152,1265,5.152,1266,5.806,1267,5.867,1268,5.867]],["title/injectables/PaginationProvider.html",[74,0.125,1266,2.926]],["body/injectables/PaginationProvider.html",[3,0.055,4,0.049,5,0.049,9,0.74,15,3.409,18,3.383,24,4.145,29,0.141,30,1.065,31,0.925,33,0.515,35,0.782,40,0.322,45,1.206,46,0.011,47,0.555,48,0.282,49,0.555,58,1.105,59,0.76,64,4.183,67,4.932,72,0.18,73,1.34,74,0.108,75,0.242,79,1.687,83,0.055,84,0.028,86,2.257,87,0.449,89,2.344,93,0.873,95,2.528,98,0.488,106,0.642,116,0.004,117,0.004,126,1.778,147,0.575,173,0.449,230,1.687,275,0.978,322,1.467,387,4.578,389,3.218,391,2.923,394,3.218,435,0.946,453,4.885,461,2.008,462,5.963,465,1.687,475,2.528,491,4.666,658,2.923,681,2.533,802,5.87,864,3.218,945,3.869,989,4.578,992,4.578,1036,5.333,1254,5.717,1256,4.605,1257,2.008,1258,2.008,1259,3.218,1260,2.008,1261,3.218,1262,6.345,1263,5.87,1266,2.528,1269,2.008,1270,3.664,1271,2.287,1272,2.287,1273,3.664,1274,3.869,1275,2.287,1276,3.664,1277,6.432,1278,6.432,1279,5.643,1280,6.124,1281,4.605,1282,5.244,1283,7.303,1284,6.804,1285,6.124,1286,5.739,1287,6.432,1288,3.664,1289,3.218,1290,3.218,1291,3.664,1292,6.895,1293,4.585,1294,4.585,1295,4.585,1296,2.287,1297,2.287,1298,2.287,1299,2.287,1300,2.287,1301,2.287,1302,2.287,1303,2.287,1304,6.432,1305,3.664,1306,2.287,1307,2.287,1308,2.287,1309,2.287,1310,2.287,1311,2.287,1312,2.287,1313,2.287]],["title/classes/PaginationQueryDto.html",[84,0.052,1274,3.129]],["body/classes/PaginationQueryDto.html",[3,0.132,4,0.118,5,0.118,29,0.338,40,0.605,46,0.011,48,0.424,49,1.193,72,0.162,83,0.132,84,0.084,116,0.008,117,0.008,123,1.881,126,1.777,132,2.046,181,4.033,651,2.199,670,2.271,755,4.474,945,5.078,958,5.186,1205,6.043,1274,5.078,1283,6.601,1284,6.601,1314,6.601,1315,4.822,1316,6.883,1317,5.492,1318,5.492,1319,7.517]],["title/classes/PatchUserDto.html",[84,0.052,1320,2.757]],["body/classes/PatchUserDto.html",[3,0.124,4,0.11,5,0.11,9,1.662,23,2.224,29,0.316,40,0.451,46,0.011,48,0.316,72,0.227,83,0.124,84,0.081,116,0.008,117,0.008,123,1.802,126,1.486,127,1.89,132,1.525,273,4.286,333,2.123,388,3.786,435,2.123,509,4.548,651,2.055,654,3.161,657,4.735,668,3.135,670,2.123,671,3.388,827,3.54,828,4.094,861,3.007,863,3.336,945,3.786,981,4.094,1002,4.864,1156,4.864,1158,4.506,1161,4.506,1320,4.286,1321,5.789,1322,6.593,1323,4.864,1324,5.132,1325,5.132,1326,5.789,1327,5.132]],["title/entities/Product.html",[128,1.814,511,1.414]],["body/entities/Product.html",[3,0.079,4,0.07,5,0.07,9,1.864,29,0.202,40,0.704,46,0.011,47,0.872,48,0.513,68,1.992,72,0.2,83,0.079,84,0.059,107,1.822,116,0.006,117,0.006,123,1.325,126,1.598,127,1.298,128,2.073,130,1.927,132,2.382,133,4.172,134,3.15,135,5.076,136,4.809,138,3.545,140,4.365,142,2.268,146,3.344,147,0.827,414,2.887,493,2.464,495,4.592,496,4.247,499,4.889,500,3.971,502,3.576,506,3.867,507,3.344,508,3.576,511,1.615,512,3.576,515,4.247,518,4.247,533,2.627,698,3.344,703,1.927,762,4.1,763,2.268,792,3.742,849,2.268,933,5.055,934,5.055,935,5.055,1101,4.256,1194,5.055,1213,2.623,1221,3.867,1328,2.887,1329,4.592,1330,4.847,1331,3.288,1332,3.288,1333,3.288,1334,3.288,1335,3.288,1336,3.288,1337,4.256,1338,3.288,1339,3.288,1340,4.847,1341,3.288,1342,4.847,1343,3.288,1344,4.607,1345,4.847,1346,3.288,1347,3.288,1348,3.288,1349,4.256,1350,2.623,1351,3.288,1352,3.288]],["title/controllers/ProductsController.html",[148,1.754,1353,3.129]],["body/controllers/ProductsController.html",[3,0.054,4,0.048,5,0.048,9,2.612,29,0.137,30,0.666,31,1.618,40,0.559,45,1.148,46,0.011,47,0.964,48,0.392,49,0.964,58,1.148,59,1.562,72,0.201,75,0.236,83,0.054,84,0.027,86,1.372,87,0.437,93,0.854,106,1.116,116,0.004,117,0.004,126,1.647,127,1.617,132,1.891,148,1.484,150,0.892,152,1.372,193,1.643,275,1.711,291,1.372,303,4.12,315,1.537,318,1.537,322,1.804,323,1.372,325,1.537,329,1.643,330,4.884,332,5.391,333,0.921,337,1.643,341,2.647,342,4.695,345,4.012,347,5.042,412,1.537,435,2.136,481,2.862,491,1.372,497,3.823,511,2.781,530,1.956,532,4.12,533,2.003,534,3.357,539,3.594,540,1.777,541,2.862,548,4.12,549,4.12,550,4.518,551,5.597,553,5.281,554,2.413,557,2.647,558,2.862,565,1.777,566,2.862,567,2.332,568,2.862,573,2.647,574,2.21,576,1.534,577,1.308,579,4.518,580,1.777,583,1.777,585,1.448,591,1.777,605,1.777,830,3.357,833,2.889,844,2.647,848,1.193,1078,2.475,1097,1.643,1353,2.647,1354,1.956,1355,3.15,1356,3.15,1357,3.15,1358,3.15,1359,3.15,1360,3.15,1361,3.15,1362,2.227,1363,2.227,1364,2.227,1365,2.227,1366,3.588,1367,1.956,1368,2.227,1369,2.227,1370,1.956,1371,3.15,1372,1.956,1373,2.227,1374,1.956,1375,2.227,1376,3.588,1377,4.535,1378,2.227,1379,1.956,1380,2.227,1381,2.227,1382,1.956,1383,2.227,1384,1.956,1385,3.934,1386,1.956,1387,2.227,1388,2.332,1389,1.956,1390,2.227,1391,1.956,1392,2.227,1393,2.227,1394,2.227,1395,2.227,1396,2.227,1397,2.227,1398,2.227,1399,2.227,1400,2.227,1401,2.227,1402,2.227,1403,2.227,1404,2.227,1405,2.227,1406,1.956,1407,2.227,1408,2.227,1409,2.227,1410,2.227]],["title/modules/ProductsModule.html",[155,1.645,204,2.757]],["body/modules/ProductsModule.html",[3,0.096,4,0.086,5,0.086,46,0.011,72,0.249,75,0.424,83,0.096,84,0.049,116,0.007,117,0.007,150,2.235,155,2.492,157,1.977,158,1.977,159,2.144,160,2.144,161,1.977,162,3.442,163,2.144,167,2.99,168,2.144,169,2.057,201,3.629,204,5.625,208,2.602,224,2.762,225,1.19,365,3.629,493,2.165,511,2.437,577,1.459,623,3.271,626,3.629,627,4.282,628,2.466,629,2.466,630,2.602,835,4.923,848,2.144,849,2.762,968,4.923,1075,4.923,1092,4.923,1122,4.923,1353,4.742,1388,4.923,1389,3.515,1411,3.515,1412,3.515,1413,4.923,1414,4.923,1415,4.003,1416,4.003,1417,4.902,1418,3.515,1419,4.003,1420,4.003]],["title/injectables/ProductsService.html",[74,0.125,1388,2.757]],["body/injectables/ProductsService.html",[3,0.068,4,0.061,5,0.061,29,0.175,30,0.806,31,1.681,33,1.574,35,0.927,40,0.633,45,1.298,46,0.011,47,1.09,48,0.443,49,1.09,58,1.259,59,1.649,72,0.229,74,0.128,75,0.301,83,0.068,84,0.035,87,1.37,98,1.489,106,1.224,116,0.005,117,0.005,126,1.751,127,1.189,173,0.558,275,1.777,322,2.111,497,1.59,511,2.327,533,1.102,576,1.858,577,1.583,585,1.847,623,2.546,626,2.824,627,3.637,628,1.75,629,1.75,630,1.847,830,3.839,833,3.304,835,4.537,844,2.097,848,1.522,968,4.361,1075,4.537,1092,4.537,1097,2.097,1122,4.537,1355,4.631,1356,3.815,1357,3.815,1358,3.815,1359,3.815,1360,3.815,1361,3.815,1367,3.815,1370,3.815,1374,3.815,1379,3.815,1382,3.815,1384,3.815,1385,4.136,1388,2.824,1413,4.537,1414,4.537,1417,3.815,1418,2.495,1421,2.495,1422,2.842,1423,2.842,1424,4.344,1425,2.842,1426,2.842,1427,2.842,1428,2.842,1429,2.842,1430,2.842,1431,2.842,1432,2.842,1433,2.842,1434,2.842,1435,2.842,1436,2.842,1437,2.842,1438,2.842]],["title/injectables/ReactivateCategoryByIdProvider.html",[74,0.125,619,2.757]],["body/injectables/ReactivateCategoryByIdProvider.html",[3,0.112,4,0.099,5,0.099,29,0.286,30,1.146,31,1.4,33,1.047,35,1.317,40,0.543,45,1.114,46,0.011,47,0.935,48,0.38,49,0.935,58,0.837,59,1.281,69,1.38,72,0.218,74,0.182,75,0.492,83,0.112,84,0.057,87,0.911,92,1.735,93,1.471,96,1.342,98,1.317,103,1.342,104,1.305,106,0.814,107,1.745,116,0.007,117,0.007,126,1.392,127,1.392,147,1.168,173,0.911,225,1.38,275,1.48,459,1.594,460,1.503,493,2.395,533,3.07,554,1.692,584,2.486,619,4.807,681,2.394,685,1.642,686,2.597,690,2.721,695,1.8,839,3.619,1068,2.055,1069,3.203,1070,2.597,1071,2.597,1112,4.077,1223,3.425,1439,6.093,1440,4.643,1441,4.643,1442,4.643,1443,3.704,1444,6.175,1445,4.643]],["title/injectables/ReactivateProductByIdProvider.html",[74,0.125,1413,2.757]],["body/injectables/ReactivateProductByIdProvider.html",[3,0.112,4,0.099,5,0.099,29,0.286,30,1.146,31,1.4,33,1.047,35,1.317,40,0.543,45,1.114,46,0.011,47,0.935,48,0.38,49,0.935,58,0.837,59,1.281,69,1.38,72,0.218,74,0.182,75,0.492,83,0.112,84,0.057,87,0.911,92,1.735,93,1.471,96,1.342,98,1.317,103,1.342,104,1.305,106,0.814,107,1.745,116,0.007,117,0.007,126,1.564,127,1.392,147,1.168,173,0.911,225,1.38,275,1.48,459,1.594,460,1.503,511,2.735,554,1.692,681,2.394,685,1.642,695,1.8,737,3.619,772,2.721,848,2.486,971,3.018,979,4.077,1068,2.055,1070,2.597,1071,2.597,1124,4.077,1223,3.425,1413,4.807,1443,3.704,1446,6.093,1447,6.175,1448,4.643,1449,6.175,1450,4.643]],["title/injectables/ReactivateUserByIdProvider.html",[74,0.125,1451,2.757]],["body/injectables/ReactivateUserByIdProvider.html",[3,0.112,4,0.099,5,0.099,23,2.242,29,0.285,30,1.144,31,1.399,33,1.044,35,1.315,40,0.542,45,1.112,46,0.011,47,0.933,48,0.379,49,0.933,58,0.835,59,1.279,69,1.376,72,0.218,74,0.182,75,0.491,83,0.112,84,0.057,87,0.909,92,1.732,93,1.468,96,1.338,98,1.315,103,1.338,104,1.301,106,0.812,107,1.741,116,0.007,117,0.007,126,1.562,127,1.39,147,1.165,173,0.909,225,1.376,275,1.478,459,1.59,460,1.499,554,1.688,681,2.392,685,1.638,695,1.796,771,2.591,879,2.379,1018,2.852,1020,3.796,1068,2.05,1070,2.591,1071,2.591,1085,3.01,1086,3.195,1223,3.417,1443,3.694,1451,4.802,1452,6.085,1453,6.165,1454,4.631,1455,6.165,1456,4.631]],["title/classes/RefreshTokenDto.html",[84,0.052,295,2.757]],["body/classes/RefreshTokenDto.html",[3,0.146,4,0.13,5,0.13,29,0.373,40,0.533,46,0.01,48,0.373,68,2.056,72,0.179,83,0.146,84,0.09,116,0.009,117,0.009,123,2,132,1.802,295,4.755,651,2.428,668,3.479,669,4.505,670,2.508,894,5.325,1147,6.898,1457,6.424,1458,5.325,1459,6.064]],["title/injectables/RefreshTokensProvider.html",[74,0.125,362,2.757]],["body/injectables/RefreshTokensProvider.html",[3,0.101,4,0.09,5,0.09,21,3.35,23,1.577,28,2.897,29,0.258,30,1.071,31,1.33,33,1.6,35,1.231,36,3.35,37,6.132,38,5.259,39,5.662,40,0.507,45,1.041,46,0.011,47,0.874,48,0.355,49,0.874,58,0.757,72,0.236,73,2.461,74,0.17,75,0.445,76,2.73,77,2.897,82,2.349,83,0.101,84,0.051,87,1.393,88,3.35,89,2.103,92,1.18,93,1,96,1.214,98,1.406,103,1.214,104,1.18,106,0.736,116,0.007,117,0.007,119,2.73,125,3.35,173,0.824,275,1.406,292,4.603,294,4.603,295,4.836,305,3.098,327,3.35,328,3.35,361,4.371,362,3.75,365,2.73,370,3.098,375,3.35,382,3.687,1126,3.35,1135,3.687,1136,3.687,1138,3.687,1139,3.687,1140,3.687,1141,3.687,1142,3.687,1460,5.788,1461,5.788,1462,4.699,1463,4.199,1464,4.199,1465,3.687,1466,3.687,1467,3.687,1468,4.199,1469,4.199,1470,3.687]],["title/entities/Review.html",[128,1.814,1344,2.757]],["body/entities/Review.html",[3,0.108,4,0.096,5,0.096,23,2.257,29,0.277,40,0.69,46,0.011,48,0.502,68,1.7,72,0.201,83,0.108,84,0.055,116,0.007,117,0.007,123,1.654,126,1.647,127,1.54,128,2.588,130,2.639,132,2.333,133,3.726,134,3.933,138,4.208,140,4.208,142,4.174,145,3.107,146,4.714,147,1.133,181,3.546,499,4.174,500,4.714,511,2.752,517,3.107,775,4.464,1221,4.827,1344,3.933,1471,3.955,1472,6.833,1473,6.833,1474,6.833,1475,4.504,1476,4.504,1477,4.504,1478,6.051,1479,4.504,1480,4.504,1481,6.051,1482,4.504]],["title/controllers/ReviewsController.html",[148,1.754,1483,3.129]],["body/controllers/ReviewsController.html",[3,0.156,4,0.139,5,0.139,46,0.01,72,0.191,75,0.687,83,0.156,84,0.079,116,0.009,117,0.009,148,2.68,150,2.594,152,3.99,1329,5.168,1483,5.614,1484,5.689,1485,6.479]],["title/modules/ReviewsModule.html",[155,1.645,205,2.926]],["body/modules/ReviewsModule.html",[3,0.137,4,0.122,5,0.122,46,0.011,72,0.225,75,0.604,83,0.137,84,0.07,116,0.009,117,0.009,150,2.82,155,2.965,157,2.815,158,2.815,159,3.053,160,3.053,161,2.815,162,4.094,163,3.053,167,3.772,168,3.053,169,2.929,205,5.766,1483,5.64,1486,5.005,1487,5.005,1488,5.766,1489,5.7,1490,5.7,1491,5.7]],["title/injectables/ReviewsService.html",[74,0.125,1488,2.926]],["body/injectables/ReviewsService.html",[3,0.157,4,0.14,5,0.14,46,0.01,72,0.192,74,0.225,75,0.692,83,0.157,84,0.08,116,0.009,117,0.009,173,1.281,1488,5.272,1492,5.73]],["title/classes/SignInDto.html",[84,0.052,307,2.757]],["body/classes/SignInDto.html",[3,0.092,4,0.082,5,0.082,9,2.025,12,5.973,23,1.473,24,3.986,26,4.3,29,0.234,40,0.474,46,0.011,48,0.332,67,3.977,68,2.237,72,0.159,83,0.092,84,0.083,104,1.912,116,0.007,117,0.007,123,1.473,124,4.736,129,4.422,132,1.602,259,4.235,307,3.504,309,5.973,322,2.158,333,1.575,651,1.525,654,3.32,657,4.845,658,4.3,668,2.975,669,3.32,670,1.575,671,3.215,823,2.232,899,3.344,984,6.545,1002,5.874,1010,4.733,1012,4.733,1326,7.087,1493,5.493,1494,5.39,1495,5.39,1496,5.39,1497,5.39,1498,5.39,1499,7.179,1500,3.809,1501,3.809,1502,3.809,1503,3.809,1504,3.809,1505,3.809,1506,4.3,1507,5.973,1508,5.39,1509,6.802,1510,3.809]],["title/injectables/SignInProvider.html",[74,0.125,363,2.757]],["body/injectables/SignInProvider.html",[3,0.094,4,0.084,5,0.084,9,1.265,23,1.068,28,2.696,29,0.24,30,1.018,31,1.517,33,1.43,35,1.171,40,0.558,45,1.144,46,0.011,47,0.961,48,0.39,49,0.961,58,0.99,59,1.428,68,2.112,72,0.214,73,2.29,74,0.162,75,0.414,83,0.094,84,0.048,87,1.245,89,2.001,92,1.934,93,1.639,96,1.586,98,1.468,103,1.129,104,1.098,106,0.962,116,0.007,117,0.007,173,0.767,259,2.82,274,4.134,275,1.603,279,5.489,286,3.431,293,4.379,306,4.379,307,4.711,321,3.118,322,1.565,361,4.237,363,3.568,365,2.54,370,2.883,431,2.54,460,1.265,554,1.424,695,2.128,886,3.431,1085,2.54,1118,3.431,1461,5.571,1462,4.523,1465,3.431,1466,3.431,1467,3.431,1470,3.431,1511,6.041,1512,3.431,1513,5.489,1514,3.908,1515,3.908,1516,3.908,1517,5.489,1518,3.908,1519,3.908,1520,3.908,1521,3.908,1522,3.908,1523,3.908,1524,3.908,1525,3.908,1526,3.908,1527,3.908]],["title/injectables/UpdateCategoryByIdProvider.html",[74,0.125,620,2.757]],["body/injectables/UpdateCategoryByIdProvider.html",[3,0.112,4,0.1,5,0.1,29,0.286,30,1.148,31,1.402,33,1.049,35,1.32,40,0.544,45,1.116,46,0.011,47,0.937,48,0.381,49,0.937,58,0.84,59,1.284,69,1.383,72,0.227,74,0.182,75,0.493,83,0.112,84,0.057,87,0.914,92,1.738,93,1.473,96,1.345,98,1.32,103,1.345,104,1.308,106,0.816,116,0.007,117,0.007,127,1.049,147,1.171,173,0.914,225,1.383,275,1.482,459,1.598,460,1.507,493,2.399,533,2.694,554,1.697,571,5.15,578,2.867,584,2.493,585,3.026,620,4.812,681,2.397,685,1.646,686,2.604,690,2.728,695,1.805,719,5.432,839,3.625,1068,2.06,1069,3.211,1528,6.1,1529,4.087,1530,6.186,1531,4.087,1532,4.655,1533,4.655,1534,4.655,1535,4.655]],["title/classes/UpdateCategoryDto.html",[84,0.052,571,2.757]],["body/classes/UpdateCategoryDto.html",[3,0.13,4,0.116,5,0.116,9,1.751,29,0.333,40,0.475,46,0.011,48,0.459,72,0.22,83,0.13,84,0.083,116,0.008,117,0.008,123,1.863,126,1.767,127,1.683,132,1.608,136,3.331,273,4.431,333,2.237,435,2.237,509,4.703,529,3.17,533,2.644,571,4.431,573,5.03,578,3.331,651,2.166,653,3.991,654,3.331,668,3.242,670,2.237,671,3.503,697,4.199,827,3.732,958,3.732,1156,5.03,1323,5.03,1536,5.986,1537,6.817,1538,5.409,1539,5.409]],["title/injectables/UpdateOrderByIdProvider.html",[74,0.125,1240,2.926]],["body/injectables/UpdateOrderByIdProvider.html",[3,0.156,4,0.139,5,0.139,46,0.01,72,0.191,74,0.224,75,0.687,83,0.156,84,0.079,116,0.009,117,0.009,173,1.272,745,2.771,1068,2.867,1240,5.249,1540,5.689]],["title/injectables/UpdateProductByIdProvider.html",[74,0.125,1414,2.757]],["body/injectables/UpdateProductByIdProvider.html",[3,0.112,4,0.099,5,0.099,29,0.285,30,1.144,31,1.399,33,1.044,35,1.315,40,0.542,45,1.112,46,0.011,47,0.933,48,0.379,49,0.933,58,0.835,59,1.279,69,1.376,72,0.227,74,0.182,75,0.491,83,0.112,84,0.057,87,0.909,92,1.732,93,1.468,96,1.338,98,1.315,103,1.338,104,1.301,106,0.812,116,0.007,117,0.007,127,1.044,147,1.165,173,0.909,225,1.376,275,1.478,322,1.854,459,1.59,460,1.499,511,2.691,585,3.01,681,2.392,685,1.638,695,1.796,726,3.01,737,3.612,772,2.714,848,2.48,971,3.01,1068,2.05,1078,3.195,1385,5.142,1414,4.802,1529,4.066,1531,4.066,1541,6.085,1542,6.165,1543,6.93,1544,4.631,1545,4.631,1546,4.631]],["title/classes/UpdateProductDto.html",[84,0.052,1385,2.757]],["body/classes/UpdateProductDto.html",[3,0.131,4,0.117,5,0.117,9,1.762,29,0.335,40,0.478,46,0.011,48,0.461,72,0.221,83,0.131,84,0.084,116,0.008,117,0.008,123,1.87,126,1.688,127,1.688,132,1.617,273,4.448,322,2.179,333,2.251,435,2.251,509,4.721,511,2.698,574,4.215,651,2.179,654,3.351,668,3.254,670,2.251,671,3.516,823,3.189,827,3.754,832,6.009,833,3.044,910,4.778,1156,5.049,1323,5.049,1385,4.448,1547,6.009,1548,5.442]],["title/injectables/UpdateUserByIdProvider.html",[74,0.125,1549,2.757]],["body/injectables/UpdateUserByIdProvider.html",[3,0.105,4,0.094,5,0.094,23,1.973,29,0.269,30,1.101,31,1.359,33,1.337,35,1.265,40,0.521,45,1.07,46,0.011,47,0.898,48,0.365,49,0.898,58,0.789,59,1.231,68,1.229,69,1.3,72,0.229,74,0.175,75,0.463,83,0.105,84,0.054,87,1.164,89,2.162,92,1.667,93,1.413,96,1.264,98,1.436,103,1.264,104,1.229,106,0.766,116,0.007,117,0.007,127,0.986,147,1.1,173,0.858,225,1.3,259,2.247,274,4.262,275,1.436,459,1.501,460,1.416,554,1.594,681,2.337,685,1.546,695,1.696,771,2.446,863,2.842,879,2.247,881,3.488,885,4.732,1018,2.693,1020,3.653,1068,1.935,1086,3.017,1320,5.057,1549,3.855,1550,5.91,1551,4.732,1552,4.373,1553,4.732,1554,4.373,1555,3.488,1556,4.373,1557,4.373,1558,6.731,1559,4.373,1560,4.373,1561,4.373]],["title/entities/User.html",[23,1.159,128,1.814]],["body/entities/User.html",[3,0.082,4,0.073,5,0.073,23,1.359,29,0.21,40,0.701,46,0.011,48,0.513,49,0.753,68,2.213,72,0.19,83,0.082,84,0.061,107,2.428,116,0.006,117,0.006,123,1.359,124,3.287,126,1.121,127,1.324,128,1.457,129,3.819,130,1.996,132,2.372,133,4.232,135,5.118,136,4.564,138,3.618,140,4.42,147,0.857,259,3.019,495,4.687,496,4.335,498,5.159,499,4.951,500,4.053,502,3.67,506,6.281,507,5.432,509,3.431,512,3.67,515,4.335,518,4.335,656,3.67,703,1.996,745,3.069,759,2.717,773,4.335,982,5.159,983,5.159,998,6.671,1329,5.482,1344,4.2,1349,5.159,1350,2.717,1562,2.991,1563,3.406,1564,3.406,1565,3.406,1566,3.406,1567,3.406,1568,3.406,1569,3.406,1570,3.406,1571,4.974,1572,3.406,1573,3.406,1574,3.406,1575,4.974,1576,3.406,1577,3.406,1578,3.406]],["title/controllers/UsersController.html",[148,1.754,1579,3.129]],["body/controllers/UsersController.html",[3,0.05,4,0.045,5,0.045,9,2.638,23,2.29,29,0.129,30,0.632,31,1.629,40,0.568,45,1.118,46,0.011,47,0.938,48,0.381,49,0.938,58,1.166,59,1.577,68,1.212,72,0.197,75,0.222,83,0.05,84,0.026,86,1.287,87,0.41,93,0.812,98,1.379,106,1.133,116,0.004,117,0.004,124,2.414,126,1.507,127,1.55,132,1.921,148,1.41,150,0.837,152,1.287,193,1.542,275,1.722,291,1.287,303,4.372,315,1.442,318,1.442,323,1.287,325,1.442,329,1.542,330,4.932,332,5.469,333,0.865,337,1.542,341,1.542,342,4.768,345,4.085,347,5.191,412,1.442,491,1.287,532,3.97,534,3.234,540,1.668,541,2.719,548,4.689,549,3.97,550,3.97,551,5.726,553,5.484,554,2.505,556,1.836,557,2.514,558,2.719,565,1.668,566,2.719,567,3.234,568,2.719,573,2.514,574,2.099,576,1.457,577,1.242,579,3.442,580,1.668,583,1.668,591,1.668,599,1.836,605,1.668,778,4.029,858,3.82,861,3.444,863,2.215,869,2.719,870,2.514,879,1.074,880,1.668,1021,1.668,1078,3.433,1082,2.719,1083,1.668,1320,3.82,1371,2.992,1372,1.836,1377,5.161,1386,1.836,1391,1.836,1406,1.836,1462,2.528,1551,2.719,1553,1.668,1555,1.668,1579,2.514,1580,1.836,1581,4.369,1582,2.992,1583,2.992,1584,3.408,1585,1.836,1586,4.314,1587,4.976,1588,3.408,1589,2.09,1590,2.09,1591,2.09,1592,2.09,1593,2.09,1594,2.09,1595,1.836,1596,2.09,1597,2.09,1598,2.09,1599,1.836,1600,2.09,1601,2.09,1602,2.09,1603,2.09,1604,2.09,1605,1.836,1606,2.09,1607,2.09,1608,2.09,1609,2.09,1610,2.09,1611,2.09,1612,2.09,1613,2.09,1614,2.09,1615,2.09,1616,2.09,1617,2.09,1618,2.09,1619,2.09,1620,2.09,1621,2.09,1622,2.09,1623,2.09]],["title/modules/UsersModule.html",[155,1.645,206,2.757]],["body/modules/UsersModule.html",[3,0.09,4,0.08,5,0.08,23,1.844,46,0.011,72,0.249,75,0.396,83,0.09,84,0.046,116,0.006,117,0.006,150,2.129,155,2.401,157,1.846,158,1.846,159,2.002,160,2.002,161,1.846,162,3.316,163,3.316,167,2.848,168,2.002,169,1.921,200,3.457,206,5.632,208,2.43,224,2.579,225,1.111,365,3.457,577,1.362,623,3.117,626,4.025,627,4.154,628,2.302,629,2.302,630,2.43,745,2.275,759,2.982,866,4.815,879,1.921,963,3.117,1017,4.815,1080,4.815,1105,4.815,1113,4.815,1119,4.815,1344,3.457,1350,2.982,1451,4.815,1462,4.813,1549,4.815,1579,4.568,1605,3.282,1624,3.282,1625,3.282,1626,3.282,1627,3.738,1628,3.738,1629,3.282,1630,5.437,1631,3.738,1632,3.738]],["title/injectables/UsersService.html",[74,0.125,1462,2.485]],["body/injectables/UsersService.html",[3,0.065,4,0.058,5,0.058,23,1.569,29,0.166,30,0.773,31,1.69,33,1.595,35,0.889,40,0.638,45,1.276,46,0.011,47,1.071,48,0.435,49,1.071,58,1.276,59,1.661,68,1.433,72,0.229,74,0.123,75,0.285,83,0.065,84,0.033,87,1.389,98,1.509,106,1.24,116,0.005,117,0.005,124,1.507,126,1.637,127,1.15,173,0.529,275,1.786,576,1.783,577,1.519,623,2.443,626,3.315,627,3.535,628,1.659,629,1.659,630,1.751,858,4.036,861,3.638,863,2.71,866,4.451,869,3.326,870,3.075,879,1.384,880,2.149,963,2.443,1017,4.451,1021,3.326,1080,4.451,1082,3.326,1083,3.326,1105,4.451,1113,4.268,1119,4.451,1320,4.036,1451,4.451,1462,2.443,1549,4.451,1551,3.326,1553,3.326,1555,2.149,1581,5.041,1582,3.66,1583,3.66,1585,3.66,1595,3.66,1599,3.66,1629,2.365,1630,4.478,1633,2.365,1634,4.169,1635,2.693,1636,2.693,1637,2.693,1638,2.693,1639,2.693,1640,2.693,1641,2.693,1642,2.693,1643,4.169,1644,2.693,1645,2.693,1646,2.693,1647,2.693,1648,2.693,1649,2.693,1650,2.693,1651,2.693,1652,2.693,1653,2.693]],["title/coverage.html",[1654,4.634]],["body/coverage.html",[0,2.29,1,1.397,5,0.043,6,1.778,7,1.494,8,1.778,23,1.473,46,0.011,48,0.125,74,0.25,80,1.615,84,0.093,93,0.482,116,0.004,117,0.004,118,2.614,119,1.316,121,1.778,122,1.778,128,2.615,129,1.316,131,1.778,148,2.64,149,1.494,151,1.778,161,1,166,1.397,174,1.778,175,1.494,176,1.778,189,1.494,190,1.778,191,1.316,207,1.615,220,1.494,231,1.494,235,1.494,239,1.615,268,1.778,271,1.494,272,1.778,274,1.084,289,1.494,290,1.778,291,1.247,295,1.316,307,1.316,319,1.316,361,1.247,362,1.316,363,1.316,376,1.778,384,1.778,411,1.615,433,1.615,434,1.778,435,0.837,436,1.778,448,1.316,453,2.649,493,0.785,494,1.778,497,1.133,511,2.038,519,1.494,520,1.778,529,1.186,533,1.893,538,1.316,571,1.316,577,2.326,581,1.316,614,1.316,615,1.316,616,1.316,617,1.316,618,1.316,619,1.316,620,1.316,633,1.778,652,2.649,653,3.113,678,2.649,679,1.778,706,2.649,727,1.316,728,2.649,729,2.649,740,1.316,744,1.316,745,2.476,758,4.287,762,1.133,775,6.518,778,1.316,789,1.186,822,3.113,823,3.583,830,1.316,831,2.649,833,1.133,835,1.316,836,2.649,837,1.778,858,1.316,859,2.649,860,1.778,861,1.186,866,1.316,867,2.649,868,3.113,913,1.316,963,1.945,968,1.316,969,2.649,981,2.649,1017,1.316,1030,1.778,1031,1.778,1057,2.649,1059,1.615,1067,1.778,1068,3.254,1073,1.397,1074,1.778,1075,1.316,1076,1.778,1080,1.316,1081,1.778,1087,2.649,1092,1.316,1093,2.649,1105,1.316,1106,3.113,1113,1.316,1114,1.778,1119,1.316,1122,1.316,1125,1.778,1126,2.649,1150,1.615,1151,1.778,1152,1.778,1164,1.778,1168,1.615,1169,1.778,1170,1.778,1171,1.778,1192,1.778,1213,1.615,1214,1.778,1225,1.494,1226,1.778,1231,1.316,1240,1.397,1245,1.778,1254,1.494,1255,1.778,1266,1.397,1269,1.778,1274,1.494,1314,1.778,1315,1.778,1320,1.316,1321,1.778,1323,1.494,1328,1.778,1344,1.316,1353,1.494,1354,1.778,1385,1.316,1388,1.316,1413,1.316,1414,1.316,1421,1.778,1439,1.778,1446,1.778,1451,1.316,1452,1.778,1457,1.778,1458,1.778,1460,1.778,1462,1.186,1471,1.778,1483,1.494,1484,1.778,1488,1.397,1492,1.778,1493,1.778,1506,1.615,1511,1.778,1512,1.778,1528,1.778,1536,1.778,1540,1.778,1541,1.778,1547,1.778,1549,1.316,1550,1.778,1562,1.778,1579,1.494,1580,1.778,1633,1.778,1654,1.615,1655,2.025,1656,7.936,1657,1.778,1658,1.778,1659,6.114,1660,8.146,1661,6.383,1662,2.915,1663,1.778,1664,1.778,1665,1.778,1666,3.32,1667,1.778,1668,6.801,1669,2.025,1670,2.025,1671,2.025,1672,2.025,1673,4.882,1674,4.22,1675,5.389,1676,3.32,1677,3.32,1678,2.025,1679,1.778,1680,1.778,1681,1.778,1682,2.025,1683,2.025,1684,2.025,1685,2.025]],["title/dependencies.html",[158,2.522,1686,3.101]],["body/dependencies.html",[46,0.011,75,0.595,76,3.647,79,4.14,82,3.139,84,0.085,116,0.008,117,0.008,147,1.412,158,2.772,225,1.668,230,4.14,285,4.927,333,2.321,388,4.14,670,2.321,703,3.288,828,4.476,1053,4.927,1279,4.476,1687,5.611,1688,5.611,1689,5.611,1690,5.611,1691,7.591,1692,5.611,1693,5.611,1694,5.611,1695,6.976,1696,5.611,1697,5.611,1698,5.611,1699,5.611,1700,5.611,1701,5.611,1702,5.611,1703,5.611,1704,5.611,1705,5.611,1706,5.611,1707,5.611,1708,5.611]],["title/miscellaneous/enumerations.html",[1709,2.296,1710,4.484]],["body/miscellaneous/enumerations.html",[13,4.806,29,0.371,46,0.01,116,0.009,117,0.009,323,4.487,345,4.076,396,5.289,412,4.156,755,5.417,896,5.813,1709,3.916,1710,5.289,1711,6.024,1712,7.286,1713,6.024,1714,7.286,1715,6.024,1716,7.286,1717,7.286,1718,7.286,1719,7.286,1720,7.286]],["title/miscellaneous/functions.html",[1709,2.296,1721,4.484]],["body/miscellaneous/functions.html",[29,0.39,45,1.144,46,0.01,47,0.96,48,0.39,49,0.96,58,1.144,59,1.316,116,0.009,117,0.009,161,3.955,1657,5.569,1658,6.598,1681,5.569,1709,4.122,1721,5.569,1722,6.342,1723,6.342,1724,6.342,1725,7.514,1726,6.342]],["title/index.html",[29,0.217,1727,3.532,1728,3.532]],["body/index.html",[4,0.077,9,1.167,18,2.658,46,0.01,116,0.006,117,0.006,169,3.76,183,4.133,387,2.875,484,3.164,657,4.312,681,1.167,812,5.837,921,3.164,962,2.875,1281,3.164,1337,3.164,1506,4.133,1654,2.875,1729,3.603,1730,3.603,1731,6.067,1732,5.181,1733,3.603,1734,3.603,1735,3.603,1736,3.603,1737,5.181,1738,6.067,1739,3.603,1740,3.603,1741,6.633,1742,3.603,1743,7.715,1744,3.603,1745,7.539,1746,3.603,1747,3.603,1748,5.181,1749,3.603,1750,3.603,1751,6.067,1752,3.603,1753,4.549,1754,3.603,1755,3.603,1756,3.603,1757,3.603,1758,3.603,1759,6.633,1760,7.715,1761,7.317,1762,3.164,1763,5.181,1764,3.603,1765,3.603,1766,3.603,1767,5.181,1768,5.825,1769,3.164,1770,5.181,1771,3.603,1772,5.181,1773,7.317,1774,6.633,1775,3.603,1776,5.181,1777,3.603,1778,3.603,1779,3.603,1780,3.603,1781,6.633,1782,3.603,1783,3.603,1784,3.603,1785,5.181,1786,3.164,1787,3.603,1788,3.603,1789,3.603,1790,3.603,1791,5.181,1792,3.603,1793,3.603,1794,3.603,1795,5.181,1796,3.603,1797,3.603,1798,5.825,1799,5.181,1800,3.603,1801,3.603,1802,3.603,1803,3.603,1804,3.603,1805,3.603,1806,3.603,1807,3.603,1808,5.181,1809,3.603,1810,3.603,1811,3.603,1812,3.603,1813,6.067,1814,3.603,1815,3.603,1816,3.603,1817,3.603,1818,3.603,1819,5.181,1820,3.603,1821,3.603,1822,3.603,1823,3.603,1824,3.603,1825,5.181,1826,3.603,1827,3.603,1828,3.603,1829,5.181,1830,5.181,1831,3.603,1832,3.603,1833,3.603,1834,3.603,1835,3.603,1836,3.603,1837,3.603,1838,3.603,1839,3.603,1840,3.603,1841,3.164,1842,3.603,1843,3.603,1844,3.603,1845,3.603,1846,3.603,1847,3.603,1848,3.164]],["title/modules.html",[157,2.869]],["body/modules.html",[46,0.009,116,0.009,117,0.009,156,4.061,157,2.907,196,4.343,200,3.826,201,3.826,202,4.061,203,4.061,204,3.826,205,4.061,206,3.826,1798,7.615,1849,8.672,1850,8.672,1851,8.672]],["title/overview.html",[1852,5.101]],["body/overview.html",[2,2.356,46,0.011,116,0.005,117,0.005,120,2.038,130,1.731,150,1.183,155,1.145,156,4.465,157,1.459,158,1.459,159,1.582,160,1.582,161,1.459,162,1.582,163,1.582,164,2.594,165,2.594,166,3.725,167,2.396,168,1.582,169,1.518,173,0.58,191,3.51,196,6.148,197,2.594,198,2.594,199,2.594,200,5.151,201,5.417,202,5.467,203,4.465,204,5.39,205,4.465,206,5.465,274,3.226,319,4.598,358,2.594,359,2.594,360,2.594,361,3.326,362,3.51,363,3.51,581,4.598,611,2.594,612,2.594,613,2.594,614,3.51,615,3.51,616,3.51,617,3.51,618,3.51,619,3.51,620,3.51,651,1.183,727,3.51,835,3.51,866,3.51,913,3.51,968,3.51,997,2.594,1017,3.51,1073,3.725,1075,3.51,1080,3.51,1092,3.51,1105,3.51,1113,3.51,1119,3.51,1122,3.51,1207,2.594,1231,3.51,1238,2.594,1239,2.594,1240,3.725,1264,2.594,1265,2.594,1266,3.725,1388,3.51,1411,2.594,1412,2.594,1413,3.51,1414,3.51,1451,3.51,1462,4.145,1486,2.594,1487,2.594,1488,3.725,1549,3.51,1624,2.594,1625,2.594,1626,2.594,1852,2.594,1853,2.954,1854,2.954,1855,2.954,1856,2.954,1857,2.954]],["title/properties.html",[123,1.396,1686,3.101]],["body/properties.html",[9,2.152,46,0.01,116,0.009,117,0.009,123,1.816,1042,5.835,1841,5.835,1848,5.835,1858,6.646,1859,6.646]],["title/miscellaneous/variables.html",[1709,2.296,1860,4.484]],["body/miscellaneous/variables.html",[15,4.651,18,2.787,23,2.228,24,3.649,29,0.232,44,3.953,46,0.011,47,0.572,48,0.33,54,2.787,56,2.606,60,2.606,67,5.484,68,1.75,69,1.593,80,5.406,89,1.953,95,3.697,101,2.606,102,3.316,106,1.254,107,1.42,112,3.316,116,0.006,117,0.006,118,2.023,119,4.048,181,4.479,182,3.013,183,3.013,207,3.013,239,4.275,291,3.3,323,3.835,336,3.316,391,4.275,392,4.705,393,3.316,411,4.275,421,4.705,481,3.013,557,3.953,755,5.165,963,2.213,1047,3.316,1057,3.013,1058,3.316,1059,4.275,1153,4.705,1160,6.712,1279,3.013,1289,3.316,1290,3.316,1507,4.705,1662,3.316,1663,3.316,1664,4.705,1665,4.705,1667,3.316,1679,3.316,1680,4.705,1709,2.455,1753,3.316,1762,3.316,1768,3.316,1769,3.316,1786,3.316,1860,3.316,1861,3.777,1862,3.777,1863,5.358,1864,3.777,1865,3.777,1866,3.777,1867,3.777,1868,3.777,1869,3.777,1870,3.777,1871,3.777,1872,3.777,1873,3.777,1874,3.777,1875,6.227,1876,3.777,1877,6.777,1878,3.777,1879,3.777,1880,3.777,1881,3.777,1882,3.777,1883,3.777,1884,3.777,1885,3.777,1886,3.777,1887,3.777,1888,3.777,1889,3.777,1890,3.777,1891,3.777,1892,3.777,1893,3.777,1894,3.777,1895,3.777,1896,3.777,1897,3.777,1898,3.777,1899,3.777,1900,3.777,1901,6.777,1902,3.777,1903,3.777]]],"invertedIndex":[["",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":775,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"entities/Review.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1858,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["0.41.1",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1683,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1675,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1682,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1673,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1674,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":945,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{}}}],["1.0.0",{"_index":188,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["1.1.23",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1205,"title":{},"body":{"entities/Order.html":{},"classes/PaginationQueryDto.html":{}}}],["10.0.0",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["10.4.6",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":758,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"coverage.html":{}}}],["1025",{"_index":656,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["1025})@isstring()@isnotempty()@minlength(3)@maxlength(1025",{"_index":985,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1025})@isstring()@maxlength(1025",{"_index":939,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1234",{"_index":1157,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":1154,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["17",{"_index":1856,"title":{},"body":{"overview.html":{}}}],["1})@isint({message",{"_index":1324,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["2",{"_index":1207,"title":{},"body":{"entities/Order.html":{},"overview.html":{}}}],["2.0.5",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":551,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":532,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["255",{"_index":508,"title":{},"body":{"entities/Categories.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["255})@isstring()@minlength(3)@maxlength(255",{"_index":950,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["256",{"_index":998,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["256})@isemail()@isnotempty()@maxlength(256",{"_index":987,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["256})@isstring()@isnotempty()@minlength(3)@maxlength(256",{"_index":990,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["256})@isstring()@isoptional()@minlength(3)@maxlength(256",{"_index":993,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3",{"_index":756,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["3.2.2",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1672,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1676,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1857,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":1670,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":553,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["42",{"_index":1855,"title":{},"body":{"overview.html":{}}}],["5",{"_index":960,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["5})@isoptional()@isarray()@isstring({each",{"_index":947,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["6",{"_index":664,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["60",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1854,"title":{},"body":{"overview.html":{}}}],["7.0.4",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":997,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1853,"title":{},"body":{"overview.html":{}}}],["abstract",{"_index":1165,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accepts",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":1143,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["active",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":1665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":119,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":129,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["addresses",{"_index":153,"title":{},"body":{"controllers/AddressesController.html":{}}}],["addresses.controller",{"_index":171,"title":{},"body":{"modules/AddressesModule.html":{}}}],["addresses.service",{"_index":172,"title":{},"body":{"modules/AddressesModule.html":{}}}],["addresses/addresses.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["addressescontroller",{"_index":149,"title":{"controllers/AddressesController.html":{}},"body":{"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"coverage.html":{}}}],["addressesmodule",{"_index":156,"title":{"modules/AddressesModule.html":{}},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["addressesservice",{"_index":166,"title":{"injectables/AddressesService.html":{}},"body":{"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"coverage.html":{},"overview.html":{}}}],["adds",{"_index":1040,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["allow",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["allowing",{"_index":1786,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":691,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateUsersProvider.html":{}}}],["amazing",{"_index":1835,"title":{},"body":{"index.html":{}}}],["api",{"_index":186,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["apibearerauth",{"_index":586,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apibody",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":671,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apiproperty({description",{"_index":654,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apiproperty({type",{"_index":696,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{}}}],["apipropertyoptional",{"_index":955,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":941,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apiresponse",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('categories",{"_index":587,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('products",{"_index":1390,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":177,"title":{},"body":{"interfaces/AppConfig.html":{},"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":192,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":175,"title":{"interfaces/AppConfig.html":{}},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller",{"_index":189,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcreate",{"_index":1658,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appcreate(app",{"_index":1724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["application",{"_index":1761,"title":{},"body":{"index.html":{}}}],["application's",{"_index":1041,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["applications",{"_index":1737,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":196,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":178,"title":{},"body":{"interfaces/AppConfig.html":{},"injectables/DataResponseInterceptor.html":{}}}],["appservice",{"_index":191,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":285,"title":{},"body":{"injectables/Argon2Provider.html":{},"dependencies.html":{}}}],["argon2.hash(password",{"_index":287,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["argon2.verify(hash",{"_index":288,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["argon2provider",{"_index":271,"title":{"injectables/Argon2Provider.html":{}},"body":{"injectables/Argon2Provider.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["argumentshost",{"_index":1175,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":698,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["arraymaxsize",{"_index":956,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["arraymaxsize(5",{"_index":964,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["arrayminsize",{"_index":957,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["arrayminsize(1",{"_index":961,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["associates",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assuming",{"_index":905,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/FindAllProductProvider.html":{}}}],["async",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempts",{"_index":767,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["audience",{"_index":1138,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(authtype.none",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":366,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":289,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authenticationguard",{"_index":235,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":425,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authheader",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authheader.split",{"_index":115,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authheader?.startswith('bearer",{"_index":110,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authmodule",{"_index":200,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1841,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":112,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["authorized",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authservice",{"_index":319,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":421,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.flatmap((type",{"_index":426,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["available",{"_index":953,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["await",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1776,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1836,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":760,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateUsersProvider.html":{}}}],["badrequestexception('order",{"_index":776,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["badrequestexception('user",{"_index":1026,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["based",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"index.html":{}}}],["baseurl",{"_index":1305,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bearer",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":769,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["belongs",{"_index":936,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["better",{"_index":1508,"title":{},"body":{"classes/SignInDto.html":{}}}],["board",{"_index":1828,"title":{},"body":{"index.html":{}}}],["body",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateManyOrderProvider.html":{},"interfaces/DatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":161,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1851,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1849,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":283,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1732,"title":{},"body":{"index.html":{}}}],["bulkcreateprovider",{"_index":433,"title":{"injectables/BulkCreateProvider.html":{}},"body":{"injectables/BulkCreateProvider.html":{},"coverage.html":{}}}],["calculate",{"_index":1286,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["calculates",{"_index":1291,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["call",{"_index":1046,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["callhandler",{"_index":1037,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canceled",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["catch",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["catch(error",{"_index":1118,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["catch(exception",{"_index":1173,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1178,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":493,"title":{"entities/Categories.html":{}},"body":{"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"entities/Product.html":{},"modules/ProductsModule.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"coverage.html":{}}}],["categories'})@apiresponse({status",{"_index":542,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categories.controller",{"_index":622,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.entity",{"_index":584,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["categories.provider",{"_index":625,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["categories.provider.ts",{"_index":706,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"coverage.html":{}}}],["categories.provider.ts:12",{"_index":712,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categories.provider.ts:13",{"_index":1088,"title":{},"body":{"injectables/FindAllCategoriesProvider.html":{}}}],["categories.provider.ts:36",{"_index":710,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categories.provider.ts:51",{"_index":713,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categories.provider.ts:59",{"_index":714,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categories.provider.ts:7",{"_index":707,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{},"injectables/FindAllCategoriesProvider.html":{}}}],["categories.service",{"_index":582,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["categoriescontroller",{"_index":519,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":201,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":839,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["categoriesrespository",{"_index":683,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["categoriesservice",{"_index":581,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["categories})@apiresponse({status",{"_index":562,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categories})@auth(authtype.none",{"_index":535,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categorizing",{"_index":589,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["category",{"_index":533,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category'})@apiresponse({status",{"_index":531,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["category.deletedat",{"_index":1444,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{}}}],["category.dto",{"_index":578,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":653,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:13",{"_index":1539,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:14",{"_index":666,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:16",{"_index":701,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{}}}],["category.dto.ts:24",{"_index":662,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.products",{"_index":1330,"title":{},"body":{"entities/Product.html":{}}}],["category.provider",{"_index":624,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["category.provider.ts",{"_index":679,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"coverage.html":{}}}],["category.provider.ts:14",{"_index":684,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["category.provider.ts:8",{"_index":682,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["categorydto",{"_index":709,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categorydto.name",{"_index":721,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["categoryid",{"_index":932,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/FindAllProductProvider.html":{}}}],["change",{"_index":1224,"title":{},"body":{"entities/OrderItem.html":{}}}],["changed",{"_index":829,"title":{},"body":{"classes/CreateManyOrdersDto.html":{}}}],["channel",{"_index":1801,"title":{},"body":{"index.html":{}}}],["character",{"_index":1008,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":1005,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":812,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"index.html":{}}}],["checks",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["clarity",{"_index":1509,"title":{},"body":{"classes/SignInDto.html":{}}}],["class",{"_index":84,"title":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":651,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"overview.html":{}}}],["clicks",{"_index":1785,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1771,"title":{},"body":{"index.html":{}}}],["cluster_addressesmodule",{"_index":164,"title":{},"body":{"modules/AddressesModule.html":{},"overview.html":{}}}],["cluster_addressesmodule_providers",{"_index":165,"title":{},"body":{"modules/AddressesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":611,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":613,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":612,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1238,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_providers",{"_index":1239,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1264,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1265,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1411,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1412,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_reviewsmodule",{"_index":1486,"title":{},"body":{"modules/ReviewsModule.html":{},"overview.html":{}}}],["cluster_reviewsmodule_providers",{"_index":1487,"title":{},"body":{"modules/ReviewsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1624,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1626,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1625,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":140,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":1203,"title":{},"body":{"entities/Order.html":{}}}],["column({type",{"_index":133,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}}}],["come",{"_index":1792,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1472,"title":{},"body":{"entities/Review.html":{}}}],["common/interceptors/data",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["comparepassword",{"_index":276,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(password",{"_index":278,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":1527,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["complexity",{"_index":995,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["compodoc/compodoc",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configmodule",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["configservice.get('databaseconfig.autoloadentities",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.database_name",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.host",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.password",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.port",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.synchronize",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('databaseconfig.username",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["configured",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["confirmed",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conflictexception",{"_index":459,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["conflictexception('category",{"_index":690,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["conflictexception('failed",{"_index":726,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["conflictexception('no",{"_index":1091,"title":{},"body":{"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{}}}],["conflictexception('product",{"_index":1450,"title":{},"body":{"injectables/ReactivateProductByIdProvider.html":{}}}],["conflictexception('transaction",{"_index":485,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["conflictexception('user",{"_index":1086,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["console.error('error",{"_index":810,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["console.log(`category",{"_index":722,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["console.time('createmanyordersexecutiontime",{"_index":920,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["const",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/FindAllProductProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"miscellaneous/variables.html":{}}}],["construct",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(categoriesrepository",{"_index":1069,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["constructor(categoriesrespository",{"_index":680,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["constructor(configservice",{"_index":1033,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(createcategoryprovider",{"_index":634,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(createorderprovider",{"_index":1247,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(createproductprovider",{"_index":1422,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(datasource",{"_index":441,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["constructor(findonebyemailprovider",{"_index":1635,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(jwtservice",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(private",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["constructor(productrepository",{"_index":971,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["constructor(reflector",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":1271,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":1018,"title":{},"body":{"injectables/CreateUsersProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["constructor(usersservice",{"_index":1514,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["containing",{"_index":1278,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["context",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":424,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":423,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.getrequest",{"_index":1181,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.getresponse",{"_index":1180,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.switchtohttp().getrequest",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["control",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":148,"title":{"controllers/AddressesController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/ReviewsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AddressesController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/ReviewsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('addresses",{"_index":154,"title":{},"body":{"controllers/AddressesController.html":{}}}],["controller('auth",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":592,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('orders",{"_index":1233,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1392,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('reviews",{"_index":1485,"title":{},"body":{"controllers/ReviewsController.html":{}}}],["controller('users",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":150,"title":{},"body":{"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["courses",{"_index":1807,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1654,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":435,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchUserDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createcategory",{"_index":521,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{}}}],["createcategory(@body",{"_index":595,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(createcategorydto",{"_index":528,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{}}}],["createcategory(queryrunner",{"_index":708,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["createcategorydto",{"_index":529,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.name",{"_index":688,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["createcategoryprovider",{"_index":614,"title":{"injectables/CreateCategoryProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"coverage.html":{},"overview.html":{}}}],["created",{"_index":534,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyUsersDto.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["created'})@isnotempty()@isarray()@validatenested({each",{"_index":699,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyUsersDto.html":{}}}],["createdat",{"_index":495,"title":{},"body":{"entities/Categories.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":500,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}}}],["createdcategories",{"_index":715,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["createdcategories.push(category",{"_index":718,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["createddate",{"_index":1473,"title":{},"body":{"entities/Review.html":{}}}],["createditems",{"_index":464,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createditems.push(item",{"_index":472,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createdorders",{"_index":807,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["createdorders.push(order",{"_index":806,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["createdproducts",{"_index":850,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["createdproducts.push(product",{"_index":852,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["createdusers",{"_index":884,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createdusers.push(newuser",{"_index":890,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createfn",{"_index":447,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createfn(itemdto",{"_index":471,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createmany",{"_index":437,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createmany(createmanydto",{"_index":444,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createmanycategories",{"_index":522,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createmanycategories(@body",{"_index":597,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createmanycategories(createmanycategoriesdto",{"_index":537,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createmanycategoriesdto",{"_index":538,"title":{"classes/CreateManyCategoriesDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"coverage.html":{}}}],["createmanycategoriesdto.categories",{"_index":716,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["createmanycategoriesprovider",{"_index":615,"title":{"injectables/CreateManyCategoriesProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CreateManyCategoriesProvider.html":{},"coverage.html":{},"overview.html":{}}}],["createmanycategoriesprovider(createmanycategoriesdto",{"_index":711,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["createmanycategoryprovider",{"_index":635,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createmanydto",{"_index":452,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createmanydto.items",{"_index":470,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["createmanyorder",{"_index":1246,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createmanyorder(createmanyorderdto",{"_index":1249,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createmanyorderdto",{"_index":742,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createmanyorderprovider",{"_index":727,"title":{"injectables/CreateManyOrderProvider.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createmanyorders",{"_index":1227,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createmanyorders(@body",{"_index":1236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createmanyorders(createmanyorderdto",{"_index":1228,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createmanyordersdto",{"_index":740,"title":{"classes/CreateManyOrdersDto.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createmanyordersprovider",{"_index":732,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["createmanyordersprovider(createmanyorderdto",{"_index":739,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["createmanyproductdto",{"_index":1366,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createmanyproducts",{"_index":1355,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createmanyproducts(@body",{"_index":1396,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createmanyproducts(createmanyproductdto",{"_index":1362,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createmanyproducts(createmanyproducts",{"_index":1424,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createmanyproductsdto",{"_index":830,"title":{"classes/CreateManyProductsDto.html":{}},"body":{"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createmanyproductsprovider",{"_index":835,"title":{"injectables/CreateManyProductsProvider.html":{}},"body":{"injectables/CreateManyProductsProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createmanyproductsprovider(createmanyproductsdto",{"_index":841,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["createmanyuserdto",{"_index":874,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createmanyuserdto.users",{"_index":883,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createmanyusers",{"_index":869,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createmanyusers(@body",{"_index":1616,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyuserdto",{"_index":872,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1585,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createmanyusersdto",{"_index":858,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersprovider",{"_index":866,"title":{"injectables/CreateManyUsersProvider.html":{}},"body":{"injectables/CreateManyUsersProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createorder",{"_index":914,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorder(@body",{"_index":1234,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createorder(createorderdto",{"_index":916,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":789,"title":{"classes/CreateOrderDto.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderitemdto",{"_index":744,"title":{"classes/CreateOrderItemDto.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["createorderitems",{"_index":733,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["createorderitems(orderitemdtos",{"_index":743,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["createorderprovider",{"_index":913,"title":{"injectables/CreateOrderProvider.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":838,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["createproduct(queryrunner",{"_index":843,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["createproductdto",{"_index":833,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductprovider",{"_index":968,"title":{"injectables/CreateProductProvider.html":{}},"body":{"injectables/CreateProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createproducts",{"_index":1356,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproducts(@body",{"_index":1394,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproducts(productdto",{"_index":1367,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductsprovider",{"_index":970,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["createproductsprovider(productdto",{"_index":973,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["createuser",{"_index":870,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":1614,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":1021,"title":{},"body":{"injectables/CreateUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(queryrunner",{"_index":875,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["createuserdto",{"_index":861,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1025,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["createusersprovider",{"_index":1017,"title":{"injectables/CreateUsersProvider.html":{}},"body":{"injectables/CreateUsersProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":811,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["credentials",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1262,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1260,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1507,"title":{},"body":{"classes/SignInDto.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/SignInDto.html":{},"miscellaneous/variables.html":{}}}],["data.interface",{"_index":1136,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["data.interface.ts",{"_index":122,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{}}}],["database_host",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_name",{"_index":1058,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["database_password",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_port",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_username",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":220,"title":{"interfaces/DatabaseConfig.html":{}},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{},"coverage.html":{}}}],["dataresponseinterceptor",{"_index":231,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":442,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["date",{"_index":499,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":1189,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["deadlock",{"_index":813,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["debugging",{"_index":1044,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["declarations",{"_index":160,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":132,"title":{},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/RefreshTokenDto.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":1803,"title":{},"body":{"index.html":{}}}],["default",{"_index":181,"title":{},"body":{"interfaces/AppConfig.html":{},"injectables/CreateManyOrderProvider.html":{},"interfaces/DatabaseConfig.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/PaginationQueryDto.html":{},"entities/Review.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["define",{"_index":865,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["defined",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"entities/Address.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":1495,"title":{},"body":{"classes/SignInDto.html":{}}}],["delay",{"_index":734,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["delay(ms",{"_index":750,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["delete",{"_index":549,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete')@apioperation({summary",{"_index":1372,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete('/soft",{"_index":546,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["delete('soft",{"_index":1371,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete/:id",{"_index":602,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["delete/:id')@apioperation({summary",{"_index":547,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategorybyid",{"_index":523,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/DeleteCategoryByIdProvider.html":{}}}],["deletecategorybyid(@param('id",{"_index":603,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategorybyid(id",{"_index":545,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/DeleteCategoryByIdProvider.html":{}}}],["deletecategorybyidprovider",{"_index":616,"title":{"injectables/DeleteCategoryByIdProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["deleted",{"_index":567,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["deleted'})@apiresponse({status",{"_index":552,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletedat",{"_index":496,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":502,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["deletedatecolumn()@exclude",{"_index":1333,"title":{},"body":{"entities/Product.html":{}}}],["deleteorderbyidprovider",{"_index":1073,"title":{"injectables/DeleteOrderByIdProvider.html":{}},"body":{"injectables/DeleteOrderByIdProvider.html":{},"modules/OrdersModule.html":{},"coverage.html":{},"overview.html":{}}}],["deleteproductbyid",{"_index":1357,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductbyid(@query('id",{"_index":1409,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproductbyid(id",{"_index":1370,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductbyidprovider",{"_index":1075,"title":{"injectables/DeleteProductByIdProvider.html":{}},"body":{"injectables/DeleteProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["deleteproductbyidprovider(id",{"_index":1077,"title":{},"body":{"injectables/DeleteProductByIdProvider.html":{}}}],["deleteuserbyid",{"_index":1082,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@query('id",{"_index":1620,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyid(id",{"_index":1083,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyidprovider",{"_index":1080,"title":{"injectables/DeleteUserByIdProvider.html":{}},"body":{"injectables/DeleteUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["delivered",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":158,"title":{"dependencies.html":{}},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1759,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1775,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1767,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1784,"title":{},"body":{"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/GetUsersParamDto.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["desired",{"_index":673,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{}}}],["development",{"_index":1746,"title":{},"body":{"index.html":{}}}],["devices",{"_index":660,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["devtools",{"_index":1814,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1800,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1802,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1506,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{},"index.html":{}}}],["dto",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{}}}],["dto.ts",{"_index":823,"title":{},"body":{"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["dto.ts:11",{"_index":895,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["dto.ts:12",{"_index":910,"title":{},"body":{"classes/CreateOrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["dto.ts:13",{"_index":951,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:15",{"_index":834,"title":{},"body":{"classes/CreateManyProductsDto.html":{},"classes/CreateOrderDto.html":{}}}],["dto.ts:17",{"_index":826,"title":{},"body":{"classes/CreateManyOrdersDto.html":{}}}],["dto.ts:19",{"_index":899,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/SignInDto.html":{}}}],["dto.ts:20",{"_index":952,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:22",{"_index":893,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["dto.ts:28",{"_index":940,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:31",{"_index":1504,"title":{},"body":{"classes/SignInDto.html":{}}}],["dto.ts:35",{"_index":938,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:42",{"_index":954,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:5",{"_index":911,"title":{},"body":{"classes/CreateOrderItemDto.html":{}}}],["dto.ts:56",{"_index":949,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["dto.ts:7",{"_index":900,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["dto.ts:9",{"_index":912,"title":{},"body":{"classes/CreateOrderItemDto.html":{}}}],["dtos",{"_index":907,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["dtos/create",{"_index":576,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/pagination",{"_index":1296,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1555,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/refresh",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":585,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["e2e",{"_index":1754,"title":{},"body":{"index.html":{}}}],["each",{"_index":705,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateProductDto.html":{}}}],["eager",{"_index":1101,"title":{},"body":{"injectables/FindAllProductProvider.html":{},"entities/Product.html":{}}}],["ecommerce",{"_index":185,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["efficient",{"_index":1733,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1765,"title":{},"body":{"index.html":{}}}],["eight",{"_index":1004,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["electronic",{"_index":659,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["electronics",{"_index":674,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["electronics'})@isstring()@isnotempty()@minlength(3",{"_index":665,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["email",{"_index":124,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email'})@apiresponse({status",{"_index":1597,"title":{},"body":{"controllers/UsersController.html":{}}}],["email.provider",{"_index":1629,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1114,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:13",{"_index":1117,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":1115,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["emits",{"_index":1049,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["empty",{"_index":1326,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/SignInDto.html":{}}}],["endpoint",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":590,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["ensure",{"_index":962,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"index.html":{}}}],["enterprise",{"_index":1818,"title":{},"body":{"index.html":{}}}],["entire",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities",{"_index":130,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":128,"title":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('users",{"_index":1578,"title":{},"body":{"entities/User.html":{}}}],["entitytarget",{"_index":446,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["enum",{"_index":1201,"title":{},"body":{"entities/Order.html":{}}}],["enumerations",{"_index":1710,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":904,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["enums.ts",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/order",{"_index":903,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["env",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":179,"title":{},"body":{"interfaces/AppConfig.html":{},"injectables/DataResponseInterceptor.html":{}}}],["environmentvalidation",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["envschema",{"_index":1680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["error.message",{"_index":486,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["example",{"_index":657,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"index.html":{}}}],["exception",{"_index":1170,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.getresponse",{"_index":1183,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1187,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1172,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1182,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":1349,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["exclude()@deletedatecolumn",{"_index":1565,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":1300,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["execution",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existence",{"_index":976,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["existing",{"_index":723,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["existingcategory",{"_index":719,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["existingproduct",{"_index":1543,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{}}}],["existinguser",{"_index":1023,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["exists",{"_index":692,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateUsersProvider.html":{}}}],["experience",{"_index":1805,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":1133,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["export",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":163,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":273,"title":{},"body":{"injectables/Argon2Provider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["extract",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracted",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extraction",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extracts",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["facilitates",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":431,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/SignInProvider.html":{}}}],["false",{"_index":136,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{}}}],["false})@exclude",{"_index":1573,"title":{},"body":{"entities/User.html":{}}}],["false})@isint()@isnotempty",{"_index":1538,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["fast",{"_index":1779,"title":{},"body":{"index.html":{}}}],["fastify",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["fastify/static",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["fastifyreply",{"_index":1177,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["fastifyrequest",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationProvider.html":{}}}],["features",{"_index":1788,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1102,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["fetching",{"_index":1163,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["few",{"_index":1781,"title":{},"body":{"index.html":{}}}],["field",{"_index":1160,"title":{},"body":{"classes/GetUsersParamDto.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":1099,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["filter.ts",{"_index":1171,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["filter.ts:6",{"_index":1176,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filtered",{"_index":1376,"title":{},"body":{"controllers/ProductsController.html":{}}}],["finally",{"_index":475,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/PaginationProvider.html":{}}}],["find",{"_index":1078,"title":{},"body":{"injectables/DeleteProductByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/UpdateProductByIdProvider.html":{},"controllers/UsersController.html":{}}}],["findallcategories",{"_index":524,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findallcategoriesprovider",{"_index":617,"title":{"injectables/FindAllCategoriesProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/FindAllCategoriesProvider.html":{},"coverage.html":{},"overview.html":{}}}],["findallproductprovider",{"_index":1092,"title":{"injectables/FindAllProductProvider.html":{}},"body":{"injectables/FindAllProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["findallproductprovider(categoryid",{"_index":1095,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["findallproducts",{"_index":1358,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(@param('id",{"_index":1399,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproducts(category",{"_index":1374,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findalluserprovider",{"_index":1107,"title":{},"body":{"injectables/FindAllUsersProvider.html":{}}}],["findallusers",{"_index":1581,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findallusersprovider",{"_index":1105,"title":{"injectables/FindAllUsersProvider.html":{}},"body":{"injectables/FindAllUsersProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findcategorybyid",{"_index":525,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findcategorybyid(@param('id",{"_index":600,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["findcategorybyid(id",{"_index":560,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["findcategorybyidprovider",{"_index":618,"title":{"injectables/FindCategoryByIdProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/FindCategoryByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["findcategorybyidprovider(id",{"_index":1111,"title":{},"body":{"injectables/FindCategoryByIdProvider.html":{}}}],["findonebyemail",{"_index":1582,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(@param('email",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyemail(email",{"_index":1595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyemailprovider",{"_index":1113,"title":{"injectables/FindOneByEmailProvider.html":{}},"body":{"injectables/FindOneByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemailprovider(email",{"_index":1116,"title":{},"body":{"injectables/FindOneByEmailProvider.html":{}}}],["findonebyid",{"_index":1583,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyid(@param('id",{"_index":1612,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonebyid(id",{"_index":1599,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyidprovider",{"_index":1119,"title":{"injectables/FindOneByIdProvider.html":{}},"body":{"injectables/FindOneByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyid",{"_index":1359,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findproductbyid(@param('id",{"_index":1402,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findproductbyid(id",{"_index":1379,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findproductbyidprovider",{"_index":1122,"title":{"injectables/FindProductByIdProvider.html":{}},"body":{"injectables/FindProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyidprovider(id",{"_index":1123,"title":{},"body":{"injectables/FindProductByIdProvider.html":{}}}],["finduserbyidprovider",{"_index":1120,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["finduserbyidprovider(id",{"_index":1121,"title":{},"body":{"injectables/FindOneByIdProvider.html":{}}}],["fine",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":989,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":982,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["float",{"_index":1342,"title":{},"body":{"entities/Product.html":{}}}],["focus",{"_index":1787,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1822,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":1499,"title":{},"body":{"classes/SignInDto.html":{}}}],["format'})@isnotempty({message",{"_index":1501,"title":{},"body":{"classes/SignInDto.html":{}}}],["forwardref",{"_index":365,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ProductsModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":554,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":1731,"title":{},"body":{"index.html":{}}}],["full",{"_index":1817,"title":{},"body":{"index.html":{}}}],["function",{"_index":453,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1721,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1783,"title":{},"body":{"index.html":{}}}],["gadgets",{"_index":676,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["gadgets.'})@isstring()@isnotempty()@maxlength(1025",{"_index":661,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["generate",{"_index":1465,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1461,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1127,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["generatetokens(user",{"_index":1130,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["generatetokentprovider",{"_index":361,"title":{"injectables/GenerateTokentProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1401,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":1380,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('/all/:id",{"_index":1398,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('/all/:id?')@auth(authtype.none)@apioperation({summary",{"_index":1375,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('/email/:email",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/email/:email?')@apioperation({summary",{"_index":1596,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/id/:id",{"_index":599,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["get('/id/:id')@apioperation({summary",{"_index":561,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get('/id/:id?')@apioperation({summary",{"_index":1600,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":556,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["gethello",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":1727,"title":{"index.html":{}},"body":{}}],["getusersparamdto",{"_index":1150,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["grained",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1810,"title":{},"body":{"index.html":{}}}],["grouping",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["grow",{"_index":1832,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guard.canactivate(context",{"_index":428,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guard.constructor.name",{"_index":430,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["handler",{"_index":1047,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["handles",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["handletransactionerror",{"_index":439,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["handletransactionerror(queryrunner",{"_index":454,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["hands",{"_index":1804,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1793,"title":{},"body":{"index.html":{}}}],["hash",{"_index":279,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashedpassword",{"_index":885,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["hashing.provider",{"_index":286,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":274,"title":{"injectables/HashingProvider.html":{}},"body":{"injectables/Argon2Provider.html":{},"modules/AuthModule.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashingprovider:12",{"_index":281,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["hashingprovider:8",{"_index":284,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["hashpassword",{"_index":277,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(password",{"_index":282,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":113,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":269,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1808,"title":{},"body":{"index.html":{}}}],["here",{"_index":484,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"index.html":{}}}],["host",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":1179,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1174,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1168,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":1845,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.forbidden",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.ok",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":127,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"entities/Review.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":550,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["id.provider",{"_index":627,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1068,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:13",{"_index":1071,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{}}}],["id.provider.ts:14",{"_index":1531,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["id.provider.ts:17",{"_index":1554,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["id.provider.ts:7",{"_index":1070,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{}}}],["id.provider.ts:8",{"_index":1529,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["id.provider.ts:9",{"_index":1552,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["identifier",{"_index":1323,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["if(!categories",{"_index":1090,"title":{},"body":{"injectables/FindAllCategoriesProvider.html":{}}}],["if(!category",{"_index":1112,"title":{},"body":{"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{}}}],["if(!existingcategory",{"_index":1534,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{}}}],["if(!passwordmatches",{"_index":1523,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["if(!product",{"_index":1124,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{}}}],["if(!user",{"_index":1085,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/SignInProvider.html":{}}}],["if(category",{"_index":689,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["illustration",{"_index":1158,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{}}}],["image",{"_index":942,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["images",{"_index":933,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["implements",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in(productids",{"_index":786,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["in(userids",{"_index":780,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["in.provider",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1512,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:16",{"_index":1516,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:34",{"_index":1518,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:8",{"_index":1515,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["includes",{"_index":658,"title":{},"body":{"classes/CreateCategoryDto.html":{},"injectables/PaginationProvider.html":{},"classes/SignInDto.html":{}}}],["incoming",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"interfaces/AppConfig.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1159,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["indicating",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":1769,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["infrastructure",{"_index":1790,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":280,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["inject",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":1467,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":1299,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AddressesService.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/ReviewsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddressesService.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/ReviewsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/AddressesService.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/ReviewsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":685,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["injectrepository(categories",{"_index":686,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{}}}],["injectrepository(product",{"_index":772,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["injectrepository(user",{"_index":771,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["install",{"_index":1782,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1744,"title":{},"body":{"index.html":{}}}],["instance",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["int",{"_index":1221,"title":{},"body":{"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{}}}],["integer",{"_index":1161,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{}}}],["integer.'})@isnotempty({message",{"_index":1325,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["interact",{"_index":1811,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1032,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":1035,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercepts",{"_index":1039,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":118,"title":{"interfaces/ActiveUserData.html":{},"interfaces/AppConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/AppConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/Paginated.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":120,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/AppConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1135,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["interfaces/pagination.interface",{"_index":1298,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["internalservererrorexception",{"_index":975,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["internalservererrorexception('failed",{"_index":980,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["invalid",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"classes/SignInDto.html":{}}}],["isarray",{"_index":667,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{}}}],["isdeadlockerror",{"_index":735,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["isdeadlockerror(error",{"_index":753,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["isemail",{"_index":1010,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":901,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isenum(orderstatusenum",{"_index":906,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isglobal",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1156,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty",{"_index":668,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty()@isenum(orderstatusenum",{"_index":897,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isnotempty()@isnumber",{"_index":898,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{}}}],["isnotempty()@isstring",{"_index":894,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isnumber",{"_index":902,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":958,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["isoptional()@ispositive",{"_index":1316,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":1319,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":669,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["issuer",{"_index":1140,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["item",{"_index":448,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["item.entity",{"_index":763,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{}}}],["item.entity.ts",{"_index":1214,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:12",{"_index":1218,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:19",{"_index":1215,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:22",{"_index":1220,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:28",{"_index":1222,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:9",{"_index":1216,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.product.price",{"_index":803,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["item.productid",{"_index":784,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["item.quantity",{"_index":804,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["itemdto",{"_index":469,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["items",{"_index":462,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/PaginationProvider.html":{}}}],["itemsperpage",{"_index":1258,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1825,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1827,"title":{},"body":{"index.html":{}}}],["joi.number().default(3000",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":1838,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["jwtconfig",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtmodule",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["kamil",{"_index":1842,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":1351,"title":{},"body":{"entities/Product.html":{}}}],["key",{"_index":1762,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":992,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":983,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1796,"title":{},"body":{"index.html":{}}}],["legend",{"_index":159,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":507,"title":{},"body":{"entities/Categories.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["letter",{"_index":1006,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1848,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1830,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1284,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["link",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/Product.html":{}}}],["linkedin",{"_index":1824,"title":{},"body":{"index.html":{}}}],["links",{"_index":1256,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":558,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":445,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":482,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{}}}],["logging",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["looking",{"_index":1770,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1820,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1777,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1789,"title":{},"body":{"index.html":{}}}],["many",{"_index":577,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many')@apioperation({summary",{"_index":540,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["manytoone",{"_index":146,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{}}}],["manytoone(undefined",{"_index":142,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{}}}],["map",{"_index":747,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":1056,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map(products.map(product",{"_index":787,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["mapping",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["match",{"_index":1525,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["matches",{"_index":1011,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":1016,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":117,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1302,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1773,"title":{},"body":{"index.html":{}}}],["max_retries",{"_index":730,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["maximum",{"_index":672,"title":{},"body":{"classes/CreateCategoryDto.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateProductDto.html":{}}}],["maxitems",{"_index":946,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength",{"_index":655,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1025",{"_index":677,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(255",{"_index":959,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(256",{"_index":1013,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":1002,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{}}}],["meta",{"_index":1257,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1279,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["milliseconds",{"_index":768,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["minimum",{"_index":1003,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minitems",{"_index":944,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["minlength",{"_index":663,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":675,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":1015,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1709,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1829,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1748,"title":{},"body":{"index.html":{}}}],["modified",{"_index":1050,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["module",{"_index":155,"title":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":157,"title":{"modules.html":{}},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1768,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ms",{"_index":752,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["multiple",{"_index":541,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["myśliwiec",{"_index":1843,"title":{},"body":{"index.html":{}}}],["name",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":1815,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1738,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":1725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestframework",{"_index":1847,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1051,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":1760,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":828,"title":{},"body":{"classes/CreateManyOrdersDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newproduct",{"_index":855,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["newuser",{"_index":888,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{}}}],["next",{"_index":1036,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":1055,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":1303,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1730,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":761,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["notfoundexception(`product",{"_index":818,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["notfoundexception(`user",{"_index":795,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["npm",{"_index":1743,"title":{},"body":{"index.html":{}}}],["null",{"_index":1223,"title":{},"body":{"entities/OrderItem.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":126,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"entities/Review.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":1293,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["number})@isint()@isnotempty",{"_index":1548,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["number})@isnumber",{"_index":937,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["object",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"classes/SignInDto.html":{},"miscellaneous/variables.html":{}}}],["objectliteral",{"_index":461,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/PaginationProvider.html":{}}}],["observable",{"_index":1048,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["offer",{"_index":1826,"title":{},"body":{"index.html":{}}}],["official",{"_index":1774,"title":{},"body":{"index.html":{}}}],["offset",{"_index":1287,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["one",{"_index":963,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":518,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":512,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["open",{"_index":1831,"title":{},"body":{"index.html":{}}}],["operation",{"_index":593,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["optional",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":481,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":1098,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["options.where",{"_index":1100,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["order",{"_index":745,"title":{"entities/Order.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"injectables/UpdateOrderByIdProvider.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["order.entity",{"_index":919,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.orderitems",{"_index":1217,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.orderitems.map(item",{"_index":783,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider",{"_index":1243,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.provider.ts",{"_index":729,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["order.provider.ts:12",{"_index":915,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:124",{"_index":754,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider.ts:129",{"_index":751,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider.ts:13",{"_index":757,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider.ts:14",{"_index":738,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider.ts:21",{"_index":917,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:24",{"_index":741,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.provider.ts:80",{"_index":918,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:94",{"_index":748,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["order.totalamount",{"_index":805,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["order.user",{"_index":1571,"title":{},"body":{"entities/User.html":{}}}],["order.userid",{"_index":777,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["orderdate",{"_index":1193,"title":{},"body":{"entities/Order.html":{}}}],["orderitem",{"_index":762,"title":{"entities/OrderItem.html":{}},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1198,"title":{},"body":{"entities/Order.html":{}}}],["orderitem.product",{"_index":1340,"title":{},"body":{"entities/Product.html":{}}}],["orderitem.product.id",{"_index":928,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderitemdto",{"_index":816,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["orderitemdto.productid",{"_index":819,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["orderitemdtos",{"_index":749,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["orderitemdtos.map(async",{"_index":930,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderitementities",{"_index":799,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["orderitementities.reduce((total",{"_index":801,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["orderitems",{"_index":792,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["orderitemsentities",{"_index":925,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderitemsentities.reduce((total",{"_index":926,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orders",{"_index":773,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"controllers/OrdersController.html":{},"entities/User.html":{}}}],["orders.controller",{"_index":1242,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.flatmap(order",{"_index":782,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["orders.length",{"_index":774,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["orders.service",{"_index":1232,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["orders/orders.module",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1225,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":202,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1231,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatusenum",{"_index":896,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatusenum.pending",{"_index":1212,"title":{},"body":{"entities/Order.html":{}}}],["original",{"_index":483,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["otherwise",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":169,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":1288,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["overview",{"_index":1852,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd",{"_index":1510,"title":{},"body":{"classes/SignInDto.html":{}}}],["p@ssw0rd!'})@isstring({message",{"_index":1502,"title":{},"body":{"classes/SignInDto.html":{}}}],["package",{"_index":1686,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1283,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":1292,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginate",{"_index":1282,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginated",{"_index":1254,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatequery",{"_index":1270,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":1273,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginates",{"_index":1276,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1277,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":203,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1266,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1295,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1274,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":1152,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":1155,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":1289,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.database_port",{"_index":1061,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["parseintpipe",{"_index":579,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1816,"title":{},"body":{"index.html":{}}}],["partial",{"_index":463,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["partial,queryrunner",{"_index":449,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["partialtype",{"_index":827,"title":{},"body":{"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{}}}],["partialtype(createcategorydto",{"_index":1537,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createorderdto",{"_index":824,"title":{},"body":{"classes/CreateManyOrdersDto.html":{}}}],["partialtype(createproductdto",{"_index":832,"title":{},"body":{"classes/CreateManyProductsDto.html":{},"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":1322,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["password",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/Argon2Provider.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"interfaces/DatabaseConfig.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{}}}],["password1",{"_index":1014,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password1!'})@isstring()@isnotempty()@minlength(8)@maxlength(256)@matches(/^(?=.*[a",{"_index":999,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["passwordmatches",{"_index":1521,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["patchuserdto",{"_index":1320,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["patchuserdto.id",{"_index":1560,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["patchuserdto.password",{"_index":1556,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["path",{"_index":1190,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{}}}],["pending",{"_index":1716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1294,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pg",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1772,"title":{},"body":{"index.html":{}}}],["please",{"_index":1799,"title":{},"body":{"index.html":{}}}],["port",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["possible",{"_index":1766,"title":{},"body":{"index.html":{}}}],["post",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":539,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["post('create')@apioperation({summary",{"_index":530,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{}}}],["post('refresh",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":1586,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('register')@auth(authtype.none)@apioperation({summary",{"_index":1590,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('signin",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin')@httpcode(httpstatus.ok)@auth(authtype.none)@apioperation({summary",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":1204,"title":{},"body":{"entities/Order.html":{}}}],["prefix",{"_index":152,"title":{},"body":{"controllers/AddressesController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/ReviewsController.html":{},"controllers/UsersController.html":{}}}],["presence",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["present",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GetUsersParamDto.html":{}}}],["previous",{"_index":1263,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["price",{"_index":934,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["primarygeneratedcolumn",{"_index":138,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{}}}],["private",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["process.env.api_version",{"_index":187,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["process.env.app_name",{"_index":184,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["process.env.database_host",{"_index":1060,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_name",{"_index":1064,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_password",{"_index":1063,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_username",{"_index":1062,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.node_env",{"_index":182,"title":{},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["product",{"_index":511,"title":{"entities/Product.html":{}},"body":{"entities/Categories.html":{},"modules/CategoriesModule.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateProductByIdProvider.html":{},"entities/Review.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product'})@apiresponse({status",{"_index":1368,"title":{},"body":{"controllers/ProductsController.html":{}}}],["product.category",{"_index":513,"title":{},"body":{"entities/Categories.html":{}}}],["product.deletedat",{"_index":1449,"title":{},"body":{"injectables/ReactivateProductByIdProvider.html":{}}}],["product.entity",{"_index":848,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["product.id",{"_index":788,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["product.orderitems",{"_index":1219,"title":{},"body":{"entities/OrderItem.html":{}}}],["product.provider",{"_index":1417,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["product.provider.ts",{"_index":969,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/FindAllProductProvider.html":{},"coverage.html":{}}}],["product.provider.ts:17",{"_index":1096,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["product.provider.ts:18",{"_index":974,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["product.provider.ts:8",{"_index":1094,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["product.provider.ts:9",{"_index":972,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["product.reviews",{"_index":1478,"title":{},"body":{"entities/Review.html":{}}}],["product.stock",{"_index":820,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["productdto",{"_index":844,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["productdto.categoryid",{"_index":854,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{}}}],["productid",{"_index":908,"title":{},"body":{"classes/CreateOrderItemDto.html":{}}}],["productids",{"_index":781,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["production",{"_index":183,"title":{},"body":{"interfaces/AppConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["productrepository",{"_index":737,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{}}}],["products",{"_index":497,"title":{},"body":{"entities/Categories.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/FindAllProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["products'})@apiresponse({status",{"_index":1363,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1416,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.length",{"_index":1104,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["products.provider",{"_index":1418,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.provider.ts",{"_index":837,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"coverage.html":{}}}],["products.provider.ts:10",{"_index":840,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["products.provider.ts:17",{"_index":842,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["products.provider.ts:42",{"_index":845,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["products.provider.ts:56",{"_index":846,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["products.provider.ts:64",{"_index":847,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["products.service",{"_index":1389,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/product.entity",{"_index":765,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["products/products.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1353,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productservice",{"_index":1393,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productsmap",{"_index":746,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["productsmap.get(orderitemdto.productid",{"_index":817,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["productsmodule",{"_index":204,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsservice",{"_index":1388,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1729,"title":{},"body":{"index.html":{}}}],["project",{"_index":1741,"title":{},"body":{"index.html":{}}}],["promise",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":929,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["promise.all(orderitemdtos.map(async",{"_index":815,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["properties",{"_index":123,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"interfaces/AppConfig.html":{},"guards/AuthenticationGuard.html":{},"entities/Categories.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"classes/GetUsersParamDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"classes/RefreshTokenDto.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"properties.html":{}}}],["protected",{"_index":438,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["provide",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductProvider.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["provider.ts",{"_index":436,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"coverage.html":{}}}],["provider.ts:11",{"_index":451,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["provider.ts:35",{"_index":455,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["provider.ts:45",{"_index":458,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["provider.ts:6",{"_index":443,"title":{},"body":{"injectables/BulkCreateProvider.html":{}}}],["providers",{"_index":162,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/argon2.provider",{"_index":368,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":623,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providers/delete",{"_index":629,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providers/find",{"_index":626,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providers/generate",{"_index":369,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/hashing.provider",{"_index":367,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/pagination.provider",{"_index":1268,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/reactivate",{"_index":630,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providers/refresh",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/sign",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/update",{"_index":628,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["provision",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":275,"title":{},"body":{"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purposes",{"_index":1045,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["put",{"_index":580,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('/reactivate/:id",{"_index":605,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('/reactivate/:id')@apioperation({summary",{"_index":565,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('/update",{"_index":608,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["put('/update')@apioperation({summary",{"_index":572,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["put('update",{"_index":1406,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('update')@apioperation({summary",{"_index":1386,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["quantity",{"_index":909,"title":{},"body":{"classes/CreateOrderItemDto.html":{},"entities/OrderItem.html":{}}}],["query",{"_index":491,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["query.dto",{"_index":1297,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1315,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:11",{"_index":1318,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:7",{"_index":1317,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":456,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["queryrunner.committransaction",{"_index":473,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["queryrunner.connect",{"_index":467,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(categories",{"_index":724,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["queryrunner.manager.create(order",{"_index":796,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(orderitem",{"_index":931,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(product",{"_index":856,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":891,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["queryrunner.manager.findoneby(categories",{"_index":720,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["queryrunner.manager.save(category",{"_index":725,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["queryrunner.manager.save(newproduct",{"_index":857,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":892,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["queryrunner.manager.save(order",{"_index":798,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["queryrunner.release",{"_index":487,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":477,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["queryrunner.starttransaction",{"_index":468,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["questions",{"_index":1797,"title":{},"body":{"index.html":{}}}],["rating",{"_index":1474,"title":{},"body":{"entities/Review.html":{}}}],["reactivate",{"_index":566,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["reactivatecategorybyid",{"_index":526,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["reactivatecategorybyid(@param('id",{"_index":606,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["reactivatecategorybyid(id",{"_index":564,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["reactivatecategorybyidprovider",{"_index":619,"title":{"injectables/ReactivateCategoryByIdProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["reactivatecategorybyidprovider(id",{"_index":1440,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{}}}],["reactivatecategorybyidprovider(id:number",{"_index":1441,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{}}}],["reactivated",{"_index":568,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["reactivateproductbyid",{"_index":1360,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["reactivateproductbyid(@param('id",{"_index":1404,"title":{},"body":{"controllers/ProductsController.html":{}}}],["reactivateproductbyid(id",{"_index":1382,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["reactivateproductbyidprovider",{"_index":1413,"title":{"injectables/ReactivateProductByIdProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateProductByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["reactivateproductbyidprovider(id",{"_index":1447,"title":{},"body":{"injectables/ReactivateProductByIdProvider.html":{}}}],["reactivateuser",{"_index":1584,"title":{},"body":{"controllers/UsersController.html":{}}}],["reactivateuser(@param('id",{"_index":1622,"title":{},"body":{"controllers/UsersController.html":{}}}],["reactivateuser(id",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{}}}],["reactivateuserbyid",{"_index":1634,"title":{},"body":{"injectables/UsersService.html":{}}}],["reactivateuserbyid(id",{"_index":1643,"title":{},"body":{"injectables/UsersService.html":{}}}],["reactivateuserbyidprovider",{"_index":1451,"title":{"injectables/ReactivateUserByIdProvider.html":{}},"body":{"injectables/ReactivateUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["reactivateuserbyidprovider(id",{"_index":1453,"title":{},"body":{"injectables/ReactivateUserByIdProvider.html":{}}}],["read",{"_index":1839,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1758,"title":{},"body":{"index.html":{}}}],["real",{"_index":1812,"title":{},"body":{"index.html":{}}}],["record",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reference",{"_index":704,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{}}}],["reflect",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshed",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":1147,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":295,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto})@apiresponse({status",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":362,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":1587,"title":{},"body":{"controllers/UsersController.html":{}}}],["registeras",{"_index":180,"title":{},"body":{"interfaces/AppConfig.html":{},"interfaces/DatabaseConfig.html":{}}}],["relationship",{"_index":1352,"title":{},"body":{"entities/Product.html":{}}}],["release",{"_index":490,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["releaseerror",{"_index":488,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["releasequeryrunner",{"_index":440,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["releasequeryrunner(queryrunner",{"_index":457,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["remarks",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["repository",{"_index":681,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"index.html":{}}}],["repository.findandcount",{"_index":1301,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.url",{"_index":1191,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request[request_user_key",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":460,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["requesttimeoutexception('order",{"_index":923,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["requesttimeoutexception(error",{"_index":695,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["requesttimeoutexception(releaseerror.message",{"_index":489,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["requesttimeoutexception(rollbackerror.message",{"_index":479,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["requesturl",{"_index":1307,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesturl.origin}${requesturl.pathname}?limit=${limit}&page=${nextpage",{"_index":1312,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesturl.origin}${requesturl.pathname}?limit=${limit}&page=${page",{"_index":1311,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesturl.origin}${requesturl.pathname}?limit=${limit}&page=${previouspage",{"_index":1313,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesturl.origin}${requesturl.pathname}?limit=${limit}&page=${totalpages",{"_index":1310,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesturl.origin}${requesturl.pathname}?limit=${limit}&page=1",{"_index":1309,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["required",{"_index":697,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/UpdateCategoryDto.html":{}}}],["requirements",{"_index":996,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["requiring",{"_index":1780,"title":{},"body":{"index.html":{}}}],["reset",{"_index":168,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["resources",{"_index":1791,"title":{},"body":{"index.html":{}}}],["response",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["response.interceptor",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":1031,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:17",{"_index":1038,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:6",{"_index":1034,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.status(exception.getstatus()).send",{"_index":1185,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["results",{"_index":116,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":557,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1377,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retry",{"_index":766,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["retry_delay",{"_index":731,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["retrying",{"_index":770,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["return",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1290,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":1344,"title":{"entities/Review.html":{}},"body":{"entities/Product.html":{},"entities/Review.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["review.product",{"_index":1345,"title":{},"body":{"entities/Product.html":{}}}],["reviews",{"_index":1329,"title":{},"body":{"entities/Product.html":{},"controllers/ReviewsController.html":{},"entities/User.html":{}}}],["reviews.controller",{"_index":1490,"title":{},"body":{"modules/ReviewsModule.html":{}}}],["reviews.service",{"_index":1491,"title":{},"body":{"modules/ReviewsModule.html":{}}}],["reviews.user",{"_index":1575,"title":{},"body":{"entities/User.html":{}}}],["reviews/reviews.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["reviewscontroller",{"_index":1483,"title":{"controllers/ReviewsController.html":{}},"body":{"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"coverage.html":{}}}],["reviewsmodule",{"_index":205,"title":{"modules/ReviewsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReviewsModule.html":{},"modules.html":{},"overview.html":{}}}],["reviewsservice",{"_index":1488,"title":{"injectables/ReviewsService.html":{}},"body":{"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"coverage.html":{},"overview.html":{}}}],["rollback",{"_index":480,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["rollbackerror",{"_index":478,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["route",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["rules",{"_index":1498,"title":{},"body":{"classes/SignInDto.html":{}}}],["run",{"_index":1745,"title":{},"body":{"index.html":{}}}],["runner",{"_index":492,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["runs",{"_index":1764,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1053,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["save",{"_index":977,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["scalable",{"_index":1734,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1206,"title":{},"body":{"entities/Order.html":{}}}],["scheme",{"_index":114,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["secret",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["server",{"_index":1735,"title":{},"body":{"index.html":{}}}],["service",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["set",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductProvider.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(auth_type_key",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout(resolve",{"_index":821,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["setup",{"_index":1742,"title":{},"body":{"index.html":{}}}],["shipped",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shippingaddress",{"_index":791,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{}}}],["side",{"_index":1736,"title":{},"body":{"index.html":{}}}],["sign",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":307,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto})@apiresponse({status",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinprovider",{"_index":363,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":1128,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["signtoken(userid",{"_index":1132,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["simple",{"_index":1337,"title":{},"body":{"entities/Product.html":{},"index.html":{}}}],["simply",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["size",{"_index":965,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["skip",{"_index":1280,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["soft",{"_index":548,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AddressesController.html":{},"modules/AddressesModule.html":{},"injectables/AddressesService.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteOrderByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"controllers/ReviewsController.html":{},"modules/ReviewsModule.html":{},"injectables/ReviewsService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateOrderByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":1007,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":1153,"title":{},"body":{"classes/GetUsersParamDto.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["specify",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["split",{"_index":111,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["sponsors",{"_index":1834,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.create.ts",{"_index":1722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.config.ts",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.validation.ts",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/addresses/address.entity.ts",{"_index":131,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/addresses/address.entity.ts:10",{"_index":144,"title":{},"body":{"entities/Address.html":{}}}],["src/addresses/address.entity.ts:16",{"_index":137,"title":{},"body":{"entities/Address.html":{}}}],["src/addresses/address.entity.ts:19",{"_index":141,"title":{},"body":{"entities/Address.html":{}}}],["src/addresses/address.entity.ts:7",{"_index":139,"title":{},"body":{"entities/Address.html":{}}}],["src/addresses/addresses.controller.ts",{"_index":151,"title":{},"body":{"controllers/AddressesController.html":{},"coverage.html":{}}}],["src/addresses/addresses.module.ts",{"_index":170,"title":{},"body":{"modules/AddressesModule.html":{}}}],["src/addresses/addresses.service.ts",{"_index":174,"title":{},"body":{"injectables/AddressesService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.create.ts",{"_index":1657,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":268,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1631,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/config/jwt.config",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constants",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1662,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":583,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1457,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin",{"_index":1493,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:26",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:39",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":121,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/argon2.provider.ts",{"_index":272,"title":{},"body":{"injectables/Argon2Provider.html":{},"coverage.html":{}}}],["src/auth/providers/generate",{"_index":1125,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":881,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1164,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":1167,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":1166,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1460,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1511,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts",{"_index":520,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:21",{"_index":559,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:29",{"_index":536,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:37",{"_index":544,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:45",{"_index":563,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:53",{"_index":555,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:61",{"_index":569,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:69",{"_index":575,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.entity",{"_index":849,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/FindAllProductProvider.html":{},"entities/Product.html":{},"modules/ProductsModule.html":{}}}],["src/categories/categories.entity.ts",{"_index":494,"title":{},"body":{"entities/Categories.html":{},"coverage.html":{}}}],["src/categories/categories.entity.ts:15",{"_index":510,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:21",{"_index":504,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:24",{"_index":514,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:27",{"_index":501,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:30",{"_index":516,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:33",{"_index":503,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.entity.ts:7",{"_index":505,"title":{},"body":{"entities/Categories.html":{}}}],["src/categories/categories.module",{"_index":1419,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/categories/categories.module.ts",{"_index":621,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":633,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:15",{"_index":636,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:34",{"_index":637,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:38",{"_index":638,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:42",{"_index":639,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:46",{"_index":640,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:50",{"_index":641,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:54",{"_index":643,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:58",{"_index":642,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dtos/create",{"_index":652,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"coverage.html":{}}}],["src/categories/dtos/update",{"_index":1536,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/providers/create",{"_index":678,"title":{},"body":{"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"coverage.html":{}}}],["src/categories/providers/delete",{"_index":1067,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{},"coverage.html":{}}}],["src/categories/providers/find",{"_index":1087,"title":{},"body":{"injectables/FindAllCategoriesProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"coverage.html":{}}}],["src/categories/providers/reactivate",{"_index":1439,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{},"coverage.html":{}}}],["src/categories/providers/update",{"_index":1528,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":1030,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1314,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/pagination.interface.ts",{"_index":1255,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1267,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1269,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:38",{"_index":1275,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:8",{"_index":1272,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/utils/bulk",{"_index":434,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"coverage.html":{}}}],["src/common/utils/global",{"_index":1169,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/config/app.config.ts",{"_index":176,"title":{},"body":{"interfaces/AppConfig.html":{},"coverage.html":{}}}],["src/config/database.config.ts",{"_index":1057,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/environment.validation.ts",{"_index":1679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1681,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/orders/dtos/create",{"_index":822,"title":{},"body":{"classes/CreateManyOrdersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"coverage.html":{}}}],["src/orders/enums/order",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/order",{"_index":1213,"title":{},"body":{"entities/OrderItem.html":{},"entities/Product.html":{},"coverage.html":{}}}],["src/orders/order.entity",{"_index":759,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["src/orders/order.entity.ts",{"_index":1192,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:12",{"_index":1211,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:15",{"_index":1199,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:21",{"_index":1200,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:28",{"_index":1202,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:34",{"_index":1208,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:37",{"_index":1197,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:40",{"_index":1209,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:43",{"_index":1195,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:9",{"_index":1196,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":1226,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:14",{"_index":1230,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:19",{"_index":1229,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1241,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/orders.service.ts",{"_index":1245,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/orders.service.ts:16",{"_index":1251,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:20",{"_index":1250,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:9",{"_index":1248,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/create",{"_index":728,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/orders/providers/delete",{"_index":1074,"title":{},"body":{"injectables/DeleteOrderByIdProvider.html":{},"coverage.html":{}}}],["src/orders/providers/update",{"_index":1540,"title":{},"body":{"injectables/UpdateOrderByIdProvider.html":{},"coverage.html":{}}}],["src/products/dtos/create",{"_index":831,"title":{},"body":{"classes/CreateManyProductsDto.html":{},"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dtos/update",{"_index":1547,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/product.entity",{"_index":517,"title":{},"body":{"entities/Categories.html":{},"modules/CategoriesModule.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Review.html":{}}}],["src/products/product.entity.ts",{"_index":1328,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:10",{"_index":1336,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:17",{"_index":1339,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:23",{"_index":1343,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":1335,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:32",{"_index":1331,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:38",{"_index":1347,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:44",{"_index":1338,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:47",{"_index":1346,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:50",{"_index":1341,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:53",{"_index":1332,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:56",{"_index":1348,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:60",{"_index":1334,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1354,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:19",{"_index":1369,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:27",{"_index":1365,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:35",{"_index":1378,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:43",{"_index":1381,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:51",{"_index":1383,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:59",{"_index":1387,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:67",{"_index":1373,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":631,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/products/products.module.ts",{"_index":1415,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1421,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:15",{"_index":1423,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:34",{"_index":1426,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:38",{"_index":1425,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:42",{"_index":1428,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:46",{"_index":1429,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:50",{"_index":1427,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:54",{"_index":1431,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:58",{"_index":1430,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/create",{"_index":836,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/delete",{"_index":1076,"title":{},"body":{"injectables/DeleteProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/find",{"_index":1093,"title":{},"body":{"injectables/FindAllProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/reactivate",{"_index":1446,"title":{},"body":{"injectables/ReactivateProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/update",{"_index":1541,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{},"coverage.html":{}}}],["src/reviews/review.entity",{"_index":1350,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["src/reviews/review.entity.ts",{"_index":1471,"title":{},"body":{"entities/Review.html":{},"coverage.html":{}}}],["src/reviews/review.entity.ts:11",{"_index":1482,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/review.entity.ts:14",{"_index":1479,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/review.entity.ts:21",{"_index":1480,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/review.entity.ts:24",{"_index":1475,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/review.entity.ts:27",{"_index":1476,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/review.entity.ts:8",{"_index":1477,"title":{},"body":{"entities/Review.html":{}}}],["src/reviews/reviews.controller.ts",{"_index":1484,"title":{},"body":{"controllers/ReviewsController.html":{},"coverage.html":{}}}],["src/reviews/reviews.module.ts",{"_index":1489,"title":{},"body":{"modules/ReviewsModule.html":{}}}],["src/reviews/reviews.service.ts",{"_index":1492,"title":{},"body":{"injectables/ReviewsService.html":{},"coverage.html":{}}}],["src/users/dtos/create",{"_index":859,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":1151,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":1321,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":867,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"coverage.html":{}}}],["src/users/providers/delete",{"_index":1081,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1106,"title":{},"body":{"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/reactivate",{"_index":1452,"title":{},"body":{"injectables/ReactivateUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/update",{"_index":1550,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/user.entity",{"_index":145,"title":{},"body":{"entities/Address.html":{},"injectables/GenerateTokentProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Review.html":{}}}],["src/users/user.entity.ts",{"_index":1562,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:16",{"_index":1568,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1570,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":1567,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":1574,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":1563,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1572,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:52",{"_index":1576,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":1564,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:58",{"_index":1577,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:62",{"_index":1566,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1569,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1580,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:19",{"_index":1594,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":1598,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":1592,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:66",{"_index":1593,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":1627,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1466,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/users.service.ts",{"_index":1633,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:16",{"_index":1636,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1640,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":1641,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":1642,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1638,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1637,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":1645,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":1639,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":1644,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":921,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1749,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1750,"title":{},"body":{"index.html":{}}}],["started",{"_index":1728,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1740,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1186,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":1819,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1763,"title":{},"body":{"index.html":{}}}],["stock",{"_index":935,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["stored",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":1778,"title":{},"body":{"index.html":{}}}],["string",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"entities/Categories.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"entities/Product.html":{},"classes/RefreshTokenDto.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string's",{"_index":967,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["string'})@isnotempty({message",{"_index":1503,"title":{},"body":{"classes/SignInDto.html":{}}}],["structure",{"_index":1496,"title":{},"body":{"classes/SignInDto.html":{}}}],["sub",{"_index":125,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["successful",{"_index":808,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["successfully",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["successfully.'})@apiresponse({status",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["successfully.'})@auth(authtype.none",{"_index":1364,"title":{},"body":{"controllers/ProductsController.html":{}}}],["summary",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1798,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1850,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["switch",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["t",{"_index":465,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/GenerateTokentProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1685,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1684,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":588,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["tagging",{"_index":1391,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["take",{"_index":1281,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["takes",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{}}}],["tap",{"_index":1052,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["test",{"_index":1753,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covdeployment",{"_index":1756,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1755,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1751,"title":{},"body":{"index.html":{}}}],["text",{"_index":134,"title":{},"body":{"entities/Address.html":{},"entities/Categories.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Review.html":{}}}],["thanks",{"_index":1833,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":195,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":427,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.categoriesrepository.find",{"_index":1089,"title":{},"body":{"injectables/FindAllCategoriesProvider.html":{}}}],["this.categoriesrepository.findone({where",{"_index":1442,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{}}}],["this.categoriesrepository.findoneby",{"_index":853,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/FindCategoryByIdProvider.html":{}}}],["this.categoriesrepository.preload",{"_index":1532,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{}}}],["this.categoriesrepository.save(category",{"_index":1445,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{}}}],["this.categoriesrepository.save(existingcategory",{"_index":1535,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{}}}],["this.categoriesrepository.softdelete(id",{"_index":1072,"title":{},"body":{"injectables/DeleteCategoryByIdProvider.html":{}}}],["this.categoriesrespository.create(createcategorydto",{"_index":693,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["this.categoriesrespository.findoneby",{"_index":687,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["this.categoriesrespository.save(category",{"_index":694,"title":{},"body":{"injectables/CreateCategoryProvider.html":{}}}],["this.categoriesservice.createcategory(createcategorydto",{"_index":596,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.createmanycategories(createmanycategoriesdto",{"_index":598,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategorybyid(id",{"_index":604,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findallcategories",{"_index":594,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findcategorybyid(id",{"_index":601,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.reactivatecategorybyid(id",{"_index":607,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategorybyid(updatecategorydto",{"_index":610,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.configservice.get('appconfig",{"_index":1054,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createcategory(queryrunner",{"_index":717,"title":{},"body":{"injectables/CreateManyCategoriesProvider.html":{}}}],["this.createcategoryprovider.createcategory(createcategorydto",{"_index":644,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.createmanycategoryprovider.createmanycategoriesprovider(createmanycategoriesdto",{"_index":645,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.createmanyorderprovider.createmanyordersprovider(createmanyorderdto",{"_index":1253,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createmanyproductsprovider.createmanyproductsprovider(createmanyproducts",{"_index":1433,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createmanyusersprovider.createmanyusers(createmanyusersdto",{"_index":1650,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createorderitems(orderitems",{"_index":800,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["this.createorderprovider.createorder(createorderdto",{"_index":1252,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createproduct(queryrunner",{"_index":851,"title":{},"body":{"injectables/CreateManyProductsProvider.html":{}}}],["this.createproductprovider.createproductsprovider(productdto",{"_index":1432,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createuser(queryrunner",{"_index":889,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["this.createusersprovider.createuser(createuserdto",{"_index":1649,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":466,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["this.deletecategorybyidprovider.deletecategorybyid(id",{"_index":646,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.deleteproductbyidprovider.deleteproductbyidprovider(id",{"_index":1436,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.deleteuserbyidprovider.deleteuserbyid(number(id",{"_index":1652,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.extracttokenfromheader(request",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findallcategoriesprovider.findallcategoriesprovider",{"_index":647,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.findallproductprovider.findallproductprovider(category",{"_index":1434,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findallusersprovider.findalluserprovider",{"_index":1646,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findcategorybyidprovider.findcategorybyidprovider(id",{"_index":648,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.findonebyemailprovider.findonebyemailprovider(email",{"_index":1647,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyidprovider.finduserbyidprovider(number(id",{"_index":1648,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findproductbyidprovider.findproductbyidprovider(id",{"_index":1435,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1470,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.handletransactionerror(queryrunner",{"_index":474,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["this.hashingprovider.comparepassword(password",{"_index":1526,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":1027,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["this.hashingprovider.hashpassword(patchuserdto.password",{"_index":1557,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["this.hashingprovider.hashpassword(user.password",{"_index":887,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["this.isdeadlockerror(error",{"_index":814,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["this.jwtconfiguration",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1145,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1139,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1141,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1149,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1142,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1137,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtservice.verifyasync>(refreshtokendto.refreshtoken",{"_index":1468,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.ordersservice.createmanyorder(createmanyorderdto",{"_index":1237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.createorder(createorderdto",{"_index":1235,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.productrepository.create",{"_index":978,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productrepository.find(options",{"_index":1103,"title":{},"body":{"injectables/FindAllProductProvider.html":{}}}],["this.productrepository.findby",{"_index":785,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["this.productrepository.findone({where",{"_index":1448,"title":{},"body":{"injectables/ReactivateProductByIdProvider.html":{}}}],["this.productrepository.findoneby",{"_index":927,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{}}}],["this.productrepository.preload",{"_index":1544,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{}}}],["this.productrepository.save(existingproduct",{"_index":1546,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{}}}],["this.productrepository.save(product",{"_index":979,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{}}}],["this.productrepository.softdelete(id",{"_index":1079,"title":{},"body":{"injectables/DeleteProductByIdProvider.html":{}}}],["this.productservice.createmanyproducts(createmanyproductdto",{"_index":1397,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.createproducts(productdto",{"_index":1395,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.deleteproductbyid(id",{"_index":1410,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.findallproducts(category",{"_index":1400,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.findproductbyid(id",{"_index":1403,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.reactivateproductbyid(id",{"_index":1405,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productservice.updateproductbyid(updateproductdto",{"_index":1408,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reactivatecategorybyidprovider.reactivatecategorybyidprovider(id",{"_index":650,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.reactivateproductbyidprovider.reactivateproductbyidprovider(id",{"_index":1438,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.reactivateuserbyidprovider.reactivateuserbyidprovider(number(id",{"_index":1653,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":422,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.releasequeryrunner(queryrunner",{"_index":476,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{}}}],["this.request.protocol}://${this.request.hostname",{"_index":1306,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1144,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["this.signtoken(user.id",{"_index":1148,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["this.updatecategorybyidprovider.updatecategorybyidprovider(updatecategorydto",{"_index":649,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.updateproductbyidprovider.updateproductbyidprovider(updateproductdto",{"_index":1437,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.updateuserbyidprovider.updateuserbyid(patchuserdto",{"_index":1651,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findby",{"_index":779,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["this.userrepository.findoneby",{"_index":924,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.usersrepository.create",{"_index":1028,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["this.usersrepository.find",{"_index":1110,"title":{},"body":{"injectables/FindAllUsersProvider.html":{}}}],["this.usersrepository.findone",{"_index":1454,"title":{},"body":{"injectables/ReactivateUserByIdProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":1024,"title":{},"body":{"injectables/CreateUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{}}}],["this.usersrepository.preload",{"_index":1559,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":1029,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["this.usersrepository.save(user",{"_index":1456,"title":{},"body":{"injectables/ReactivateUserByIdProvider.html":{}}}],["this.usersrepository.save(usertoupdate",{"_index":1561,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["this.usersrepository.softdelete(id",{"_index":1084,"title":{},"body":{"injectables/DeleteUserByIdProvider.html":{}}}],["this.usersservice.createmanyusers(createmanyusersdto",{"_index":1617,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1615,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(id",{"_index":1621,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findallusers",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(email",{"_index":1611,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1519,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebyid(id",{"_index":1613,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1469,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.reactivateuserbyid(id",{"_index":1623,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuserbyid(patchuserdto",{"_index":1619,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.verifypassword(signindto.password",{"_index":1522,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["through",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["throws",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["time",{"_index":1813,"title":{},"body":{"index.html":{}}}],["timer",{"_index":922,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["timestamp",{"_index":1188,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["toboolean",{"_index":1059,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(process.env.database_autoload",{"_index":1066,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["toboolean(process.env.database_sync",{"_index":1065,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["token",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["token.dto",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":1458,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":1459,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:36",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:65",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.bearer)@apioperation({summary",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens'})@apibody({type",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":370,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1126,"title":{},"body":{"injectables/GenerateTokentProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1463,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:15",{"_index":1134,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["tokens.provider.ts:24",{"_index":1464,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":1131,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["tokens.provider.ts:8",{"_index":1129,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["total",{"_index":802,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/PaginationProvider.html":{}}}],["totalamount",{"_index":797,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"entities/Order.html":{}}}],["totalitems",{"_index":1259,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1261,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1840,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":809,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["transfer",{"_index":1494,"title":{},"body":{"classes/SignInDto.html":{}}}],["transformer",{"_index":703,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Product.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transforms",{"_index":1162,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["true",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"entities/Categories.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateProductDto.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1)@arraymaxsize(5)@maxlength(1025",{"_index":948,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["true})@isnotempty()@isarray()@validatenested({each",{"_index":825,"title":{},"body":{"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{}}}],["true})@type(undefined",{"_index":700,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{}}}],["try",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["twitter",{"_index":1846,"title":{},"body":{"index.html":{}}}],["type",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"injectables/CreateManyProductsProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":1184,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["typeorm",{"_index":147,"title":{},"body":{"entities/Address.html":{},"injectables/BulkCreateProvider.html":{},"entities/Categories.html":{},"injectables/CreateCategoryProvider.html":{},"injectables/CreateManyCategoriesProvider.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyProductsProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllCategoriesProvider.html":{},"injectables/FindAllProductProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"entities/Review.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([categories",{"_index":632,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1244,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1420,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1632,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyOrdersDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1739,"title":{},"body":{"index.html":{}}}],["ui",{"_index":591,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('invalid",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('no",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('password",{"_index":1524,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('unauthorized",{"_index":432,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["unauthorizedexception('user",{"_index":1520,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(`guard",{"_index":429,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["unauthorizedexception(error",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CreateCategoryProvider.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateProductDto.html":{},"interfaces/DatabaseConfig.html":{},"injectables/DeleteCategoryByIdProvider.html":{},"injectables/DeleteProductByIdProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindCategoryByIdProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"injectables/UpdateProductByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"miscellaneous/variables.html":{}}}],["undefined})@auth(authtype.none",{"_index":543,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["under",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":509,"title":{},"body":{"entities/Categories.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{}}}],["unit",{"_index":1752,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/RefreshTokensProvider.html":{}}}],["unlicensed",{"_index":1859,"title":{},"body":{"properties.html":{}}}],["update",{"_index":573,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ProductsController.html":{},"classes/UpdateCategoryDto.html":{},"controllers/UsersController.html":{}}}],["updateat",{"_index":1194,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{}}}],["updatecategorybyid",{"_index":527,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorybyid(@body",{"_index":609,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorybyid(updatecategorydto",{"_index":570,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorybyidprovider",{"_index":620,"title":{"injectables/UpdateCategoryByIdProvider.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updatecategorybyidprovider(updatecategorydto",{"_index":1530,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{}}}],["updatecategorydto",{"_index":571,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/UpdateCategoryByIdProvider.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.id",{"_index":1533,"title":{},"body":{"injectables/UpdateCategoryByIdProvider.html":{}}}],["updated",{"_index":574,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":498,"title":{},"body":{"entities/Categories.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":515,"title":{},"body":{"entities/Categories.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updateorderbyidprovider",{"_index":1240,"title":{"injectables/UpdateOrderByIdProvider.html":{}},"body":{"modules/OrdersModule.html":{},"injectables/UpdateOrderByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateproductbyid",{"_index":1361,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["updateproductbyid(@body",{"_index":1407,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproductbyid(updateproductdto",{"_index":1384,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["updateproductbyidprovider",{"_index":1414,"title":{"injectables/UpdateProductByIdProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductByIdProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateproductbyidprovider(updateproductdto",{"_index":1542,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{}}}],["updateproductdto",{"_index":1385,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductByIdProvider.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.id",{"_index":1545,"title":{},"body":{"injectables/UpdateProductByIdProvider.html":{}}}],["updates",{"_index":1821,"title":{},"body":{"index.html":{}}}],["updateuserbyid",{"_index":1551,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserbyid(@body",{"_index":1618,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(patchuserdto",{"_index":1553,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserbyidprovider",{"_index":1549,"title":{"injectables/UpdateUserByIdProvider.html":{}},"body":{"injectables/UpdateUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":1304,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["url(this.request.url",{"_index":1308,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":943,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["usage",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":864,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":1285,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["usefactory",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":1043,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["user",{"_index":23,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/CreateManyOrderProvider.html":{},"injectables/CreateManyUsersProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/GenerateTokentProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"classes/PatchUserDto.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/RefreshTokensProvider.html":{},"entities/Review.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":984,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["user'})@apibody({type",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiresponse({status",{"_index":1591,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.address",{"_index":143,"title":{},"body":{"entities/Address.html":{}}}],["user.decorator.ts",{"_index":1664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.deletedat",{"_index":1455,"title":{},"body":{"injectables/ReactivateUserByIdProvider.html":{}}}],["user.dto",{"_index":863,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUsersProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":981,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":1327,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:15",{"_index":991,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":994,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":988,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:50",{"_index":1009,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":986,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1146,"title":{},"body":{"injectables/GenerateTokentProvider.html":{}}}],["user.entity",{"_index":879,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":794,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/GenerateTokentProvider.html":{}}}],["user.orders",{"_index":1210,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":886,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.reviews",{"_index":1481,"title":{},"body":{"entities/Review.html":{}}}],["user?.[field",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user@example.com",{"_index":1505,"title":{},"body":{"classes/SignInDto.html":{}}}],["user@example.com'})@isemail",{"_index":1500,"title":{},"body":{"classes/SignInDto.html":{}}}],["user\\'s",{"_index":1012,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["userid",{"_index":790,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GenerateTokentProvider.html":{}}}],["username",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["userrepository",{"_index":736,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["users",{"_index":778,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/FindAllUsersProvider.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1628,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":880,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":860,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:16",{"_index":862,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.find(user",{"_index":793,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{}}}],["users.provider",{"_index":1630,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.provider.ts",{"_index":868,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{},"injectables/CreateUsersProvider.html":{},"injectables/FindAllUsersProvider.html":{},"coverage.html":{}}}],["users.provider.ts:13",{"_index":1109,"title":{},"body":{"injectables/FindAllUsersProvider.html":{}}}],["users.provider.ts:14",{"_index":873,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["users.provider.ts:17",{"_index":1022,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["users.provider.ts:39",{"_index":876,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["users.provider.ts:48",{"_index":877,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["users.provider.ts:56",{"_index":878,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["users.provider.ts:7",{"_index":1108,"title":{},"body":{"injectables/FindAllUsersProvider.html":{}}}],["users.provider.ts:8",{"_index":871,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["users.provider.ts:9",{"_index":1019,"title":{},"body":{"injectables/CreateUsersProvider.html":{}}}],["users.service",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":764,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"injectables/CreateOrderProvider.html":{}}}],["users/users.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1579,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":206,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1020,"title":{},"body":{"injectables/CreateUsersProvider.html":{},"injectables/DeleteUserByIdProvider.html":{},"injectables/FindAllUsersProvider.html":{},"injectables/FindOneByEmailProvider.html":{},"injectables/FindOneByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{},"injectables/UpdateUserByIdProvider.html":{}}}],["usersservice",{"_index":1462,"title":{"injectables/UsersService.html":{}},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstocreate",{"_index":882,"title":{},"body":{"injectables/CreateManyUsersProvider.html":{}}}],["usertoupdate",{"_index":1558,"title":{},"body":{"injectables/UpdateUserByIdProvider.html":{}}}],["uses",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{}}}],["using",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["valid",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/SignInDto.html":{}}}],["valid('development",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":966,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validatenested",{"_index":702,"title":{},"body":{"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{}}}],["validates",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GetUsersParamDto.html":{}}}],["validation",{"_index":1497,"title":{},"body":{"classes/SignInDto.html":{}}}],["validationschema",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":670,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateManyCategoriesDto.html":{},"classes/CreateManyOrdersDto.html":{},"classes/CreateManyProductsDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrderItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["value",{"_index":755,"title":{},"body":{"injectables/CreateManyOrderProvider.html":{},"interfaces/DatabaseConfig.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":506,"title":{},"body":{"entities/Categories.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["variable",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1860,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verify",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verifying",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verifypassword",{"_index":1513,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["verifypassword(password",{"_index":1517,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["version",{"_index":1042,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"properties.html":{}}}],["video",{"_index":1806,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1795,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1809,"title":{},"body":{"index.html":{}}}],["void",{"_index":450,"title":{},"body":{"injectables/BulkCreateProvider.html":{},"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":1747,"title":{},"body":{"index.html":{}}}],["website",{"_index":1844,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":1443,"title":{},"body":{"injectables/ReactivateCategoryByIdProvider.html":{},"injectables/ReactivateProductByIdProvider.html":{},"injectables/ReactivateUserByIdProvider.html":{}}}],["working",{"_index":1794,"title":{},"body":{"index.html":{}}}],["world",{"_index":270,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1823,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1097,"title":{},"body":{"injectables/FindAllProductProvider.html":{},"injectables/GenerateTokentProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["you'd",{"_index":1837,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1757,"title":{},"body":{"index.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_",{"_index":1001,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":1000,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":167,"title":{},"body":{"modules/AddressesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/ReviewsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard verifies the presence of a valid Bearer token in the request headers.\nIt validates the token using the configured JWT secret and then extracts the user data\nfrom the token payload. If the token is invalid, it throws an UnauthorizedException.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            Construct an instance of the access token guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe JWT service for verifying the token.\n\n\n                                                        \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration for the JWT service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:36\n                        \n                    \n\n\n            \n                \n                        Verifies the presence of a valid Bearer token in the request headers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A boolean indicating if the request is authorized.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: FastifyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:65\n                        \n                    \n\n\n            \n                \n                        Extract the Bearer token from the request headers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The extracted token or undefined if the token is not present.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { FastifyRequest } from 'fastify';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\nimport { ConfigType } from '@nestjs/config';\n\n\n/**\n * This guard verifies the presence of a valid Bearer token in the request headers.\n * It validates the token using the configured JWT secret and then extracts the user data\n * from the token payload. If the token is invalid, it throws an UnauthorizedException.\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n    /**\n     * Construct an instance of the access token guard.\n     *\n     * @param jwtService - The JWT service for verifying the token.\n     * @param jwtConfiguration - The configuration for the JWT service.\n     */\n    constructor(\n      private readonly jwtService: JwtService,\n\n      @Inject(jwtConfig.KEY)\n      private readonly jwtConfiguration: ConfigType,\n    ) {}\n\n    /**\n     * Verifies the presence of a valid Bearer token in the request headers.\n     *\n     * @param context - The execution context.\n     * @returns A boolean indicating if the request is authorized.\n     */\n    async canActivate(context: ExecutionContext): Promise {\n      const request = context.switchToHttp().getRequest();\n\n      // Get the token from the request headers.\n      const token = this.extractTokenFromHeader(request);\n\n      // If the token is not present, throw an UnauthorizedException.\n      if (!token) {\n        throw new UnauthorizedException('No token provided');\n      }\n\n      try {\n        // Verify the token using the configured JWT secret.\n        const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration);\n        // Set the user data in the request object.\n        request[REQUEST_USER_KEY] = payload;\n      } catch (error) {\n        // If the token is invalid, throw an UnauthorizedException.\n        throw new UnauthorizedException('Invalid token');\n      }\n      return true;\n    }\n\n    /**\n     * Extract the Bearer token from the request headers.\n     *\n     * @param request - The request object.\n     * @returns The extracted token or undefined if the token is not present.\n     */\n    private extractTokenFromHeader(request: FastifyRequest): string | undefined {\n      const authHeader = request.headers.authorization;\n      if (!authHeader?.startsWith('Bearer ')) return undefined;\n\n      // Split the authorization header into the scheme and token.\n      const [, token] = authHeader.split(' ');\n      return token;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    // ID of the user \n    sub: number;\n    // Email of the user\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/addresses/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/addresses/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/addresses/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/addresses/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/addresses/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from \"src/users/user.entity\";\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Address {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @ManyToOne(() => User, (user) => user.address)\n    user: User;\n\n    @Column({\n        type: 'text',\n        nullable: false,\n    })\n    address: string;\n\n    @Column()\n    type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AddressesController.html":{"url":"controllers/AddressesController.html","title":"controller - AddressesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AddressesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/addresses/addresses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                addresses\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('addresses')\nexport class AddressesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AddressesModule.html":{"url":"modules/AddressesModule.html","title":"module - AddressesModule","body":"\n                   \n\n\n\n\n    Modules\n    AddressesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AddressesModule\n\n\n\ncluster_AddressesModule_providers\n\n\n\n\nAddressesService\n\nAddressesService\n\n\n\nAddressesModule\n\nAddressesModule\n\nAddressesModule -->\n\nAddressesService->AddressesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/addresses/addresses.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddressesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AddressesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AddressesController } from './addresses.controller';\nimport { AddressesService } from './addresses.service';\n\n@Module({\n  controllers: [AddressesController],\n  providers: [AddressesService]\n})\nexport class AddressesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddressesService.html":{"url":"injectables/AddressesService.html","title":"injectable - AddressesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddressesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/addresses/addresses.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AddressesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppConfig.html":{"url":"interfaces/AppConfig.html","title":"interface - AppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiVersion\n                                        \n                                \n                                \n                                        \n                                            appName\n                                        \n                                \n                                \n                                        \n                                            environment\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiVersion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiVersion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        appName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        environment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        environment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from \"@nestjs/config\";\n\ninterface AppConfig {\n    environment: string;\n    appName: string;\n    apiVersion: string;\n}\n\nexport default registerAs(\n    'appConfig', () => ({\n        environment: process.env.NODE_ENV || 'production',\n        appName: process.env.APP_NAME || 'ecommerce-api',\n        apiVersion: process.env.API_VERSION || '1.0.0',\n    }))\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAddressesModule\n\nAddressesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAddressesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nReviewsModule\n\nReviewsModule\n\nAppModule -->\n\nReviewsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AddressesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            ReviewsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ProductsModule } from './products/products.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { OrdersModule } from './orders/orders.module';\nimport { UsersModule } from './users/users.module';\nimport { ReviewsModule } from './reviews/reviews.module';\nimport { AddressesModule } from './addresses/addresses.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response.interceptor';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [\n    ProductsModule, \n    CategoriesModule, \n    OrdersModule, \n    UsersModule, \n    ReviewsModule, \n    AddressesModule, \n    AuthModule,\n    ConfigModule.forRoot({ \n      isGlobal: true ,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        autoLoadEntities: configService.get('databaseConfig.autoloadEntities'),\n        synchronize: configService.get('databaseConfig.synchronize'),\n        host: configService.get('databaseConfig.host'),\n        port: +configService.get('databaseConfig.port'),\n        username: configService.get('databaseConfig.username'),\n        password: configService.get('databaseConfig.password'),\n        database: configService.get('databaseConfig.database_name'),\n        // logging: true,\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Argon2Provider.html":{"url":"injectables/Argon2Provider.html","title":"injectable - Argon2Provider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Argon2Provider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/argon2.provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            HashingProvider\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         HashingProvider\n\n                        \n                    \n                    \n                        \n                                Defined in         HashingProvider:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Inherited from         HashingProvider\n\n                        \n                    \n                    \n                        \n                                Defined in         HashingProvider:8\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport * as argon2 from \"argon2\";\nimport { HashingProvider } from \"./hashing.provider\";\n\n\n@Injectable()\nexport class Argon2Provider extends HashingProvider {\n    public async hashPassword(password: string | Buffer): Promise {\n        return argon2.hash(password);\n    }\n\n    public async comparePassword(password: string, hash: string): Promise {\n        return argon2.verify(hash, password);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.Bearer)@ApiOperation({summary: 'Refresh user tokens'})@ApiBody({type: RefreshTokenDto})@ApiResponse({status: undefined, description: 'Tokens refreshed successfully.'})@ApiResponse({status: undefined, description: 'Refresh token invalid.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)@ApiOperation({summary: 'Sign in a user'})@ApiBody({type: SignInDto})@ApiResponse({status: undefined, description: 'User signed in successfully.'})@ApiResponse({status: undefined, description: 'Invalid credentials.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin-dto';\nimport { AuthType } from './enums/auth-type.enum';\nimport { Auth } from './decorators/auth.decorator';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\nimport { ApiTags, ApiOperation, ApiBody, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('auth') // Grouping this controller under 'auth' in Swagger\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly authService: AuthService,\n    ) {}\n\n    @Post('signin')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.None)\n    @ApiOperation({ summary: 'Sign in a user' }) // Description of what this endpoint does\n    @ApiBody({ type: SignInDto }) // Specify the body type for the request\n    @ApiResponse({ status: HttpStatus.OK, description: 'User signed in successfully.' }) // Response description\n    @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Invalid credentials.' }) // Response for unauthorized access\n    public async signIn(@Body() signInDto: SignInDto) {\n        return await this.authService.signIn(signInDto);\n    }\n\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.Bearer)\n    @ApiOperation({ summary: 'Refresh user tokens' }) // Description of what this endpoint does\n    @ApiBody({ type: RefreshTokenDto }) // Specify the body type for the request\n    @ApiResponse({ status: HttpStatus.OK, description: 'Tokens refreshed successfully.' }) // Response description\n    @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Refresh token invalid.' }) // Response for forbidden access\n    public async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n        return await this.authService.refreshTokens(refreshTokenDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokentProvider\n\nGenerateTokentProvider\n\nAuthModule -->\n\nGenerateTokentProvider->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokentProvider\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { Argon2Provider } from './providers/argon2.provider';\nimport { GenerateTokentProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n\n@Module({\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: Argon2Provider,\n    },\n    SignInProvider,\n    RefreshTokensProvider,\n    GenerateTokentProvider\n  ],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  exports: [\n    AuthService,\n    HashingProvider,\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { SignInDto } from './dtos/signin-dto';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly signInProvider: SignInProvider,\n        private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n    public async signIn(signInDto: SignInDto) {\n        try {\n            return await this.signInProvider.signIn(signInDto);\n        } catch (error) {\n            throw new UnauthorizedException(error);\n        }\n    };\n\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    A guard that handles authentication based on the configured auth types.\nThis guard takes into account the auth types specified in the route handlers\nand controllers. It uses the AccessTokenGuard to handle the Bearer auth type.\nIf no auth type is specified, or if the auth type is None, this guard will\nsimply allow the request to pass through.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:39\n                        \n                    \n\n\n            \n                \n                        Checks if the request is authenticated based on the configured auth types.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating if the request is authenticated.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { AccessTokenGuard } from './../access-token/access-token.guard';\nimport { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n/**\n * A guard that handles authentication based on the configured auth types.\n *\n * @remarks\n * This guard takes into account the auth types specified in the route handlers\n * and controllers. It uses the {@link AccessTokenGuard} to handle the `Bearer` auth type.\n * If no auth type is specified, or if the auth type is `None`, this guard will\n * simply allow the request to pass through.\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.None;\n\n  /**\n   * A mapping of auth types to their corresponding guards.\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * Checks if the request is authenticated based on the configured auth types.\n   *\n   * @param context - The execution context.\n   * @returns A promise that resolves to a boolean indicating if the request is authenticated.\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [context.getHandler(), context.getClass()]) || [AuthenticationGuard.defaultAuthType];\n    const guards = authTypes.flatMap((type) => this.authTypeGuardMap[type]);\n\n    for (const guard of guards) {\n      try {\n        if (await guard.canActivate(context)) {\n          return true;\n        }\n      } catch (error) {\n        throw new UnauthorizedException(`Guard ${guard.constructor.name} failed`, error);\n      }\n    }\n    throw new UnauthorizedException('Unauthorized');\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BulkCreateProvider.html":{"url":"injectables/BulkCreateProvider.html","title":"injectable - BulkCreateProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BulkCreateProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/bulk-create-provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Protected\n                                    Async\n                                handleTransactionError\n                            \n                            \n                                    Protected\n                                    Async\n                                releaseQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/common/utils/bulk-create-provider.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyDto: literal type, entity: EntityTarget, createFn: (item: Partial,queryRunner: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/utils/bulk-create-provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                        EntityTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        handleTransactionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTransactionError(queryRunner: any, error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/utils/bulk-create-provider.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        releaseQueryRunner\n                        \n                    \n                \n            \n            \n                \n                        \n                    releaseQueryRunner(queryRunner: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/utils/bulk-create-provider.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { DataSource, EntityTarget, ObjectLiteral } from 'typeorm';\n\n@Injectable()\nexport class BulkCreateProvider {\n    constructor(\n        protected readonly dataSource: DataSource,\n    ) {}\n\n    public async createMany(createManyDto: { items: Partial[] }, entity: EntityTarget, \n        createFn: (item: Partial, queryRunner: any) => Promise): Promise {\n        const createdItems: T[] = [];\n        const queryRunner = this.dataSource.createQueryRunner();\n\n        await queryRunner.connect();\n        await queryRunner.startTransaction();\n\n        try {\n            for (const itemDto of createManyDto.items) {\n                const item = await createFn(itemDto, queryRunner);\n                createdItems.push(item);\n            }\n\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await this.handleTransactionError(queryRunner, error);\n        } finally {\n            await this.releaseQueryRunner(queryRunner);\n        }\n\n        return createdItems;\n    }\n\n    protected async handleTransactionError(queryRunner: any, error: any): Promise {\n        try {\n            await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {\n            throw new RequestTimeoutException(rollbackError.message || 'Rollback failed');\n        }\n        // Optionally, you can log the original error here\n        throw new ConflictException('Transaction failed', error.message);\n    }\n\n    protected async releaseQueryRunner(queryRunner: any): Promise {\n        try {\n            await queryRunner.release();\n        } catch (releaseError) {\n            throw new RequestTimeoutException(releaseError.message || 'Failed to release query runner');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Categories.html":{"url":"entities/Categories.html","title":"entity - Categories","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Categories\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                products\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Product } from \"src/products/product.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Categories {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 255,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: 'text',\n        nullable: false\n    })\n    description: string;\n\n    @OneToMany(() => Product, (product) => product.category)\n    products: Product[];\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @DeleteDateColumn()\n    deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createManyCategories\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findAllCategories\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findCategoryById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                reactivateCategoryById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateCategoryById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new category'})@ApiResponse({status: 201, description: 'Category successfully created', type: Categories})@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createManyCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyCategories(createManyCategoriesDto: CreateManyCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@ApiOperation({summary: 'Create multiple categories'})@ApiResponse({status: 201, description: 'Categories successfully created', type: undefined})@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyCategoriesDto\n                                            \n                                                            CreateManyCategoriesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategoryById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/soft-delete/:id')@ApiOperation({summary: 'Soft delete a category by ID'})@ApiResponse({status: 200, description: 'Category successfully deleted'})@ApiResponse({status: 404, description: 'Category not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        findAllCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Retrieve all categories'})@ApiResponse({status: 200, description: 'List of categories', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        findCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCategoryById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id')@ApiOperation({summary: 'Retrieve a category by ID'})@ApiResponse({status: 200, description: 'Category found', type: Categories})@ApiResponse({status: 404, description: 'Category not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        reactivateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateCategoryById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/reactivate/:id')@ApiOperation({summary: 'Reactivate a soft-deleted category by ID'})@ApiResponse({status: 200, description: 'Category successfully reactivated', type: Categories})@ApiResponse({status: 404, description: 'Category not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategoryById(updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')@ApiOperation({summary: 'Update a category by ID'})@ApiResponse({status: 200, description: 'Category successfully updated', type: Categories})@ApiResponse({status: 404, description: 'Category not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreateManyCategoriesDto } from './dtos/create-many-category.dto';\nimport { CreateCategoryDto } from './dtos/create-category.dto';\nimport { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Categories } from './categories.entity';\nimport { UpdateCategoryDto } from './dtos/update-category.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\n\n@ApiTags('Categories') // Tag for categorizing the endpoints in Swagger UI\n@Controller('categories')\nexport class CategoriesController {\n    constructor(\n        private readonly categoriesService: CategoriesService\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Retrieve all categories' }) // Description for this operation\n    @ApiResponse({ status: 200, description: 'List of categories', type: [Categories] })\n    public async findAllCategories() : Promise {\n        return await this.categoriesService.findAllCategories();\n    }\n\n    @Post('create')\n    @ApiOperation({ summary: 'Create a new category' })\n    @ApiResponse({ status: 201, description: 'Category successfully created', type: Categories })\n    @Auth(AuthType.None)\n    public async createCategory(@Body() createCategoryDto: CreateCategoryDto) {\n        return this.categoriesService.createCategory(createCategoryDto);\n    }\n\n    @Post('create-many')\n    @ApiOperation({ summary: 'Create multiple categories' })\n    @ApiResponse({ status: 201, description: 'Categories successfully created', type: [Categories] })\n    @Auth(AuthType.None)\n    public async createManyCategories(@Body() createManyCategoriesDto: CreateManyCategoriesDto) {\n        return await this.categoriesService.createManyCategories(createManyCategoriesDto);\n    }\n\n    @Get('/id/:id')\n    @ApiOperation({ summary: 'Retrieve a category by ID' })\n    @ApiResponse({ status: 200, description: 'Category found', type: Categories })\n    @ApiResponse({ status: 404, description: 'Category not found' })\n    public async findCategoryById(@Param('id') id: number) : Promise {\n        return await this.categoriesService.findCategoryById(id);\n    }\n\n    @Delete('/soft-delete/:id')\n    @ApiOperation({ summary: 'Soft delete a category by ID' })\n    @ApiResponse({ status: 200, description: 'Category successfully deleted'})\n    @ApiResponse({ status: 404, description: 'Category not found' })\n    public async deleteCategoryById(@Param('id') id: number) : Promise {\n        return await this.categoriesService.deleteCategoryById(id);\n    }\n\n    @Put('/reactivate/:id')\n    @ApiOperation({ summary: 'Reactivate a soft-deleted category by ID' })\n    @ApiResponse({ status: 200, description: 'Category successfully reactivated', type: Categories })\n    @ApiResponse({ status: 404, description: 'Category not found' })\n    public async reactivateCategoryById(@Param('id') id: number) : Promise {\n        return await this.categoriesService.reactivateCategoryById(id);\n    }\n\n    @Put('/update')\n    @ApiOperation({ summary: 'Update a category by ID' })\n    @ApiResponse({ status: 200, description: 'Category successfully updated', type: Categories })\n    @ApiResponse({ status: 404, description: 'Category not found' })\n    public async updateCategoryById(@Body() updateCategoryDto: UpdateCategoryDto) : Promise {\n        return await this.categoriesService.updateCategoryById(updateCategoryDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_CategoriesModule_exports\n\n\n\n\nCategoriesService \n\nCategoriesService \n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCreateCategoryProvider\n\nCreateCategoryProvider\n\nCategoriesModule -->\n\nCreateCategoryProvider->CategoriesModule\n\n\n\n\n\nCreateManyCategoriesProvider\n\nCreateManyCategoriesProvider\n\nCategoriesModule -->\n\nCreateManyCategoriesProvider->CategoriesModule\n\n\n\n\n\nDeleteCategoryByIdProvider\n\nDeleteCategoryByIdProvider\n\nCategoriesModule -->\n\nDeleteCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nFindAllCategoriesProvider\n\nFindAllCategoriesProvider\n\nCategoriesModule -->\n\nFindAllCategoriesProvider->CategoriesModule\n\n\n\n\n\nFindCategoryByIdProvider\n\nFindCategoryByIdProvider\n\nCategoriesModule -->\n\nFindCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nReactivateCategoryByIdProvider\n\nReactivateCategoryByIdProvider\n\nCategoriesModule -->\n\nReactivateCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nUpdateCategoryByIdProvider\n\nUpdateCategoryByIdProvider\n\nCategoriesModule -->\n\nUpdateCategoryByIdProvider->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                        \n                            CreateCategoryProvider\n                        \n                        \n                            CreateManyCategoriesProvider\n                        \n                        \n                            DeleteCategoryByIdProvider\n                        \n                        \n                            FindAllCategoriesProvider\n                        \n                        \n                            FindCategoryByIdProvider\n                        \n                        \n                            ReactivateCategoryByIdProvider\n                        \n                        \n                            UpdateCategoryByIdProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { CategoriesController } from './categories.controller';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryProvider } from './providers/create-category.provider';\nimport { CreateManyCategoriesProvider } from './providers/create-many-categories.provider';\nimport { FindAllCategoriesProvider } from './providers/find-all-categories.provider';\nimport { FindCategoryByIdProvider } from './providers/find-category-by-id.provider';\nimport { UpdateCategoryByIdProvider } from './providers/update-category-by-id.provider';\nimport { DeleteCategoryByIdProvider } from './providers/delete-category-by-id.provider';\nimport { ReactivateCategoryByIdProvider } from './providers/reactivate-category-by-id.provider';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Categories } from './categories.entity';\nimport { ProductsModule } from 'src/products/products.module';\nimport { Product } from 'src/products/product.entity';\n\n@Module({\n  controllers: [CategoriesController],\n  providers: [\n    CategoriesService, \n    CreateCategoryProvider, \n    CreateManyCategoriesProvider, \n    FindAllCategoriesProvider, \n    FindCategoryByIdProvider, \n    UpdateCategoryByIdProvider, \n    DeleteCategoryByIdProvider, \n    ReactivateCategoryByIdProvider,\n  ],\n  imports: [\n    TypeOrmModule.forFeature([Categories, Product]),\n    forwardRef(() => ProductsModule),\n  ],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createCategory\n                            \n                            \n                                    Public\n                                    Async\n                                createManyCategories\n                            \n                            \n                                    Public\n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                    Public\n                                    Async\n                                findAllCategories\n                            \n                            \n                                    Public\n                                    Async\n                                findCategoryById\n                            \n                            \n                                    Public\n                                    Async\n                                reactivateCategoryById\n                            \n                            \n                                    Public\n                                    Async\n                                updateCategoryById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createCategoryProvider: CreateCategoryProvider, createManyCategoryProvider: CreateManyCategoriesProvider, deleteCategoryByIdProvider: DeleteCategoryByIdProvider, findAllCategoriesProvider: FindAllCategoriesProvider, findCategoryByIdProvider: FindCategoryByIdProvider, updateCategoryByIdProvider: UpdateCategoryByIdProvider, reactivateCategoryByIdProvider: ReactivateCategoryByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createCategoryProvider\n                                                  \n                                                        \n                                                                        CreateCategoryProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createManyCategoryProvider\n                                                  \n                                                        \n                                                                        CreateManyCategoriesProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteCategoryByIdProvider\n                                                  \n                                                        \n                                                                        DeleteCategoryByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllCategoriesProvider\n                                                  \n                                                        \n                                                                        FindAllCategoriesProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findCategoryByIdProvider\n                                                  \n                                                        \n                                                                        FindCategoryByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateCategoryByIdProvider\n                                                  \n                                                        \n                                                                        UpdateCategoryByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reactivateCategoryByIdProvider\n                                                  \n                                                        \n                                                                        ReactivateCategoryByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyCategories(createManyCategoriesDto: CreateManyCategoriesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyCategoriesDto\n                                            \n                                                            CreateManyCategoriesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategoryById(updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindCategoryByIdProvider } from './providers/find-category-by-id.provider';\nimport { Injectable } from '@nestjs/common';\nimport { CreateCategoryProvider } from './providers/create-category.provider';\nimport { Categories } from './categories.entity';\nimport { CreateCategoryDto } from './dtos/create-category.dto';\nimport { CreateManyCategoriesProvider } from './providers/create-many-categories.provider';\nimport { DeleteCategoryByIdProvider } from './providers/delete-category-by-id.provider';\nimport { CreateManyCategoriesDto } from './dtos/create-many-category.dto';\nimport { ReactivateCategoryByIdProvider } from './providers/reactivate-category-by-id.provider';\nimport { FindAllCategoriesProvider } from './providers/find-all-categories.provider';\nimport { UpdateCategoryByIdProvider } from './providers/update-category-by-id.provider';\nimport { UpdateCategoryDto } from './dtos/update-category.dto';\n\n@Injectable()\nexport class CategoriesService {\n    constructor(\n        private readonly createCategoryProvider: CreateCategoryProvider,\n    \n        private readonly createManyCategoryProvider: CreateManyCategoriesProvider,\n\n        private readonly deleteCategoryByIdProvider: DeleteCategoryByIdProvider,\n\n        private readonly findAllCategoriesProvider: FindAllCategoriesProvider,\n\n        private readonly findCategoryByIdProvider: FindCategoryByIdProvider,\n\n        private readonly updateCategoryByIdProvider: UpdateCategoryByIdProvider,\n\n        private readonly reactivateCategoryByIdProvider: ReactivateCategoryByIdProvider\n\n        \n    ){}\n\n    public async createCategory(createCategoryDto: CreateCategoryDto) : Promise {\n        return await this.createCategoryProvider.createCategory(createCategoryDto);\n    }\n\n    public async createManyCategories(createManyCategoriesDto: CreateManyCategoriesDto) : Promise {\n        return await this.createManyCategoryProvider.createManyCategoriesProvider(createManyCategoriesDto);\n    }\n\n    public async deleteCategoryById(id: number) : Promise {\n        return await this.deleteCategoryByIdProvider.deleteCategoryById(id);\n    }\n\n    public async findAllCategories() : Promise {\n        return await this.findAllCategoriesProvider.findAllCategoriesProvider();\n    }\n\n    public async findCategoryById(id: number) : Promise {\n        return await this.findCategoryByIdProvider.findCategoryByIdProvider(id);\n    }\n\n    public async updateCategoryById(updateCategoryDto: UpdateCategoryDto) : Promise {\n        return await this.updateCategoryByIdProvider.updateCategoryByIdProvider(updateCategoryDto);\n    }\n\n    public async reactivateCategoryById(id: number) : Promise {\n        return await this.reactivateCategoryByIdProvider.reactivateCategoryByIdProvider(id);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A description of the category', maxLength: 1025, example: 'This category includes all electronic devices and gadgets.'})@IsString()@IsNotEmpty()@MaxLength(1025)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-category.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the category', minLength: 6, maxLength: 255, example: 'Electronics'})@IsString()@IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-category.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateCategoryDto {\n    @ApiProperty({\n        description: 'The name of the category',\n        minLength: 6,\n        maxLength: 255, // Set a maximum length if desired\n        example: 'Electronics',\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    name: string;\n\n    @ApiProperty({\n        description: 'A description of the category',\n        maxLength: 1025,\n        example: 'This category includes all electronic devices and gadgets.',\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(1025)\n    description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateCategoryProvider.html":{"url":"injectables/CreateCategoryProvider.html","title":"injectable - CreateCategoryProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateCategoryProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/create-category.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRespository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/create-category.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRespository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/create-category.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Categories } from '../categories.entity';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from '../dtos/create-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateCategoryProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRespository: Repository,\n    ) {}\n\n    public async createCategory(createCategoryDto: CreateCategoryDto) : Promise {\n        let category : Categories = undefined;\n        try {\n            category = await this.categoriesRespository.findOneBy({ name: createCategoryDto.name });\n            if(category) throw new ConflictException('Category already exists');\n            category = this.categoriesRespository.create(createCategoryDto);\n\n            return await this.categoriesRespository.save(category);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyCategoriesDto.html":{"url":"classes/CreateManyCategoriesDto.html","title":"class - CreateManyCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/create-many-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                categories\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCategoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: true, description: 'An array of categories to be created'})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/create-many-category.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { CreateCategoryDto } from \"./create-category.dto\";\n\nexport class CreateManyCategoriesDto {\n    @ApiProperty({\n        type: [CreateCategoryDto], // Updated to reference CreateCategoryDto\n        required: true,\n        description: 'An array of categories to be created',\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateCategoryDto)\n    categories: CreateCategoryDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateManyCategoriesProvider.html":{"url":"injectables/CreateManyCategoriesProvider.html","title":"injectable - CreateManyCategoriesProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateManyCategoriesProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/create-many-categories.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createCategory\n                            \n                            \n                                    Public\n                                    Async\n                                createManyCategoriesProvider\n                            \n                            \n                                    Private\n                                    Async\n                                handleTransactionError\n                            \n                            \n                                    Private\n                                    Async\n                                releaseQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/create-many-categories.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(queryRunner: any, categoryDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/create-many-categories.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyCategoriesProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyCategoriesProvider(createManyCategoriesDto: CreateManyCategoriesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/create-many-categories.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyCategoriesDto\n                                            \n                                                            CreateManyCategoriesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleTransactionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTransactionError(queryRunner: any, error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/create-many-categories.provider.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        releaseQueryRunner\n                        \n                    \n                \n            \n            \n                \n                        \n                    releaseQueryRunner(queryRunner: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/create-many-categories.provider.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { Categories } from '../categories.entity';\nimport { CreateManyCategoriesDto } from '../dtos/create-many-category.dto';\n\n@Injectable()\nexport class CreateManyCategoriesProvider {\n    constructor(\n        private readonly dataSource: DataSource,\n    ) {}\n\n    public async createManyCategoriesProvider(createManyCategoriesDto: CreateManyCategoriesDto): Promise {\n        const createdCategories: Categories[] = [];\n        const queryRunner = this.dataSource.createQueryRunner();\n\n        try {\n            await queryRunner.connect();\n            await queryRunner.startTransaction();\n            \n            for (const categoryDto of createManyCategoriesDto.categories) {\n                const category = await this.createCategory(queryRunner, categoryDto);\n                createdCategories.push(category);\n            }\n\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await this.handleTransactionError(queryRunner, error);\n            throw error; \n        } finally {\n            await this.releaseQueryRunner(queryRunner);\n        }\n\n        return createdCategories;\n    }\n\n    private async createCategory(queryRunner: any, categoryDto: Partial): Promise {    \n        try {\n            const existingCategory = await queryRunner.manager.findOneBy(Categories, { name: categoryDto.name });\n            if (existingCategory) {\n                console.log(`Category already exists: ${categoryDto.name}`); // Log existing category\n                throw new ConflictException('Category already exists');\n            }\n            \n            const category = await queryRunner.manager.create(Categories, categoryDto);\n            return await queryRunner.manager.save(category);\n        } catch (error) {\n            throw new ConflictException('Failed to create category', error.message);\n        }\n    }\n\n    private async handleTransactionError(queryRunner: any, error: any): Promise {\n        try {\n            await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {\n            throw new RequestTimeoutException(rollbackError.message || 'Rollback failed');\n        }\n    }\n\n    private async releaseQueryRunner(queryRunner: any): Promise {\n        try {\n            await queryRunner.release();\n        } catch (releaseError) {\n            throw new RequestTimeoutException(releaseError.message || 'Failed to release query runner');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateManyOrderProvider.html":{"url":"injectables/CreateManyOrderProvider.html","title":"injectable - CreateManyOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateManyOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-many-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                MAX_RETRIES\n                            \n                            \n                                    Private\n                                    Readonly\n                                RETRY_DELAY\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyOrdersProvider\n                            \n                            \n                                    Private\n                                    Async\n                                createOrderItems\n                            \n                            \n                                    Private\n                                delay\n                            \n                            \n                                    Private\n                                isDeadlockError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, userRepository: Repository, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-many-order.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyOrdersProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyOrdersProvider(createManyOrderDto: CreateManyOrdersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-many-order.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyOrderDto\n                                            \n                                                            CreateManyOrdersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createOrderItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrderItems(orderItemDtos: CreateOrderItemDto[], order: Order, queryRunner: QueryRunner, productsMap: Map)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-many-order.provider.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderItemDtos\n                                            \n                                                            CreateOrderItemDto[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                order\n                                            \n                                                            Order\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productsMap\n                                            \n                                                            Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        delay\n                        \n                    \n                \n            \n            \n                \n                        \n                    delay(ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-many-order.provider.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isDeadlockError\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDeadlockError(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-many-order.provider.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        MAX_RETRIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                    \n                        \n                                Defined in src/orders/providers/create-many-order.provider.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        RETRY_DELAY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                    \n                        \n                                Defined in src/orders/providers/create-many-order.provider.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Order } from 'src/orders/order.entity';\nimport { BadRequestException, Injectable, NotFoundException, RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource, QueryRunner, In } from 'typeorm';\nimport { OrderItem } from '../order-item.entity';\nimport { User } from '../../users/user.entity';\nimport { Product } from '../../products/product.entity';\nimport { CreateOrderItemDto } from '../dtos/create-order-item-dto';\nimport { CreateManyOrdersDto } from '../dtos/create-many-order-dto';\n\n@Injectable()\nexport class CreateManyOrderProvider {\n    private readonly MAX_RETRIES = 3; // Maximum number of retry attempts\n    private readonly RETRY_DELAY = 100; // Delay in milliseconds before retrying\n\n    constructor(\n        private readonly dataSource: DataSource,\n        @InjectRepository(User)\n        private readonly userRepository: Repository,\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async createManyOrdersProvider(createManyOrderDto: CreateManyOrdersDto): Promise {\n        const { orders } = createManyOrderDto;\n        if (!orders || orders.length === 0) {\n            throw new BadRequestException('Order data is required');\n        }\n\n        let attempts = 0;\n\n        while (attempts  order.userId);\n                const users = await this.userRepository.findBy({ id: In(userIds) });\n\n                const productIds = orders.flatMap(order => order.orderItems.map(item => item.productId));\n                const products = await this.productRepository.findBy({ id: In(productIds) });\n\n                const productsMap = new Map(products.map(product => [product.id, product]));\n\n                for (const createOrderDto of orders) {\n                    const { userId, shippingAddress, status, orderItems } = createOrderDto;\n                    const user = users.find(user => user.id === userId);\n                    if (!user) throw new NotFoundException(`User with ID ${userId} not found`);\n\n                    const order = queryRunner.manager.create(Order, {\n                        user,\n                        shippingAddress,\n                        status,\n                        totalAmount: 0,\n                    });\n                    await queryRunner.manager.save(order);\n\n                    const orderItemEntities = await this.createOrderItems(orderItems, order, queryRunner, productsMap);\n                    const totalAmount = orderItemEntities.reduce((total, item) => total + (item.product.price * item.quantity), 0);\n                    order.totalAmount = totalAmount;\n\n                    await queryRunner.manager.save(order);\n                    createdOrders.push(order);\n                }\n\n                await queryRunner.commitTransaction();\n                return createdOrders; // Successful transaction, return created orders\n            } catch (error) {\n                await queryRunner.rollbackTransaction();\n                console.error('Error creating orders:', error);\n\n                // Check if the error is a deadlock error\n                if (this.isDeadlockError(error)) {\n                    attempts++;\n                    if (attempts \n    ): Promise {\n        const orderItemEntities = await Promise.all(orderItemDtos.map(async (orderItemDto) => {\n            const product = productsMap.get(orderItemDto.productId);\n            if (!product) throw new NotFoundException(`Product with ID ${orderItemDto.productId} not found`);\n\n            if (product.stock  setTimeout(resolve, ms));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyOrdersDto.html":{"url":"classes/CreateManyOrdersDto.html","title":"class - CreateManyOrdersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyOrdersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-many-order-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateOrderDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orders\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateOrderDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: true})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-many-order-dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { CreateOrderDto } from \"./create-order-dto\";\nimport { PartialType } from \"@nestjs/mapped-types\";\n\n\nexport class CreateManyOrdersDto extends PartialType(CreateOrderDto) {\n    @ApiProperty({\n        type: [CreateOrderDto], // Updated to reference CreateOrderDto\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateOrderDto)\n    orders: CreateOrderDto[]; // Changed from 'products' to 'orders'\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyProductsDto.html":{"url":"classes/CreateManyProductsDto.html","title":"class - CreateManyProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-many-products-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProductDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: true})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-many-products-dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { CreateProductDto } from \"./create-product-dto\";\n\nexport class CreateManyProductsDto extends PartialType(CreateProductDto) {\n    @ApiProperty({\n        type: [CreateProductDto], // Updated to reference CreateProductDto\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateProductDto)\n    products: CreateProductDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateManyProductsProvider.html":{"url":"injectables/CreateManyProductsProvider.html","title":"injectable - CreateManyProductsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateManyProductsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-many-products.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyProductsProvider\n                            \n                            \n                                    Private\n                                    Async\n                                createProduct\n                            \n                            \n                                    Private\n                                    Async\n                                handleTransactionError\n                            \n                            \n                                    Private\n                                    Async\n                                releaseQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-many-products.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyProductsProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyProductsProvider(createManyProductsDto: CreateManyProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-many-products.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyProductsDto\n                                            \n                                                            CreateManyProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(queryRunner: any, productDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-many-products.provider.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleTransactionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTransactionError(queryRunner: any, error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-many-products.provider.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        releaseQueryRunner\n                        \n                    \n                \n            \n            \n                \n                        \n                    releaseQueryRunner(queryRunner: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-many-products.provider.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateManyProductsDto } from '../dtos/create-many-products-dto';\nimport { Product } from '../product.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { Categories } from 'src/categories/categories.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateProductDto } from '../dtos/create-product-dto'; // Import CreateProductDto\n\n@Injectable()\nexport class CreateManyProductsProvider {\n    constructor(\n        private readonly dataSource: DataSource,\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async createManyProductsProvider(createManyProductsDto: CreateManyProductsDto): Promise {\n        const { products } = createManyProductsDto;\n        const createdProducts: Product[] = [];\n        const queryRunner = this.dataSource.createQueryRunner();\n\n        try {\n            await queryRunner.connect();\n            await queryRunner.startTransaction();\n\n            for (const productDto of products) {\n                const product = await this.createProduct(queryRunner, productDto);\n                createdProducts.push(product);\n            }\n\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await this.handleTransactionError(queryRunner, error);\n            throw error;\n        } finally {\n            await this.releaseQueryRunner(queryRunner);\n        }\n\n        return createdProducts;\n    }\n\n    private async createProduct(queryRunner: any, productDto: CreateProductDto): Promise {\n        try {\n            const category = await this.categoriesRepository.findOneBy({ id: productDto.categoryId });\n            if (!category) {\n                throw new ConflictException('Category not found');\n            }\n\n            const newProduct = queryRunner.manager.create(Product, { ...productDto, category });\n            return await queryRunner.manager.save(newProduct);\n        } catch (error) {\n            throw new ConflictException('Failed to create product', error.message);\n        }\n    }\n\n    private async handleTransactionError(queryRunner: any, error: any): Promise {\n        try {\n            await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {\n            throw new RequestTimeoutException(rollbackError.message || 'Rollback failed');\n        }\n    }\n\n    private async releaseQueryRunner(queryRunner: any): Promise {\n        try {\n            await queryRunner.release();\n        } catch (releaseError) {\n            throw new RequestTimeoutException(releaseError.message || 'Failed to release query runner');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: true, description: 'Array of users to be created'})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDto {\n    @ApiProperty({\n        type: [CreateUserDto], // Use CreateUserDto to define the type of items in the array\n        required: true,\n        description: 'Array of users to be created',\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateManyUsersProvider.html":{"url":"injectables/CreateManyUsersProvider.html","title":"injectable - CreateManyUsersProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateManyUsersProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-many-users.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    Private\n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                handleTransactionError\n                            \n                            \n                                    Private\n                                    Async\n                                releaseQueryRunner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-many-users.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUserDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-many-users.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUserDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(queryRunner: any, user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-many-users.provider.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleTransactionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTransactionError(queryRunner: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-many-users.provider.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        releaseQueryRunner\n                        \n                    \n                \n            \n            \n                \n                        \n                    releaseQueryRunner(queryRunner: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-many-users.provider.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, ConflictException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateManyUsersProvider {\n    constructor(\n        private readonly dataSource: DataSource,\n        private readonly hashingProvider: HashingProvider,\n    ) {}\n\n    public async createManyUsers(createManyUserDto: CreateManyUsersDto): Promise {\n        const usersToCreate = createManyUserDto.users;\n        const queryRunner = this.dataSource.createQueryRunner();\n        const createdUsers: User[] = [];\n\n        try {\n            await queryRunner.connect();\n            await queryRunner.startTransaction();\n\n            for (const user of usersToCreate) {\n                const hashedPassword = user.password ? await this.hashingProvider.hashPassword(user.password) : undefined;\n                const newUser = await this.createUser(queryRunner, { ...user, password: hashedPassword });\n                createdUsers.push(newUser);\n            }\n\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await this.handleTransactionError(queryRunner);\n        } finally {\n            await this.releaseQueryRunner(queryRunner);\n        }\n\n        return createdUsers;\n    }\n\n    private async createUser(queryRunner: any, user: Partial): Promise {\n        try {\n            const newUser = queryRunner.manager.create(User, user);\n            return await queryRunner.manager.save(newUser);\n        } catch (error) {\n            throw new ConflictException('Failed to create user', error.message);\n        }\n    }\n\n    private async handleTransactionError(queryRunner: any): Promise {\n        try {\n            await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {\n            throw new RequestTimeoutException(rollbackError.message || 'Rollback failed');\n        }\n    }\n\n    private async releaseQueryRunner(queryRunner: any): Promise {\n        try {\n            await queryRunner.release();\n        } catch (releaseError) {\n            throw new RequestTimeoutException(releaseError.message || 'Failed to release query runner');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                orderItems\n                            \n                            \n                                    \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateOrderItemDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(OrderStatusEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { CreateOrderItemDto } from './create-order-item-dto';\nimport { OrderStatusEnum } from '../enums/order-status-enums';\n\nexport class CreateOrderDto {\n    @IsNotEmpty()\n    userId: number; // Assuming you have the user ID\n\n    @IsNotEmpty()\n    @IsString()\n    shippingAddress: string;\n\n    @IsNotEmpty()\n    @IsEnum(OrderStatusEnum)\n    status: OrderStatusEnum;\n\n    @IsNotEmpty()\n    @IsNumber()\n    totalAmount: number;\n\n    @IsArray()\n    orderItems: CreateOrderItemDto[]; // Array of OrderItem DTOs\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderItemDto.html":{"url":"classes/CreateOrderItemDto.html","title":"class - CreateOrderItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order-item-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-item-dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-item-dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order-item-dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class CreateOrderItemDto {\n    @IsNotEmpty()\n    productId: number; // Assuming you have the product ID\n\n    @IsNotEmpty()\n    @IsNumber()\n    quantity: number;\n\n    @IsString()\n    description?: string; // Optional\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateOrderProvider.html":{"url":"injectables/CreateOrderProvider.html","title":"injectable - CreateOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOrder\n                            \n                            \n                                    Private\n                                    Async\n                                createOrderItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, userRepository: Repository, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-order.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createOrderItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrderItems(orderItemDtos: CreateOrderItemDto[], order: Order, queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderItemDtos\n                                            \n                                                            CreateOrderItemDto[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                order\n                                            \n                                                            Order\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, QueryRunner, DataSource } from 'typeorm';\nimport { CreateOrderDto } from '../dtos/create-order-dto';\nimport { Order } from '../order.entity';\nimport { OrderItem } from '../order-item.entity';\nimport { User } from '../../users/user.entity';\nimport { Product } from '../../products/product.entity';\nimport { CreateOrderItemDto } from '../dtos/create-order-item-dto';\n\n@Injectable()\nexport class CreateOrderProvider {\n    constructor(\n        private readonly dataSource: DataSource,\n        @InjectRepository(User)\n        private readonly userRepository: Repository,\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async createOrder(createOrderDto: CreateOrderDto): Promise {\n        console.time('createManyOrdersExecutionTime'); // Start timer\n        if (!createOrderDto) {\n            throw new RequestTimeoutException('Order data is required.');\n        }\n\n        const { userId, shippingAddress, status, orderItems } = createOrderDto;\n\n        const user = await this.userRepository.findOneBy({ id: userId });\n        if (!user) {\n            throw new NotFoundException(`User with ID ${userId} not found.`);\n        }\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        await queryRunner.connect();\n        await queryRunner.startTransaction();\n\n        try {\n            const order = queryRunner.manager.create(Order, {\n                user,\n                shippingAddress,\n                status,\n                totalAmount: 0,\n            });\n            await queryRunner.manager.save(order);\n\n            const orderItemsEntities = await this.createOrderItems(orderItems, order, queryRunner);\n            order.totalAmount = orderItemsEntities.reduce((total, item) => total + item.product.price * item.quantity, 0);\n\n            await queryRunner.manager.save(order);\n\n            for (const orderItem of orderItemsEntities) {\n                const product = await this.productRepository.findOneBy({ id: orderItem.product.id });\n                if (!product) {\n                    throw new NotFoundException(`Product with ID ${orderItem.product.id} not found.`);\n                }\n\n                if (product.stock  {\n        const orderItemEntities = await Promise.all(\n            orderItemDtos.map(async (orderItemDto) => {\n                const product = await this.productRepository.findOneBy({ id: orderItemDto.productId });\n                if (!product) {\n                    throw new NotFoundException(`Product with ID ${orderItemDto.productId} not found.`);\n                }\n\n                return queryRunner.manager.create(OrderItem, {\n                    ...orderItemDto,\n                    product,\n                    order,\n                });\n            })\n        );\n        return orderItemEntities;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-product-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                images\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the category to which the product belongs', type: Number})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product', maxLength: 1025})@IsString()@MaxLength(1025)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of image URLs for the product', type: undefined, minItems: 1, maxItems: 5})@IsOptional()@IsArray()@IsString({each: true})@ArrayMinSize(1)@ArrayMaxSize(5)@MaxLength(1025, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product', minLength: 3, maxLength: 255})@IsString()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product', type: Number})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available stock of the product', type: Number})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product-dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsNumber, IsString, MaxLength, MinLength, ArrayMaxSize, ArrayMinSize, IsOptional } from \"class-validator\";\n\nexport class CreateProductDto {\n    @ApiProperty({\n        description: 'Name of the product',\n        minLength: 3,\n        maxLength: 255,\n    })\n    @IsString()\n    @MinLength(3)\n    @MaxLength(255)\n    name: string;\n\n    @ApiProperty({\n        description: 'Price of the product',\n        type: Number,\n    })\n    @IsNumber()\n    price: number;\n\n    @ApiProperty({\n        description: 'Description of the product',\n        maxLength: 1025,\n    })\n    @IsString()\n    @MaxLength(1025)\n    description: string;\n\n    @ApiProperty({\n        description: 'ID of the category to which the product belongs',\n        type: Number,\n    })\n    @IsNumber()\n    categoryId: number;\n\n    @ApiProperty({\n        description: 'Available stock of the product',\n        type: Number,\n    })\n    @IsNumber()\n    stock: number;\n\n    @ApiPropertyOptional({\n        description: 'Array of image URLs for the product',\n        type: [String],\n        minItems: 1,\n        maxItems: 5,\n    })\n    @IsOptional()\n    @IsArray()\n    @IsString({ each: true })\n    @ArrayMinSize(1) // Ensure at least one image is provided\n    @ArrayMaxSize(5) // Set a maximum size for the array if desired\n    @MaxLength(1025, { each: true }) // Validate each string's maximum length\n    images?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateProductProvider.html":{"url":"injectables/CreateProductProvider.html","title":"injectable - CreateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProductsProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository, categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-product.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createProductsProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProductsProvider(productDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-product.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Product } from '../product.entity';\nimport { Repository } from 'typeorm';\nimport { CreateProductDto } from '../dtos/create-product-dto';\nimport { Categories } from 'src/categories/categories.entity';\n\n@Injectable()\nexport class CreateProductProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async createProductsProvider(productDto: CreateProductDto): Promise {\n        // Check for the category existence\n        const category : Categories = await this.categoriesRepository.findOneBy({ id: productDto.categoryId });\n        if (!category) {\n            throw new ConflictException('Category not found');\n        }\n\n        // Create and save the product\n        const product : Product = this.productRepository.create({ ...productDto, category });\n        try {\n            return await this.productRepository.save(product);\n        } catch (error) {\n            throw new InternalServerErrorException('Failed to create product');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's address', minLength: 3, maxLength: 1025})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(1025)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's email address', maxLength: 256})@IsEmail()@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's first name', minLength: 3, maxLength: 256})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User's last name', minLength: 3, maxLength: 256})@IsString()@IsOptional()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User's password with complexity requirements', minLength: 8, maxLength: 256, example: 'Password1!'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(256)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[\\W_]).+$/, {message: 'Minimum eight characters, at least one letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n\n    @ApiProperty({\n        description: 'User\\'s first name',\n        minLength: 3,\n        maxLength: 256,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(256)\n    firstName: string;\n\n    @ApiPropertyOptional({\n        description: 'User\\'s last name',\n        minLength: 3,\n        maxLength: 256,\n    })\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(256)\n    lastName?: string;\n\n    @ApiProperty({\n        description: 'User\\'s email address',\n        maxLength: 256,\n    })\n    @IsEmail()\n    @IsNotEmpty()\n    @MaxLength(256)\n    email: string;\n\n    @ApiProperty({\n        description: 'User\\'s password with complexity requirements',\n        minLength: 8,\n        maxLength: 256,\n        example: 'Password1!',\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @MaxLength(256)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[\\W_]).+$/, {\n        message: 'Minimum eight characters, at least one letter, one number, and one special character.',\n    })\n    password: string;\n\n    @ApiProperty({\n        description: 'User\\'s address',\n        minLength: 3,\n        maxLength: 1025,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(1025)\n    address: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUsersProvider.html":{"url":"injectables/CreateUsersProvider.html","title":"injectable - CreateUsersProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUsersProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-users.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-users.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-users.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUsersProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n\n        private readonly hashingProvider: HashingProvider,\n    ) {}\n\n    public async createUser(createUserDto: CreateUserDto): Promise {\n        const existingUser : User = await this.usersRepository.findOneBy({ email: createUserDto.email });\n        if (existingUser) {\n            throw new BadRequestException('User already exists');\n        }\n\n        const hashedPassword = await this.hashingProvider.hashPassword(createUserDto.password);\n        const newUser = this.usersRepository.create({ ...createUserDto, password: hashedPassword });\n\n        try {\n            return await this.usersRepository.save(newUser);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response.interceptor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response.interceptor.ts:17\n                        \n                    \n\n\n            \n                \n                        Intercepts the response and adds the application's environment, version, and name to it.\nThis is useful for debugging and logging purposes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe call handler.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the modified response.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Observable, tap, map } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Intercepts the response and adds the application's environment, version, and name to it.\n   * This is useful for debugging and logging purposes.\n   *\n   * @param context - The execution context.\n   * @param next - The call handler.\n   * @returns An observable that emits the modified response.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const { environment, apiVersion, appName } = this.configService.get('appConfig');\n\n    return next.handle().pipe(\n      map((data) => ({ environment, apiVersion, appName, data })),\n    );\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConfig.html":{"url":"interfaces/DatabaseConfig.html","title":"interface - DatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            autoloadEntities\n                                        \n                                \n                                \n                                        \n                                            database_name\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            synchronize\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoloadEntities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoloadEntities:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        database_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        synchronize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        synchronize:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from \"@nestjs/config\";\n\ninterface DatabaseConfig {\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n    database_name: string;\n    synchronize: boolean;\n    autoloadEntities: boolean;\n}\n\nconst toBoolean = (value: string | undefined): boolean => {\n    return value === 'true';\n}\n\nexport default registerAs(\n    'databaseConfig', () => ({\n        host: process.env.DATABASE_HOST,\n        port: parseInt(process.env.DATABASE_PORT),\n        username: process.env.DATABASE_USERNAME,\n        password: process.env.DATABASE_PASSWORD,\n        database_name: process.env.DATABASE_NAME,\n        synchronize: toBoolean(process.env.DATABASE_SYNC),\n        autoloadEntities: toBoolean(process.env.DATABASE_AUTOLOAD),\n}));\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteCategoryByIdProvider.html":{"url":"injectables/DeleteCategoryByIdProvider.html","title":"injectable - DeleteCategoryByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteCategoryByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/delete-category-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteCategoryById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/delete-category-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/delete-category-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Categories } from '../categories.entity';\n\n@Injectable()\nexport class DeleteCategoryByIdProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository\n    ) {}\n\n    public async deleteCategoryById(id: number) : Promise {\n        let category = undefined;\n\n        try {\n            category = await this.categoriesRepository.softDelete(id);\n            if (!category) throw new ConflictException('Category not found');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n\n        return {\n            deleted: true,\n            id,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteOrderByIdProvider.html":{"url":"injectables/DeleteOrderByIdProvider.html","title":"injectable - DeleteOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/delete-order-by-id.provider.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class DeleteOrderByIdProvider {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteProductByIdProvider.html":{"url":"injectables/DeleteProductByIdProvider.html","title":"injectable - DeleteProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/delete-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteProductByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/delete-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProductByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/delete-product-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteProductByIdProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async deleteProductByIdProvider(id: number): Promise {\n        let product = undefined;\n\n        try {\n            product = await this.productRepository.findOneBy({ id });\n\n            if (!product) throw new ConflictException('Failed to find product');\n\n            await this.productRepository.softDelete(id);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        return {\n            deleted: true,\n            id,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteUserByIdProvider.html":{"url":"injectables/DeleteUserByIdProvider.html","title":"injectable - DeleteUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/delete-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/delete-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/delete-user-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteUserByIdProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) {}\n\n    public async deleteUserById(id: number): Promise {\n        let user  = undefined;\n        \n        try {\n            user = await this.usersRepository.softDelete(id);\n            if(!user) throw new ConflictException('User not found');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        \n        return {\n            deleted: true,\n            id,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllCategoriesProvider.html":{"url":"injectables/FindAllCategoriesProvider.html","title":"injectable - FindAllCategoriesProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllCategoriesProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/find-all-categories.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAllCategoriesProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/find-all-categories.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllCategoriesProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllCategoriesProvider()\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/find-all-categories.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Categories } from '../categories.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindAllCategoriesProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async findAllCategoriesProvider(): Promise {\n        let categories : Categories[] = [];\n        \n        try {\n            categories = await this.categoriesRepository.find();\n            if(!categories) throw new ConflictException('No categories found in database');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n\n        return categories;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllProductProvider.html":{"url":"injectables/FindAllProductProvider.html","title":"injectable - FindAllProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-all-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAllProductProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository, categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-all-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllProductProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProductProvider(categoryId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Categories } from 'src/categories/categories.entity';\n\n@Injectable()\nexport class FindAllProductProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n        \n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async findAllProductProvider(categoryId?: number): Promise {\n        let products: Product[] = [];\n\n        try {\n            const options: any = {};\n\n            // If a category ID is provided, filter products by that category\n            if (categoryId) {\n                options.where = { category: { id: categoryId } }; // Assuming category is set as eager\n            }\n\n            // Fetch products\n            products = await this.productRepository.find(options);\n\n            if (!products.length) throw new ConflictException('No products found in database.');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        return products;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllUsersProvider.html":{"url":"injectables/FindAllUsersProvider.html","title":"injectable - FindAllUsersProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllUsersProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-all-users.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAllUserProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-all-users.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllUserProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUserProvider()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-all-users.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\n\n@Injectable()\nexport class FindAllUsersProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ) {}\n\n    public async findAllUserProvider() : Promise {\n        let user : User[] = undefined;\n        try {\n            user = await this.usersRepository.find();\n            if(!user) throw new ConflictException('No Users found in database');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindCategoryByIdProvider.html":{"url":"injectables/FindCategoryByIdProvider.html","title":"injectable - FindCategoryByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindCategoryByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/find-category-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findCategoryByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/find-category-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findCategoryByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCategoryByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/find-category-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Categories } from '../categories.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindCategoryByIdProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async findCategoryByIdProvider(id: number): Promise {\n        let category : Categories = undefined;\n\n        try {\n            category = await this.categoriesRepository.findOneBy({ id});\n            if(!category) throw new ConflictException('Category not found');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n\n        return category;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmailProvider.html":{"url":"injectables/FindOneByEmailProvider.html","title":"injectable - FindOneByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmailProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmailProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmailProvider(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-email.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByEmailProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) {}\n\n    public async findOneByEmailProvider(email: string) : Promise {\n        let user : User = undefined;\n        try {\n            user = await this.usersRepository.findOneBy({ email })\n            if(!user) throw new ConflictException('User not found');\n        } catch(error) {\n            throw new RequestTimeoutException(error);\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByIdProvider.html":{"url":"injectables/FindOneByIdProvider.html","title":"injectable - FindOneByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByIdProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ) {}\n\n    public async findUserByIdProvider(id: number) : Promise {\n        let user : User = undefined;\n        try {\n            user = await this.usersRepository.findOneBy({ id });\n            if(!user) throw new ConflictException('User not found');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindProductByIdProvider.html":{"url":"injectables/FindProductByIdProvider.html","title":"injectable - FindProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findProductByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-product-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindProductByIdProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async findProductByIdProvider(id: number) : Promise {\n        let product = undefined;\n        try {\n            product = await this.productRepository.findOneBy({ id });\n            if(!product) throw new ConflictException('Failed to find product');\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        } \n        return product;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokentProvider.html":{"url":"injectables/GenerateTokentProvider.html","title":"injectable - GenerateTokentProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokentProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigType } from \"@nestjs/config\";\nimport jwtConfig from \"../config/jwt.config\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { User } from \"src/users/user.entity\";\nimport { ActiveUserData } from \"../interfaces/active-user-data.interface\";\n@Injectable()\nexport class GenerateTokentProvider {\n    constructor(\n        private readonly jwtService: JwtService,\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n    ) {}\n\n    public async signToken(userId: number, expiresIn: number, payload?: T) : Promise {\n        return await this.jwtService.signAsync(\n            {\n                sub: userId,\n                ...payload\n            },\n            {\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer,\n                secret: this.jwtConfiguration.secret,\n                expiresIn\n            }\n        );\n    }\n\n    public async generateTokens(user: User): Promise {\n        const accessToken = await this.signToken>(\n            user.id,\n            this.jwtConfiguration.accessTokenTtl,\n            { email: user.email },\n        );\n        const refreshToken = await this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl);\n        return { accessToken, refreshToken };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Get user with specific id\",\n        example: 1234  // Example ID for illustration\n    })\n    @IsOptional()  // Indicates that this field is optional\n    @IsInt()  // Validates that the ID must be an integer\n    @Type(() => Number)  // Transforms the value to a Number type if present\n    id?: number;  // Optional user ID for fetching a specific user\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    abstract hashPassword(password: string | Buffer) : Promise;\n    abstract comparePassword(password: string, hash: string) : Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/global-exception-filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/utils/global-exception-filter.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException } from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const context = host.switchToHttp();\n        const response = context.getResponse(); // Fastify response\n        const request = context.getRequest(); // Fastify request\n\n        const exceptionResponse = exception.getResponse();\n        const error =\n            typeof exceptionResponse === 'string' ? { message: exceptionResponse } : exceptionResponse;\n\n        response.status(exception.getStatus()).send({\n            ...error,\n            statusCode: exception.getStatus(),\n            timestamp: new Date().toISOString(),\n            path: request.url,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                orderDate\n                            \n                            \n                                    \n                                orderItems\n                            \n                            \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                updateAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from \"src/users/user.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { OrderItem } from \"./order-item.entity\";\nimport { OrderStatusEnum } from \"./enums/order-status-enums\";\n\n@Entity()\nexport class Order {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @ManyToOne(() => User, (user) => user.orders)\n    user: User;\n\n    @OneToMany(() => OrderItem, (orderItem) => orderItem.order)\n    orderItems: OrderItem[];\n\n    @Column({\n        type: 'text',\n        nullable: false,\n    })\n    shippingAddress: string;\n\n    @Column({\n        type: 'enum',\n        enum: OrderStatusEnum,\n        default: OrderStatusEnum.Pending\n    })\n    status: OrderStatusEnum;\n\n    @Column('decimal', {\n        precision: 10,\n        scale: 2,\n    })\n    totalAmount: number;\n\n    @CreateDateColumn()\n    orderDate: Date;\n\n    @UpdateDateColumn()\n    updateAt: Date;\n\n    @DeleteDateColumn()\n    deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.orderItems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.orderItems)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Product } from \"src/products/product.entity\";\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Order } from \"./order.entity\";\n\n@Entity()\nexport class OrderItem {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @ManyToOne(() => Order, (order) => order.orderItems)\n    order: Order;\n\n    @Column({ \n        type: 'text', \n        nullable: true, \n        default: null \n    })\n    description: string;\n\n    @ManyToOne(() => Product, (product) => product.orderItems) // Ensure `orderItems` is defined in `Product`\n    product: Product; // Change this from Product[] to Product\n\n    @Column({ \n        type: 'int', \n        nullable: false \n    })\n    quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createManyOrders\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createManyOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyOrders(createManyOrderDto: CreateManyOrdersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyOrderDto\n                                            \n                                                            CreateManyOrdersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { OrdersService } from './orders.service';\nimport { CreateOrderDto } from './dtos/create-order-dto';\nimport { CreateManyOrdersDto } from './dtos/create-many-order-dto';\nimport { Order } from './order.entity';\n\n@Controller('orders')\nexport class OrdersController {\n    constructor(\n        private readonly ordersService: OrdersService,\n    ) {}    \n\n    @Post('create')\n    public async createOrder(@Body() createOrderDto: CreateOrderDto): Promise {\n        return await this.ordersService.createOrder(createOrderDto);\n    }\n\n    @Post('create-many')\n    public async createManyOrders(@Body() createManyOrderDto: CreateManyOrdersDto): Promise {\n        return await this.ordersService.createManyOrder(createManyOrderDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\n\nCreateManyOrderProvider\n\nCreateManyOrderProvider\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCreateManyOrderProvider->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nDeleteOrderByIdProvider\n\nDeleteOrderByIdProvider\n\nOrdersModule -->\n\nDeleteOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nUpdateOrderByIdProvider\n\nUpdateOrderByIdProvider\n\nOrdersModule -->\n\nUpdateOrderByIdProvider->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateManyOrderProvider\n                        \n                        \n                            CreateOrderProvider\n                        \n                        \n                            DeleteOrderByIdProvider\n                        \n                        \n                            OrdersService\n                        \n                        \n                            UpdateOrderByIdProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './orders.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OrderItem } from './order-item.entity';\nimport { Order } from './order.entity';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CreateManyOrderProvider } from './providers/create-many-order.provider';\nimport { UpdateOrderByIdProvider } from './providers/update-order-by-id.provider';\nimport { DeleteOrderByIdProvider } from './providers/delete-order-by-id.provider';\nimport { User } from 'src/users/user.entity';\nimport { Product } from 'src/products/product.entity';\n\n@Module({\n  controllers: [OrdersController],\n  providers: [OrdersService, CreateOrderProvider, CreateManyOrderProvider, UpdateOrderByIdProvider, DeleteOrderByIdProvider],\n  imports: [TypeOrmModule.forFeature([Order, OrderItem, User, Product])]\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyOrder\n                            \n                            \n                                    Public\n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createOrderProvider: CreateOrderProvider, createManyOrderProvider: CreateManyOrderProvider)\n                    \n                \n                        \n                            \n                                Defined in src/orders/orders.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createOrderProvider\n                                                  \n                                                        \n                                                                        CreateOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createManyOrderProvider\n                                                  \n                                                        \n                                                                        CreateManyOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyOrder(createManyOrderDto: CreateManyOrdersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyOrderDto\n                                            \n                                                            CreateManyOrdersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateManyOrdersDto } from './dtos/create-many-order-dto';\nimport { Injectable } from '@nestjs/common';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CreateOrderDto } from './dtos/create-order-dto';\nimport { Order } from './order.entity';\nimport { CreateManyOrderProvider } from './providers/create-many-order.provider';\n\n@Injectable()\nexport class OrdersService {\n    constructor(\n        private readonly createOrderProvider: CreateOrderProvider,\n\n        private readonly createManyOrderProvider: CreateManyOrderProvider, \n    ) {}\n\n    public async createOrder(createOrderDto: CreateOrderDto): Promise {\n        return await this.createOrderProvider.createOrder(createOrderDto);\n    }\n\n    public async createManyOrder(createManyOrderDto: CreateManyOrdersDto): Promise {\n        return await this.createManyOrderProvider.createManyOrdersProvider(createManyOrderDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/pagination.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: FastifyRequest)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    FastifyRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:38\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Paginates a query using the provided repository and pagination query DTO.\nReturns a Paginated object containing the paginated data and metadata.\nThis function takes a pagination query and a repository as parameters.\nIt uses the skip and take methods of the repository to paginate the query.\nThe page and limit parameters are used to calculate the offset and limit\nof the query. The offset is used to skip over the number of items\nspecified by the page parameter, and the limit is used to limit the\nnumber of items returned.\nThe function also calculates the total number of pages and the next and\nprevious page numbers based on the total number of items and the current\npage number.\nFinally, the function returns a Paginated object containing the\npaginated data and metadata. The metadata includes the items per page,\ntotal items, current page, total pages, and links to the first, last,\ncurrent, next, and previous pages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination query to use.\n\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe repository to paginate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A Paginated object containing the paginated data and metadata.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { FastifyRequest } from 'fastify';\nimport { ObjectLiteral, Repository } from \"typeorm\";\nimport { PaginationQueryDto } from \"../dtos/pagination-query.dto\";\nimport { Paginated } from \"../interfaces/pagination.interface\";\nimport { REQUEST } from \"@nestjs/core\";\n@Injectable()\nexport class PaginationProvider {\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: FastifyRequest, \n    ) {}\n\n    /**\n     * Paginates a query using the provided repository and pagination query DTO.\n     * Returns a Paginated object containing the paginated data and metadata.\n     *\n     * This function takes a pagination query and a repository as parameters.\n     * It uses the skip and take methods of the repository to paginate the query.\n     * The page and limit parameters are used to calculate the offset and limit\n     * of the query. The offset is used to skip over the number of items\n     * specified by the page parameter, and the limit is used to limit the\n     * number of items returned.\n     *\n     * The function also calculates the total number of pages and the next and\n     * previous page numbers based on the total number of items and the current\n     * page number.\n     *\n     * Finally, the function returns a Paginated object containing the\n     * paginated data and metadata. The metadata includes the items per page,\n     * total items, current page, total pages, and links to the first, last,\n     * current, next, and previous pages.\n     *\n     * @param paginationQuery - The pagination query to use.\n     * @param repository - The repository to paginate.\n     * @returns A Paginated object containing the paginated data and metadata.\n     */\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        // Get the page and limit parameters from the pagination query.\n        const { page, limit } = paginationQuery;\n        // Calculate the offset based on the page number and limit.\n        const offset = (page - 1) * limit;\n\n        // Execute the query using the skip and take methods of the repository.\n        const [data, totalItems] = await repository.findAndCount({ skip: offset, take: limit });\n\n        // Calculate the total number of pages based on the total number of items and the limit.\n        const totalPages = Math.ceil(totalItems / limit);\n        // Calculate the next and previous page numbers based on the current page number.\n        const nextPage = page  1 ? page - 1 : 1;\n\n        // Create a new URL object from the request URL.\n        const baseUrl = `${this.request.protocol}://${this.request.hostname}`;\n        const requestUrl = new URL(this.request.url, baseUrl);\n\n        // Return a Paginated object containing the paginated data and metadata.\n        return {\n            // The paginated data.\n            data,\n            // The metadata.\n            meta: {\n                // The number of items per page.\n                itemsPerPage: limit,\n                // The total number of items.\n                totalItems,\n                // The current page number.\n                currentPage: page,\n                // The total number of pages.\n                totalPages,\n            },\n            // The links to the first, last, current, next, and previous pages.\n            links: {\n                // The URL of the first page.\n                first: `${requestUrl.origin}${requestUrl.pathname}?limit=${limit}&page=1`,\n                // The URL of the last page.\n                last: `${requestUrl.origin}${requestUrl.pathname}?limit=${limit}&page=${totalPages}`,\n                // The URL of the current page.\n                current: `${requestUrl.origin}${requestUrl.pathname}?limit=${limit}&page=${page}`,\n                // The URL of the next page.\n                next: `${requestUrl.origin}${requestUrl.pathname}?limit=${limit}&page=${nextPage}`,\n                // The URL of the previous page.\n                previous: `${requestUrl.origin}${requestUrl.pathname}?limit=${limit}&page=${previousPage}`,\n            },\n        };\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n\n    @IsOptional()\n    @IsPositive()\n    limit?: number = 10;\n    \n    @IsOptional()\n    @IsPositive()\n    page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the user', example: 1})@IsInt({message: 'User ID must be an integer.'})@IsNotEmpty({message: 'User ID cannot be empty.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n    @ApiProperty({\n        description: \"Unique identifier for the user\",\n        example: 1,  // Example ID for illustration\n    })\n    @IsInt({ message: 'User ID must be an integer.' })  \n    @IsNotEmpty({ message: 'User ID cannot be empty.' })\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                images\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orderItems\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                reviews\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updateAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Categories\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.products, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-array', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'float', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Review[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, review => review.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:56\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Categories } from 'src/categories/categories.entity';\nimport { OrderItem } from 'src/orders/order-item.entity';\nimport { Review } from 'src/reviews/review.entity';\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity()\nexport class Product {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar', \n        length: 255, \n        nullable: false \n    })\n    name: string;\n\n    @Column({\n        type: 'float', \n        nullable: false \n    })\n    price: number;\n\n    @Column({ \n        type: 'text', \n        nullable: false \n    })\n    description: string;\n\n    @ManyToOne(() => Categories, (category) => category.products, { eager: true })\n    category: Categories; // This keeps the relationship\n    \n    @Column({ \n        type: 'int', \n        nullable: false \n    })\n    stock: number;\n\n    @Column({ \n        type: 'simple-array', \n        nullable: false \n    })\n    images: string[];\n\n    @OneToMany(() => Review, (review) => review.product)\n    reviews: Review[];\n\n    @OneToMany(() => OrderItem, (orderItem) => orderItem.product) // Link to OrderItem\n    orderItems: OrderItem[];\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updateAt: Date;\n\n    @DeleteDateColumn()\n    @Exclude()\n    deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createManyProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteProductById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findAllProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findProductById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                reactivateProductById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createManyProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyProducts(createManyProductDto: CreateManyProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@ApiOperation({summary: 'Create multiple products'})@ApiResponse({status: 201, description: 'Products created successfully.'})@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyProductDto\n                                            \n                                                            CreateManyProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProducts(productDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new product'})@ApiResponse({status: 201, description: 'Product created successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')@ApiOperation({summary: 'Soft delete a product by ID'})@ApiResponse({status: 200, description: 'Product soft deleted successfully.'})@ApiResponse({status: 404, description: 'Product not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(category?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all/:id?')@Auth(AuthType.None)@ApiOperation({summary: 'Retrieve all products, optionally filtered by category ID'})@ApiResponse({status: 200, description: 'List of products retrieved successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Find a product by ID'})@ApiResponse({status: 200, description: 'Product retrieved successfully.'})@ApiResponse({status: 404, description: 'Product not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        reactivateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateProductById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/reactivate/:id')@ApiOperation({summary: 'Reactivate a product by ID'})@ApiResponse({status: 200, description: 'Product reactivated successfully.'})@ApiResponse({status: 404, description: 'Product not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update')@ApiOperation({summary: 'Update a product by ID'})@ApiResponse({status: 200, description: 'Product updated successfully.'})@ApiResponse({status: 404, description: 'Product not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreateManyProductsDto } from './dtos/create-many-products-dto';\nimport { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put, Query } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dtos/create-product-dto';\nimport { Product } from './product.entity';\nimport { UpdateProductDto } from './dtos/update-product-dto';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@ApiTags('products')  // Tagging the controller for Swagger UI\n@Controller('products')\nexport class ProductsController {\n    constructor(private readonly productService: ProductsService) {}\n\n    @Post('create')\n    @ApiOperation({ summary: 'Create a new product' })\n    @ApiResponse({ status: 201, description: 'Product created successfully.' })\n    public async createProducts(@Body() productDto: CreateProductDto): Promise {\n        return this.productService.createProducts(productDto);\n    }\n\n    @Post('create-many')\n    @ApiOperation({ summary: 'Create multiple products' })\n    @ApiResponse({ status: 201, description: 'Products created successfully.' })\n    @Auth(AuthType.None)\n    public async createManyProducts(@Body() createManyProductDto: CreateManyProductsDto): Promise {\n        return this.productService.createManyProducts(createManyProductDto);\n    }\n\n    @Get('/all/:id?')\n    @Auth(AuthType.None)\n    @ApiOperation({ summary: 'Retrieve all products, optionally filtered by category ID' })\n    @ApiResponse({ status: 200, description: 'List of products retrieved successfully.' })\n    public async findAllProducts(@Param('id', ParseIntPipe) category?: number): Promise {\n        return this.productService.findAllProducts(category);\n    }\n\n    @Get('/:id')\n    @ApiOperation({ summary: 'Find a product by ID' })\n    @ApiResponse({ status: 200, description: 'Product retrieved successfully.' })\n    @ApiResponse({ status: 404, description: 'Product not found.' })\n    public async findProductById(@Param('id', ParseIntPipe) id: number): Promise {\n        return this.productService.findProductById(id);\n    }\n\n    @Put('/reactivate/:id')\n    @ApiOperation({ summary: 'Reactivate a product by ID' })\n    @ApiResponse({ status: 200, description: 'Product reactivated successfully.' })\n    @ApiResponse({ status: 404, description: 'Product not found.' })\n    public async reactivateProductById(@Param('id', ParseIntPipe) id: number): Promise {\n        return this.productService.reactivateProductById(id);\n    }\n\n    @Put('update')\n    @ApiOperation({ summary: 'Update a product by ID' })\n    @ApiResponse({ status: 200, description: 'Product updated successfully.' })\n    @ApiResponse({ status: 404, description: 'Product not found.' })\n    public async updateProductById(@Body() updateProductDto: UpdateProductDto): Promise {\n        return this.productService.updateProductById(updateProductDto);\n    }\n\n    @Delete('soft-delete')\n    @ApiOperation({ summary: 'Soft delete a product by ID' })\n    @ApiResponse({ status: 200, description: 'Product soft deleted successfully.' })\n    @ApiResponse({ status: 404, description: 'Product not found.' })\n    public async deleteProductById(@Query('id', ParseIntPipe) id: number): Promise {\n        return this.productService.deleteProductById(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nCreateManyProductsProvider\n\nCreateManyProductsProvider\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nCreateManyProductsProvider->ProductsModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductByIdProvider\n\nDeleteProductByIdProvider\n\nProductsModule -->\n\nDeleteProductByIdProvider->ProductsModule\n\n\n\n\n\nFindAllProductProvider\n\nFindAllProductProvider\n\nProductsModule -->\n\nFindAllProductProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nReactivateProductByIdProvider\n\nReactivateProductByIdProvider\n\nProductsModule -->\n\nReactivateProductByIdProvider->ProductsModule\n\n\n\n\n\nUpdateProductByIdProvider\n\nUpdateProductByIdProvider\n\nProductsModule -->\n\nUpdateProductByIdProvider->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateManyProductsProvider\n                        \n                        \n                            CreateProductProvider\n                        \n                        \n                            DeleteProductByIdProvider\n                        \n                        \n                            FindAllProductProvider\n                        \n                        \n                            FindProductByIdProvider\n                        \n                        \n                            ProductsService\n                        \n                        \n                            ReactivateProductByIdProvider\n                        \n                        \n                            UpdateProductByIdProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\nimport { FindAllProductProvider } from './providers/find-all-product.provider';\nimport { UpdateProductByIdProvider } from './providers/update-product-by-id.provider';\nimport { DeleteProductByIdProvider } from './providers/delete-product-by-id.provider';\nimport { ReactivateProductByIdProvider } from './providers/reactivate-product-by-id.provider';\nimport { CreateManyProductsProvider } from './providers/create-many-products.provider';\nimport { CategoriesModule } from 'src/categories/categories.module';\nimport { Categories } from 'src/categories/categories.entity';\n\n@Module({\n  controllers: [ProductsController],\n  providers: [\n    ProductsService, \n    CreateProductProvider, \n    FindProductByIdProvider, \n    FindAllProductProvider, \n    UpdateProductByIdProvider, \n    DeleteProductByIdProvider, \n    ReactivateProductByIdProvider, \n    CreateManyProductsProvider\n  ],\n  imports: [\n    TypeOrmModule.forFeature([Product, Categories]),\n    forwardRef(() => CategoriesModule),\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyProducts\n                            \n                            \n                                    Public\n                                    Async\n                                createProducts\n                            \n                            \n                                    Public\n                                    Async\n                                deleteProductById\n                            \n                            \n                                    Public\n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Public\n                                    Async\n                                findProductById\n                            \n                            \n                                    Public\n                                    Async\n                                reactivateProductById\n                            \n                            \n                                    Public\n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createProductProvider: CreateProductProvider, createManyProductsProvider: CreateManyProductsProvider, findAllProductProvider: FindAllProductProvider, findProductByIdProvider: FindProductByIdProvider, deleteProductByIdProvider: DeleteProductByIdProvider, updateProductByIdProvider: UpdateProductByIdProvider, reactivateProductByIdProvider: ReactivateProductByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createProductProvider\n                                                  \n                                                        \n                                                                        CreateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createManyProductsProvider\n                                                  \n                                                        \n                                                                        CreateManyProductsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllProductProvider\n                                                  \n                                                        \n                                                                        FindAllProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findProductByIdProvider\n                                                  \n                                                        \n                                                                        FindProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteProductByIdProvider\n                                                  \n                                                        \n                                                                        DeleteProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateProductByIdProvider\n                                                  \n                                                        \n                                                                        UpdateProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reactivateProductByIdProvider\n                                                  \n                                                        \n                                                                        ReactivateProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyProducts(createManyProducts: CreateManyProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyProducts\n                                            \n                                                            CreateManyProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProducts(productDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(category?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UpdateProductDto } from './dtos/update-product-dto';\nimport { UpdateProductByIdProvider } from './providers/update-product-by-id.provider';\nimport { CreateManyProductsProvider } from './providers/create-many-products.provider';\nimport { CreateManyProductsDto } from './dtos/create-many-products-dto';\nimport { Injectable } from '@nestjs/common';\nimport { Product } from './product.entity';\nimport { CreateProductDto } from './dtos/create-product-dto';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { DeleteProductByIdProvider } from './providers/delete-product-by-id.provider';\nimport { FindAllProductProvider } from './providers/find-all-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\nimport { ReactivateProductByIdProvider } from './providers/reactivate-product-by-id.provider';\n\n@Injectable()\nexport class ProductsService {\n\n    constructor(\n       private readonly createProductProvider: CreateProductProvider,\n       \n       private readonly createManyProductsProvider: CreateManyProductsProvider,\n\n       private readonly findAllProductProvider: FindAllProductProvider,\n\n       private readonly findProductByIdProvider: FindProductByIdProvider,\n\n       private readonly deleteProductByIdProvider: DeleteProductByIdProvider,\n\n       private readonly updateProductByIdProvider: UpdateProductByIdProvider,\n\n       private readonly reactivateProductByIdProvider: ReactivateProductByIdProvider\n\n    ) {}\n\n    public async createProducts(productDto: CreateProductDto): Promise {\n        return await this.createProductProvider.createProductsProvider(productDto);\n    }\n\n    public async createManyProducts(createManyProducts: CreateManyProductsDto): Promise {\n        return await this.createManyProductsProvider.createManyProductsProvider(createManyProducts);\n    }\n\n    public async findAllProducts(category?: number): Promise {\n        return await this.findAllProductProvider.findAllProductProvider(category);\n    }\n\n    public async findProductById(id: number): Promise {\n        return await this.findProductByIdProvider.findProductByIdProvider(id);\n    }\n\n    public async deleteProductById(id: number): Promise {\n        return await this.deleteProductByIdProvider.deleteProductByIdProvider(id);\n    }\n\n    public async updateProductById(updateProductDto: UpdateProductDto) : Promise {\n        return await this.updateProductByIdProvider.updateProductByIdProvider(updateProductDto);\n    }\n\n    public async reactivateProductById(id: number) : Promise {\n        return await this.reactivateProductByIdProvider.reactivateProductByIdProvider(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReactivateCategoryByIdProvider.html":{"url":"injectables/ReactivateCategoryByIdProvider.html","title":"injectable - ReactivateCategoryByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReactivateCategoryByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/reactivate-category-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                reactivateCategoryByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/reactivate-category-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateCategoryByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateCategoryByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/reactivate-category-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Categories } from '../categories.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class ReactivateCategoryByIdProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async reactivateCategoryByIdProvider(id:number) : Promise {\n        let category: Categories = undefined;\n\n        try {\n            category = await this.categoriesRepository.findOne({where: { id }, withDeleted: true });\n            if(!category || !category.deletedAt) throw new ConflictException('Category not found');\n\n            category.deletedAt = null;\n            await this.categoriesRepository.save(category);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n\n        return category;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReactivateProductByIdProvider.html":{"url":"injectables/ReactivateProductByIdProvider.html","title":"injectable - ReactivateProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReactivateProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/reactivate-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                reactivateProductByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/reactivate-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateProductByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateProductByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/reactivate-product-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class ReactivateProductByIdProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async reactivateProductByIdProvider(id: number): Promise {\n        let product : Product = undefined;\n        try {\n            product = await this.productRepository.findOne({where: { id }, withDeleted: true});\n            if(!product || !product.deletedAt) throw new ConflictException('Product not found');\n\n            product.deletedAt = null;\n            await this.productRepository.save(product);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n        return product;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReactivateUserByIdProvider.html":{"url":"injectables/ReactivateUserByIdProvider.html","title":"injectable - ReactivateUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReactivateUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/reactivate-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                reactivateUserByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/reactivate-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateUserByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateUserByIdProvider(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/reactivate-user-by-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ReactivateUserByIdProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ) {}\n\n    public async reactivateUserByIdProvider(id: number): Promise {\n        let user : User = undefined;\n        try {\n            user = await this.usersRepository.findOne({ where: { id }, withDeleted: true });\n            if(!user || !user.deletedAt) throw new ConflictException('User not found');\n    \n            user.deletedAt = null;\n            await this.usersRepository.save(user);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n       \n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokentProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokentProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport jwtConfig from \"../config/jwt.config\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { ConfigType } from \"@nestjs/config\";\nimport { GenerateTokentProvider } from \"./generate-tokens.provider\";\nimport { UsersService } from \"src/users/users.service\";\nimport { RefreshTokenDto } from \"../dtos/refresh-token.dto\";\nimport { ActiveUserData } from \"../interfaces/active-user-data.interface\";\n\n@Injectable()\nexport class RefreshTokensProvider {\n    constructor(\n        private readonly jwtService: JwtService,\n        \n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n        \n        private readonly generateTokenProvider: GenerateTokentProvider,\n\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService\n    ) {}\n\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        try {\n            const { sub } = await this.jwtService.verifyAsync>(refreshTokenDto.refreshToken, {\n                secret: this.jwtConfiguration.secret,\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer\n            });\n\n            const user = await this.usersService.findOneById(sub);\n            return await this.generateTokenProvider.generateTokens(user);\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Review.html":{"url":"entities/Review.html","title":"entity - Review","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Review\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reviews/review.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comment\n                            \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                rating\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.reviews)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reviews)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reviews/review.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Product } from \"src/products/product.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Review {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @ManyToOne(() => User, (user) => user.reviews)\n    user: User;\n\n    @ManyToOne(() => Product, (product) => product.reviews)\n    product: Product;\n\n    @Column({\n        type: 'int',\n        default: 0\n    })\n\n    rating: number;\n\n    @Column({ type: 'text' })\n    comment: string;\n\n    @CreateDateColumn()\n    createdDate: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReviewsController.html":{"url":"controllers/ReviewsController.html","title":"controller - ReviewsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReviewsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reviews/reviews.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reviews\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('reviews')\nexport class ReviewsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReviewsModule.html":{"url":"modules/ReviewsModule.html","title":"module - ReviewsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReviewsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReviewsModule\n\n\n\ncluster_ReviewsModule_providers\n\n\n\n\nReviewsService\n\nReviewsService\n\n\n\nReviewsModule\n\nReviewsModule\n\nReviewsModule -->\n\nReviewsService->ReviewsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reviews/reviews.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReviewsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReviewsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReviewsController } from './reviews.controller';\nimport { ReviewsService } from './reviews.service';\n\n@Module({\n  controllers: [ReviewsController],\n  providers: [ReviewsService]\n})\nexport class ReviewsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReviewsService.html":{"url":"injectables/ReviewsService.html","title":"injectable - ReviewsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReviewsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reviews/reviews.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ReviewsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for user sign-in.\nThis class defines the structure of the sign-in data and includes validation rules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's email address. Must be a valid email format.', example: 'user@example.com'})@IsEmail({}, {message: 'Invalid email format'})@IsNotEmpty({message: 'Email cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin-dto.ts:19\n                        \n                    \n\n            \n                \n                    The user's email address.\nIt must be a valid email format and cannot be empty.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's password. Must be a string and cannot be empty.', example: 'P@ssw0rd!'})@IsString({message: 'Password must be a string'})@IsNotEmpty({message: 'Password cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin-dto.ts:31\n                        \n                    \n\n            \n                \n                    The user's password.\nIt must be a string and cannot be empty.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Data Transfer Object (DTO) for user sign-in.\n * This class defines the structure of the sign-in data and includes validation rules.\n */\nexport class SignInDto {\n    /** \n     * The user's email address.\n     * It must be a valid email format and cannot be empty.\n     */\n    @ApiProperty({\n        description: 'The user\\'s email address. Must be a valid email format.',\n        example: 'user@example.com', // Example email for documentation\n    })\n    @IsEmail({}, { message: 'Invalid email format' }) // Custom error message for better clarity\n    @IsNotEmpty({ message: 'Email cannot be empty' }) // Custom error message for clarity\n    email: string;\n    \n    /** \n     * The user's password.\n     * It must be a string and cannot be empty.\n     */\n    @ApiProperty({\n        description: 'The user\\'s password. Must be a string and cannot be empty.',\n        example: 'P@ssw0rd!', // Example password for documentation\n    })\n    @IsString({ message: 'Password must be a string' }) // Custom error message for better clarity\n    @IsNotEmpty({ message: 'Password cannot be empty' }) // Custom error message for clarity\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                            \n                                    Public\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokentProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokentProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPassword(password: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SignInDto } from './../dtos/signin-dto';\nimport { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from \"@nestjs/common\";\nimport { HashingProvider } from \"./hashing.provider\";\nimport { GenerateTokentProvider } from \"./generate-tokens.provider\";\nimport { UsersService } from \"src/users/users.service\";\n\n@Injectable()\nexport class SignInProvider {\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n        private readonly hashingProvider: HashingProvider,\n        private readonly generateTokenProvider: GenerateTokentProvider\n    ) {}\n\n    public async signIn(signInDto: SignInDto): Promise {\n        try {\n\n            const user = await this.usersService.findOneByEmail(signInDto.email);\n            if(!user)\n                throw new UnauthorizedException('User not found');\n            \n\n            const passwordMatches = await this.verifyPassword(signInDto.password, user.password);\n            if(!passwordMatches) \n                throw new UnauthorizedException('Password does not match'); \n\n            return await this.generateTokenProvider.generateTokens(user);\n        } catch(error) {\n            throw new RequestTimeoutException(error);\n        }\n    }\n\n    public async verifyPassword(password: string, hash: string): Promise {\n        try {\n            return await this.hashingProvider.comparePassword(password, hash);\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'Password comparison failed',\n            });\n        }\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateCategoryByIdProvider.html":{"url":"injectables/UpdateCategoryByIdProvider.html","title":"injectable - UpdateCategoryByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateCategoryByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/providers/update-category-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateCategoryByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/providers/update-category-by-id.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateCategoryByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategoryByIdProvider(updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/providers/update-category-by-id.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Categories } from '../categories.entity';\nimport { UpdateCategoryDto } from '../dtos/update-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class UpdateCategoryByIdProvider {\n    constructor(\n        @InjectRepository(Categories)\n        private readonly categoriesRepository: Repository,\n    ) {}\n\n    public async updateCategoryByIdProvider(updateCategoryDto: UpdateCategoryDto): Promise {\n        let existingCategory : Categories = undefined;\n\n        try {\n            existingCategory = await this.categoriesRepository.preload({\n                id: updateCategoryDto.id,\n                ...updateCategoryDto\n            })\n    \n            if(!existingCategory) throw new ConflictException('Category not found');\n\n            return await this.categoriesRepository.save(existingCategory);\n        } catch (error) {            \n            throw new RequestTimeoutException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dtos/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCategoryDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier of the category to update', type: Number, required: false})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dtos/update-category.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, ApiProperty } from \"@nestjs/swagger\";\nimport { CreateCategoryDto } from \"./create-category.dto\";\nimport { IsInt, IsNotEmpty, IsOptional } from \"class-validator\";\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n    @ApiProperty({\n        description: 'Unique identifier of the category to update',\n        type: Number,\n        required: false,\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateOrderByIdProvider.html":{"url":"injectables/UpdateOrderByIdProvider.html","title":"injectable - UpdateOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/update-order-by-id.provider.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UpdateOrderByIdProvider {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateProductByIdProvider.html":{"url":"injectables/UpdateProductByIdProvider.html","title":"injectable - UpdateProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/update-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateProductByIdProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/update-product-by-id.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProductByIdProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductByIdProvider(updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product-by-id.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from '../dtos/update-product-dto';\n\n@Injectable()\nexport class UpdateProductByIdProvider {\n    constructor(\n        @InjectRepository(Product)\n        private readonly productRepository: Repository,\n    ) {}\n\n    public async updateProductByIdProvider(updateProductDto: UpdateProductDto): Promise {\n        let existingProduct : Product = undefined;\n \n        try {\n            existingProduct = await this.productRepository.preload({\n                id: updateProductDto.id,\n                ...updateProductDto,\n            });\n    \n            if (!existingProduct) throw new ConflictException('Failed to find product');\n            \n            return await this.productRepository.save(existingProduct);\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/update-product-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the product to be updated', type: Number})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, ApiProperty } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreateProductDto } from \"./create-product-dto\";\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n    @ApiProperty({\n        description: 'Unique identifier for the product to be updated',\n        type: Number,\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateUserByIdProvider.html":{"url":"injectables/UpdateUserByIdProvider.html","title":"injectable - UpdateUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/update-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/update-user-by-id.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserById(patchUserDto: PatchUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/update-user-by-id.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { PatchUserDto } from './../dtos/patch-user.dto';\nimport { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\n\n@Injectable()\nexport class UpdateUserByIdProvider {\n    constructor(\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n\n        private readonly hashingProvider: HashingProvider\n    ) {}\n\n    public async updateUserById(patchUserDto: PatchUserDto): Promise {\n        try {\n            const hashedPassword : string = patchUserDto.password ? await this.hashingProvider.hashPassword(patchUserDto.password) : undefined;\n\n            const userToUpdate = await this.usersRepository.preload({\n                id: patchUserDto.id,\n                ...patchUserDto,\n                password: hashedPassword,\n            });\n\n            if (!userToUpdate) {\n                throw new ConflictException('User not found');\n            }\n\n            await this.usersRepository.save(userToUpdate);\n            return userToUpdate;\n        } catch (error) {\n            throw new RequestTimeoutException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                reviews\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1025, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Review[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reviews => reviews.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from \"class-transformer\";\nimport { Order } from \"src/orders/order.entity\";\nimport { Review } from \"src/reviews/review.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity('users')\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false\n    })\n    firstName: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: true,\n    })\n    lastName?: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false\n    })\n    @Exclude()\n    password: string;\n    \n    @Column({\n        type: 'varchar',\n        length: 1025,\n        nullable: false\n    })\n    address: string;\n\n    @OneToMany(() => Order, (order) => order.user)\n    orders: Order[];\n\n    @OneToMany(() => Review, (reviews) => reviews.user)\n    reviews: Review[];\n    \n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Exclude()\n    @DeleteDateColumn()\n    deletedAt: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findAllUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                reactivateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register-many')@ApiOperation({summary: 'Register multiple users'})@ApiResponse({status: 201, description: 'Users created successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@Auth(AuthType.None)@ApiOperation({summary: 'Register a new user'})@ApiResponse({status: 201, description: 'User created successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')@ApiOperation({summary: 'Soft delete a user by ID'})@ApiResponse({status: 200, description: 'User soft deleted successfully.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Retrieve all users'})@ApiResponse({status: 200, description: 'List of users retrieved successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email/:email?')@ApiOperation({summary: 'Find user by email'})@ApiResponse({status: 200, description: 'User retrieved successfully.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/id/:id?')@ApiOperation({summary: 'Find user by ID'})@ApiResponse({status: 200, description: 'User retrieved successfully.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        reactivateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/reactivate/:id')@ApiOperation({summary: 'Reactivate a soft deleted user by ID'})@ApiResponse({status: 200, description: 'User reactivated successfully.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserById(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update')@ApiOperation({summary: 'Update a user by ID'})@ApiResponse({status: 200, description: 'User updated successfully.'})@ApiResponse({status: 404, description: 'User not found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put, Query } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { User } from './user.entity';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n@ApiTags('users')  // Tagging the controller for Swagger UI\n@Controller('users')\nexport class UsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Retrieve all users' })\n    @ApiResponse({ status: 200, description: 'List of users retrieved successfully.' })\n    public async findAllUsers(): Promise {\n        return await this.usersService.findAllUsers();\n    }\n\n    @Get('/email/:email?')\n    @ApiOperation({ summary: 'Find user by email' })\n    @ApiResponse({ status: 200, description: 'User retrieved successfully.' })\n    @ApiResponse({ status: 404, description: 'User not found.' })\n    public async findOneByEmail(@Param('email') email: string): Promise {\n        return await this.usersService.findOneByEmail(email);\n    }\n\n    @Get('/id/:id?')\n    @ApiOperation({ summary: 'Find user by ID' })\n    @ApiResponse({ status: 200, description: 'User retrieved successfully.' })\n    @ApiResponse({ status: 404, description: 'User not found.' })\n    public async findOneById(@Param('id') id: number): Promise {\n        return await this.usersService.findOneById(id);\n    }\n\n    @Post('register')\n    @Auth(AuthType.None)\n    @ApiOperation({ summary: 'Register a new user' })\n    @ApiResponse({ status: 201, description: 'User created successfully.' })\n    public async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return await this.usersService.createUser(createUserDto);\n    }\n\n    @Post('register-many')\n    @ApiOperation({ summary: 'Register multiple users' })\n    @ApiResponse({ status: 201, description: 'Users created successfully.' })\n    public async createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto): Promise {\n        return await this.usersService.createManyUsers(createManyUsersDto);\n    }\n\n    @Put('update')\n    @ApiOperation({ summary: 'Update a user by ID' })\n    @ApiResponse({ status: 200, description: 'User updated successfully.' })\n    @ApiResponse({ status: 404, description: 'User not found.' })\n    public async updateUserById(@Body() patchUserDto: PatchUserDto): Promise {\n        return await this.usersService.updateUserById(patchUserDto);\n    }\n\n    @Delete('soft-delete')\n    @ApiOperation({ summary: 'Soft delete a user by ID' })\n    @ApiResponse({ status: 200, description: 'User soft deleted successfully.' })\n    @ApiResponse({ status: 404, description: 'User not found.' })\n    public async deleteUserById(@Query('id', ParseIntPipe) id: number): Promise {\n        return await this.usersService.deleteUserById(id);\n    }\n\n    @Put('/reactivate/:id')\n    @ApiOperation({ summary: 'Reactivate a soft deleted user by ID' })\n    @ApiResponse({ status: 200, description: 'User reactivated successfully.' })\n    @ApiResponse({ status: 404, description: 'User not found.' })\n    public async reactivateUser(@Param('id', ParseIntPipe) id: number): Promise {\n        return await this.usersService.reactivateUserById(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateManyUsersProvider\n\nCreateManyUsersProvider\n\nUsersModule -->\n\nCreateManyUsersProvider->UsersModule\n\n\n\n\n\nCreateUsersProvider\n\nCreateUsersProvider\n\nUsersModule -->\n\nCreateUsersProvider->UsersModule\n\n\n\n\n\nDeleteUserByIdProvider\n\nDeleteUserByIdProvider\n\nUsersModule -->\n\nDeleteUserByIdProvider->UsersModule\n\n\n\n\n\nFindAllUsersProvider\n\nFindAllUsersProvider\n\nUsersModule -->\n\nFindAllUsersProvider->UsersModule\n\n\n\n\n\nFindOneByEmailProvider\n\nFindOneByEmailProvider\n\nUsersModule -->\n\nFindOneByEmailProvider->UsersModule\n\n\n\n\n\nFindOneByIdProvider\n\nFindOneByIdProvider\n\nUsersModule -->\n\nFindOneByIdProvider->UsersModule\n\n\n\n\n\nReactivateUserByIdProvider\n\nReactivateUserByIdProvider\n\nUsersModule -->\n\nReactivateUserByIdProvider->UsersModule\n\n\n\n\n\nUpdateUserByIdProvider\n\nUpdateUserByIdProvider\n\nUsersModule -->\n\nUpdateUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateManyUsersProvider\n                        \n                        \n                            CreateUsersProvider\n                        \n                        \n                            DeleteUserByIdProvider\n                        \n                        \n                            FindAllUsersProvider\n                        \n                        \n                            FindOneByEmailProvider\n                        \n                        \n                            FindOneByIdProvider\n                        \n                        \n                            ReactivateUserByIdProvider\n                        \n                        \n                            UpdateUserByIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { FindOneByEmailProvider } from './providers/find-one-by-email.provider';\nimport { CreateUsersProvider } from './providers/create-users.provider';\nimport { FindOneByIdProvider } from './providers/find-one-by-id.provider';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { FindAllUsersProvider } from './providers/find-all-users.provider';\nimport { DeleteUserByIdProvider } from './providers/delete-user-by-id.provider';\nimport { ReactivateUserByIdProvider } from './providers/reactivate-user-by-id.provider';\nimport { UpdateUserByIdProvider } from './providers/update-user-by-id.provider';\nimport { CreateManyUsersProvider } from './providers/create-many-users.provider';\nimport { Order } from 'src/orders/order.entity';\nimport { Review } from 'src/reviews/review.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    FindOneByEmailProvider, \n    CreateUsersProvider, \n    FindOneByIdProvider, \n    FindAllUsersProvider, DeleteUserByIdProvider, ReactivateUserByIdProvider, UpdateUserByIdProvider, CreateManyUsersProvider,\n  ],\n  exports: [UsersService],\n  imports: [\n    TypeOrmModule.forFeature([User, Order, Review]),\n    forwardRef(() => AuthModule)\n  ]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Public\n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                reactivateUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(findOneByEmailProvider: FindOneByEmailProvider, findOneByIdProvider: FindOneByIdProvider, createUsersProvider: CreateUsersProvider, findAllUsersProvider: FindAllUsersProvider, deleteUserByIdProvider: DeleteUserByIdProvider, reactivateUserByIdProvider: ReactivateUserByIdProvider, updateUserByIdProvider: UpdateUserByIdProvider, createManyUsersProvider: CreateManyUsersProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        findOneByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByIdProvider\n                                                  \n                                                        \n                                                                        FindOneByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUsersProvider\n                                                  \n                                                        \n                                                                        CreateUsersProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllUsersProvider\n                                                  \n                                                        \n                                                                        FindAllUsersProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteUserByIdProvider\n                                                  \n                                                        \n                                                                        DeleteUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reactivateUserByIdProvider\n                                                  \n                                                        \n                                                                        ReactivateUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateUserByIdProvider\n                                                  \n                                                        \n                                                                        UpdateUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createManyUsersProvider\n                                                  \n                                                        \n                                                                        CreateManyUsersProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        reactivateUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactivateUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserById(patchUserDto: PatchUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReactivateUserByIdProvider } from './providers/reactivate-user-by-id.provider';\nimport { DeleteUserByIdProvider } from './providers/delete-user-by-id.provider';\nimport { FindAllUsersProvider } from './providers/find-all-users.provider';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { Injectable } from '@nestjs/common';\nimport { FindOneByEmailProvider } from './providers/find-one-by-email.provider';\nimport { User } from './user.entity';\nimport { FindOneByIdProvider } from './providers/find-one-by-id.provider';\nimport { CreateUsersProvider } from './providers/create-users.provider';\nimport { UpdateUserByIdProvider } from './providers/update-user-by-id.provider';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { CreateManyUsersProvider } from './providers/create-many-users.provider';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        private readonly findOneByEmailProvider: FindOneByEmailProvider,\n\n        private readonly findOneByIdProvider: FindOneByIdProvider,\n\n        private readonly createUsersProvider: CreateUsersProvider,\n\n        private readonly findAllUsersProvider: FindAllUsersProvider,\n\n        private readonly deleteUserByIdProvider: DeleteUserByIdProvider,\n\n        private readonly reactivateUserByIdProvider: ReactivateUserByIdProvider,\n\n        private readonly updateUserByIdProvider: UpdateUserByIdProvider,\n\n        private readonly createManyUsersProvider: CreateManyUsersProvider,\n    ) {}\n\n    public async findAllUsers() : Promise {\n        return await this.findAllUsersProvider.findAllUserProvider();\n    }\n    public async findOneByEmail(email: string) : Promise {\n        return await this.findOneByEmailProvider.findOneByEmailProvider(email);\n    }\n\n    public async findOneById(id: number) : Promise {\n        return await this.findOneByIdProvider.findUserByIdProvider(Number(id));\n    }\n    \n    public async createUser(createUserDto: CreateUserDto): Promise {\n        return await this.createUsersProvider.createUser(createUserDto);\n    }\n\n    public async createManyUsers(createManyUsersDto: CreateManyUsersDto) : Promise {\n        return await this.createManyUsersProvider.createManyUsers(createManyUsersDto);\n    }\n\n    public async updateUserById(patchUserDto: PatchUserDto) : Promise {\n        return await this.updateUserByIdProvider.updateUserById(patchUserDto)\n    }\n\n    public async deleteUserById(id: number): Promise {\n        return await this.deleteUserByIdProvider.deleteUserById(Number(id));\n    }\n\n    public async reactivateUserById(id: number): Promise {\n        return await this.reactivateUserByIdProvider.reactivateUserByIdProvider(Number(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/addresses/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/addresses/addresses.controller.ts\n            \n            controller\n            AddressesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/addresses/addresses.service.ts\n            \n            injectable\n            AddressesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.create.ts\n            \n            function\n            appCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin-dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/argon2.provider.ts\n            \n            injectable\n            Argon2Provider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokentProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/categories/categories.entity.ts\n            \n            entity\n            Categories\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/categories/dtos/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/dtos/create-many-category.dto.ts\n            \n            class\n            CreateManyCategoriesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dtos/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/providers/create-category.provider.ts\n            \n            injectable\n            CreateCategoryProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/providers/create-many-categories.provider.ts\n            \n            injectable\n            CreateManyCategoriesProvider\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/providers/delete-category-by-id.provider.ts\n            \n            injectable\n            DeleteCategoryByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/providers/find-all-categories.provider.ts\n            \n            injectable\n            FindAllCategoriesProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/providers/find-category-by-id.provider.ts\n            \n            injectable\n            FindCategoryByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/providers/reactivate-category-by-id.provider.ts\n            \n            injectable\n            ReactivateCategoryByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/providers/update-category-by-id.provider.ts\n            \n            injectable\n            UpdateCategoryByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/pagination.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/utils/bulk-create-provider.ts\n            \n            injectable\n            BulkCreateProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/utils/global-exception-filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            interface\n            AppConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            interface\n            DatabaseConfig\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            toBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/environment.validation.ts\n            \n            variable\n            envSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-many-order-dto.ts\n            \n            class\n            CreateManyOrdersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order-dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order-item-dto.ts\n            \n            class\n            CreateOrderItemDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/create-many-order.provider.ts\n            \n            injectable\n            CreateManyOrderProvider\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/orders/providers/create-order.provider.ts\n            \n            injectable\n            CreateOrderProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/delete-order-by-id.provider.ts\n            \n            injectable\n            DeleteOrderByIdProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/providers/update-order-by-id.provider.ts\n            \n            injectable\n            UpdateOrderByIdProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/dtos/create-many-products-dto.ts\n            \n            class\n            CreateManyProductsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/dtos/create-product-dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dtos/update-product-dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/products/providers/create-many-products.provider.ts\n            \n            injectable\n            CreateManyProductsProvider\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/products/providers/create-product.provider.ts\n            \n            injectable\n            CreateProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/delete-product-by-id.provider.ts\n            \n            injectable\n            DeleteProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-all-product.provider.ts\n            \n            injectable\n            FindAllProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-product-by-id.provider.ts\n            \n            injectable\n            FindProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/reactivate-product-by-id.provider.ts\n            \n            injectable\n            ReactivateProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/update-product-by-id.provider.ts\n            \n            injectable\n            UpdateProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/reviews/review.entity.ts\n            \n            entity\n            Review\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reviews/reviews.controller.ts\n            \n            controller\n            ReviewsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reviews/reviews.service.ts\n            \n            injectable\n            ReviewsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/providers/create-many-users.provider.ts\n            \n            injectable\n            CreateManyUsersProvider\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/providers/create-users.provider.ts\n            \n            injectable\n            CreateUsersProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/delete-user-by-id.provider.ts\n            \n            injectable\n            DeleteUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-all-users.provider.ts\n            \n            injectable\n            FindAllUsersProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-email.provider.ts\n            \n            injectable\n            FindOneByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-id.provider.ts\n            \n            injectable\n            FindOneByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/reactivate-user-by-id.provider.ts\n            \n            injectable\n            ReactivateUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/update-user-by-id.provider.ts\n            \n            injectable\n            UpdateUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @fastify/static : ^7.0.4\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-fastify : ^10.4.6\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            argon2 : ^0.41.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            OrderStatusEnum   (src/.../order-status-enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status-enums.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatusEnum\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 Confirmed\n                            \n                        \n                        \n                            \n                                Value : Confirmed\n                            \n                        \n                        \n                            \n                                 Shipped\n                            \n                        \n                        \n                            \n                                Value : Shipped\n                            \n                        \n                        \n                            \n                                 Delivered\n                            \n                        \n                        \n                            \n                                Value : Delivered\n                            \n                        \n                        \n                            \n                                 Canceled\n                            \n                        \n                        \n                            \n                                Value : Canceled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appCreate   (src/.../app.create.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.create.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appCreate\n                        \n                    \n                \n            \n            \n                \nappCreate(app: NestFastifyApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        NestFastifyApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AddressesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReviewsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AddressesModule\n\n\n\ncluster_AddressesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ReviewsModule\n\n\n\ncluster_ReviewsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAddressesService\n\nAddressesService\n\n\n\nAddressesModule\n\nAddressesModule\n\nAddressesModule -->\n\nAddressesService->AddressesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAddressesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nReviewsModule\n\nReviewsModule\n\nAppModule -->\n\nReviewsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokentProvider\n\nGenerateTokentProvider\n\nAuthModule -->\n\nGenerateTokentProvider->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCreateCategoryProvider\n\nCreateCategoryProvider\n\nCategoriesModule -->\n\nCreateCategoryProvider->CategoriesModule\n\n\n\n\n\nCreateManyCategoriesProvider\n\nCreateManyCategoriesProvider\n\nCategoriesModule -->\n\nCreateManyCategoriesProvider->CategoriesModule\n\n\n\n\n\nDeleteCategoryByIdProvider\n\nDeleteCategoryByIdProvider\n\nCategoriesModule -->\n\nDeleteCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nFindAllCategoriesProvider\n\nFindAllCategoriesProvider\n\nCategoriesModule -->\n\nFindAllCategoriesProvider->CategoriesModule\n\n\n\n\n\nFindCategoryByIdProvider\n\nFindCategoryByIdProvider\n\nCategoriesModule -->\n\nFindCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nReactivateCategoryByIdProvider\n\nReactivateCategoryByIdProvider\n\nCategoriesModule -->\n\nReactivateCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nUpdateCategoryByIdProvider\n\nUpdateCategoryByIdProvider\n\nCategoriesModule -->\n\nUpdateCategoryByIdProvider->CategoriesModule\n\n\n\n\n\nCreateManyOrderProvider\n\nCreateManyOrderProvider\n\nOrdersModule -->\n\nCreateManyOrderProvider->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nDeleteOrderByIdProvider\n\nDeleteOrderByIdProvider\n\nOrdersModule -->\n\nDeleteOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nUpdateOrderByIdProvider\n\nUpdateOrderByIdProvider\n\nOrdersModule -->\n\nUpdateOrderByIdProvider->OrdersModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateManyProductsProvider\n\nCreateManyProductsProvider\n\nProductsModule -->\n\nCreateManyProductsProvider->ProductsModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductByIdProvider\n\nDeleteProductByIdProvider\n\nProductsModule -->\n\nDeleteProductByIdProvider->ProductsModule\n\n\n\n\n\nFindAllProductProvider\n\nFindAllProductProvider\n\nProductsModule -->\n\nFindAllProductProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nReactivateProductByIdProvider\n\nReactivateProductByIdProvider\n\nProductsModule -->\n\nReactivateProductByIdProvider->ProductsModule\n\n\n\n\n\nUpdateProductByIdProvider\n\nUpdateProductByIdProvider\n\nProductsModule -->\n\nUpdateProductByIdProvider->ProductsModule\n\n\n\n\n\nReviewsService\n\nReviewsService\n\nReviewsModule -->\n\nReviewsService->ReviewsModule\n\n\n\n\n\nCreateManyUsersProvider\n\nCreateManyUsersProvider\n\nUsersModule -->\n\nCreateManyUsersProvider->UsersModule\n\n\n\n\n\nCreateUsersProvider\n\nCreateUsersProvider\n\nUsersModule -->\n\nCreateUsersProvider->UsersModule\n\n\n\n\n\nDeleteUserByIdProvider\n\nDeleteUserByIdProvider\n\nUsersModule -->\n\nDeleteUserByIdProvider->UsersModule\n\n\n\n\n\nFindAllUsersProvider\n\nFindAllUsersProvider\n\nUsersModule -->\n\nFindAllUsersProvider->UsersModule\n\n\n\n\n\nFindOneByEmailProvider\n\nFindOneByEmailProvider\n\nUsersModule -->\n\nFindOneByEmailProvider->UsersModule\n\n\n\n\n\nFindOneByIdProvider\n\nFindOneByIdProvider\n\nUsersModule -->\n\nFindOneByIdProvider->UsersModule\n\n\n\n\n\nReactivateUserByIdProvider\n\nReactivateUserByIdProvider\n\nUsersModule -->\n\nReactivateUserByIdProvider->UsersModule\n\n\n\n\n\nUpdateUserByIdProvider\n\nUpdateUserByIdProvider\n\nUsersModule -->\n\nUpdateUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    42 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            envSchema   (src/.../environment.validation.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            toBoolean   (src/.../database.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n        // Switch the context to HTTP to access the incoming request.\n        const request = ctx.switchToHttp().getRequest();\n        \n        // Retrieve the user data from the request object using the REQUEST_USER_KEY.\n        const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n        // Return the specified field of the user object if a field key is provided; otherwise, return the entire user object.\n        return field ? user?.[field] : user;\n    }\n)\n                    \n                \n\n            \n                \n                    Custom parameter decorator for retrieving active user data from the request object.\nThis decorator facilitates the extraction of user-specific information from the request \nby accessing the user data stored under the REQUEST_USER_KEY. It can optionally return \na specific field of the ActiveUserData interface if a field name is provided. If no field \nis specified, the entire user object is returned.\nUsage:\n\nTo retrieve the entire user object:\n\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    Custom decorator to set authorization metadata on route handlers.\nThis decorator accepts one or more AuthType values and associates them\nwith the route handler, allowing for fine-grained access control.\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/config/environment.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    NODE_ENV: Joi.string()\n        .valid('development', 'production', 'test', 'provision')\n        .default('development'),\n    DATABASE_PORT: Joi.number().default(3000),\n    DATABASE_HOST: Joi.string().required(),\n    DATABASE_USERNAME: Joi.string().required(),\n    DATABASE_PASSWORD: Joi.string().required(),\n    DATABASE_NAME: Joi.string().required(),\n})\n                    \n                \n\n\n        \n    \n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string | undefined): boolean => {\n    return value === 'true';\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
